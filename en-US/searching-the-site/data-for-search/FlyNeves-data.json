{
	"0":{
		"documentContentType":"other",
		"title":" FlyNeves ",
		"description":"Learn, develop and share, because programming is fun too - FlyNeves",
		"keywords":"",
		"h1":" Welcome developer ",
		"h2":"",
		"h3":"",
		"mainText":" Welcome developer FlyNeves is a recently launched website, with the objective of developing open source projects for different technologies, with the motto: learn, develop and share, because programming is also fun. $ At no time do our projects aim at profit. We like to innovate, develop, help those who helped us, because during our careers at some point we use some free tool. We are under construction. Everything related to the website and the projects was developed by a single developer. Like or participate in our social pages, this incentive us to maintain this site. ",
		"url":"https://www.flyneves.com/en-US/"
	},
	"1":{
		"documentContentType":"other",
		"title":" Page not found! - FlyNeves ",
		"description":"",
		"keywords":"",
		"h1":"",
		"h2":"",
		"h3":"",
		"mainText":"",
		"url":"https://www.flyneves.com/en-US/lost-on-site/"
	},
	"2":{
		"documentContentType":"other",
		"title":" Developed projects — FlyNeves ",
		"description":"",
		"keywords":"",
		"h1":" Developed projects ",
		"h2":"",
		"h3":"",
		"mainText":" Developed projects Discover our project inventory: libraries, algorithms and others. ",
		"url":"https://www.flyneves.com/en-US/projects/"
	},
	"3":{
		"documentContentType":"other",
		"title":" Results — FlyNeves ",
		"description":"",
		"keywords":"",
		"h1":"",
		"h2":"",
		"h3":"",
		"mainText":"",
		"url":"https://www.flyneves.com/pt-BR/searching-the-site/"
	},
	"4":{
		"documentContentType":"other",
		"title":" Versions – controlAnimationJS | FlyNeves ",
		"description":"On this page, you will find links to all versions of the controlAnimationJS library.",
		"keywords":"",
		"h1":" Versions ",
		"h2":"",
		"h3":"",
		"mainText":" Versions On this page, you will find links to all versions of the controlAnimationJS library. controlAnimation – 1.0 ",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/"
	},
	"5":{
		"documentContentType":"other",
		"title":" Versions – textFieldRangeJS | FlyNeves ",
		"description":"On this page, you will find links to all versions of the textFieldRangeJS library.",
		"keywords":"",
		"h1":" Versions ",
		"h2":"",
		"h3":"",
		"mainText":" Versions On this page, you will find links to all versions of the textFieldRangeJS library. textFieldRangeJS – 1.0 ",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/"
	},
	"6":{
		"documentContentType":"article",
		"title":" Introduction – controlAnimationJS | FlyNeves ",
		"description":"Developed for creative developers who do not give up high performance, offering total control over their animations.",
		"keywords":"",
		"h1":" Introduction ",
		"h2":" “Original copy” controlAnimationJS vs CSS Animations closure Read more ",
		"h3":" Comparing coding ",
		"mainText":" Introduction Developed for creative developers who do not give up high performance, offering total control over their animations. “Original copy” Inspired by the CSS model for creating animations with @keyframes, the line of learning to use this library shortens considerably. Even if you don't read the documentation, you will hardly be lost when using it, with similar features, properties and methods and with the same structure as @keyframes, the coding will always be elegant and familiar. The main positive point of this library is the countless possibilities for creating animations, simplicity, elegance, and its ability to work with different and old browsers, offering excellent quality among them. controlAnimationJS vs CSS Animations CSS Animations added incredible features, however, it does not offer complete control, reaction to user actions, obtaining data about the current state of the animation and if you want to support an old browser, it will not be available. The controlAnimationJS library meets these needs, bringing similar functionality and adding new ones, the coding is simpler and more complete, because with less code you will do the same, but will support all browsers. Comparing coding The examples below are for comparison, in them we would be creating the same animation with controlAnimationJS and CSS Animations, visually you will see the difference in the necessary coding. controlAnimationJS code var myAnimation = {}; myAnimation.element = myElements; myAnimation[ 0 ] = 'transform: rotate( 0deg )'; myAnimation[ 100 ] = 'rotate( 360deg )'; myAnimation.iterations = Infinity; myAnimation.duration = 2; controlAnimation.play( myAnimation ); CSS Animations code @keyframes myAnimation { 0% { transform: rotate( 0deg ) } 100% { transform: rotate( 360deg ) } } @-webkit-keyframes myAnimation { 0% { transform: rotate( 0deg ) } 100% { transform: rotate( 360deg ) } } @-moz-keyframes myAnimation { 0% { transform: rotate( 0deg ) } 100% { transform: rotate( 360deg ) } } .myAnimation-element { -webkit-animation: myAnimation 2s infinite; -moz-animation: myAnimation 2s infinite; animation: myAnimation 2s infinite; } closure Extremely light, powerful, with many features and functionality, controlAnimationJS is the library that many developers were looking for. Read more Read the library's documentation, it's simple and easy to learn. ",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/"
	},
	"7":{
		"documentContentType":"other",
		"title":" Introduction – textFieldRangeJS | FlyNeves ",
		"description":"Unifies the properties and methods of text range objects: ( Selection and createTextRange() ), implementing fantastic features and making it extremely simple to use.",
		"keywords":"",
		"h1":" Introduction ",
		"h2":" A brief look Read more ",
		"h3":" Moving the caret Get the caret position ",
		"mainText":" Introduction Unifies the properties and methods of text range objects: ( Selection and createTextRange() ), implementing fantastic features and making it extremely simple to use. A brief look Two of its incredible features are briefly described below: Moving the caret Move the caret in the text field the same way as when the user presses the arrow keys. This task is extremely simple, obtaining the element's textFieldRange object, and using the method moveCaret() , with a command line it would be solved, see the code below. textFieldRange( element ).moveCaret( keyCode ); Perhaps you were a little confused by the code, as there was no explanation, don't worry, it's just a tasting, read more about the object returned from textFieldRange and the moveCaret method in the library documentation. Get the caret position When obtaining the element's textFieldRange object, you will see some properties about the current caret position in the text field. In the code below we would be using the top property . var caretPosition = textFieldRange( element ).top; Read more Read the library documentation , it is simple and easy to learn.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/"
	},
	"8":{
		"documentContentType":"other",
		"title":" Browsers support table – controlAnimationJS | FlyNeves ",
		"description":"Discover the compatibility of the controlAnimationJS library between the main browsers.",
		"keywords":"",
		"h1":" Browsers support table ",
		"h2":"",
		"h3":" Attention ",
		"mainText":" Browsers support table Discover the compatibility of the controlAnimationJS library between the main browsers. Mozilla Firefox 3.6 * Opera 11.0 * Google Chrome 26.0 * Microsoft Edge * Internet Explorer 5.0 * Safari 5.1 * Attention Google Chrome: It is possible that the library also supports older versions of this browser. ",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/browser-support-table/"
	},
	"9":{
		"documentContentType":"article",
		"title":" Documentation – controlAnimationJS | FlyNeves ",
		"description":"Below are links to all pages related to the controlAnimationJS library documentation.",
		"keywords":"",
		"h1":" Documentation ",
		"h2":"",
		"h3":"",
		"mainText":" Documentation Below are links to all pages related to the controlAnimationJS library documentation. All on one page Infrastructure Rules of use Construindo keyframes addListener() addListenerAll() back() backAll() cancel() cancelAll() clone() config() create() get() getAll() go() goAll() pause() pauseAll() play() removeListener() removeListenerAll() restart() restartAll() resume() resumeAll() animationId call className delay direction duration easing element listenerFired fill insertStyle iterations iterationsComplete keepFrameStyle maxProgress name progress state styleBetweenFrames timeline $scroll-left $scroll-to $scroll-top Getting started ",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/"
	},
	"10":{
		"documentContentType":"other",
		"title":" Single page documentation – controlAnimationJS | FlyNeves ",
		"description":"This page contains all the documentation controlAnimationJS library.",
		"keywords":"",
		"h1":" Single page documentation Introduction Infrastructure Usage rules create() method clone() method config() method play() method resume() method resume() method restart() method restartAll() method cancel() method cancelAll() Method get() method getAll () Method back() method backAll() method go() method goAll() method addListener() Method addListenerAll() Method removeListener() method removeListenerAll() method Building keyframes animationId Property call property className property delay property direction property duration property easing property element property listenerFired property fill property insertStyle property iterations property iterationsComplete property keepFrameStyle property maxProgress property name property pause() method pauseAll() method play() method progress property state property styleBetweenFrames property timeline property Getting started Browsers support table ",
		"h2":" “Original copy” controlAnimationJS vs CSS Animations closure Read more Inspiration Structure Operation Closure Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Direções Syntax Browser Support ",
		"h3":" Comparing coding Factory Method Facade Return value Arguments Return value Return value Arguments Return value Return value Return value Return value Return value Return value Return value Arguments Return value Return value Arguments Return value Arguments Return value Arguments Arguments Arguments Return value Arguments Return value Arguments Return value Arguments Return value Accepted values Return value Return value Arguments Return value true false Object properties Attention ",
		"mainText":" Single page documentation This page contains all the documentation controlAnimationJS library. Introduction Developed for creative developers who do not give up high performance, offering total control over their animations. “Original copy” Inspired by the CSS model for creating animations with @keyframes, the line of learning to use this library shortens considerably. Even if you don't read the documentation, you will hardly be lost when using it, with similar features, properties and methods and with the same structure as @keyframes, the coding will always be elegant and familiar. The main positive point of this library is the countless possibilities for creating animations, simplicity, elegance, and its ability to work with different and old browsers, offering excellent quality among them. controlAnimationJS vs CSS Animations CSS Animations added incredible features, however, it does not offer complete control, reaction to user actions, obtaining data about the current state of the animation and if you want to support an old browser, it will not be available. The controlAnimationJS library meets these needs, bringing similar functionality and adding new ones, the coding is simpler and more complete, because with less code you will do the same, but will support all browsers. Comparing coding The examples below are for comparison, in them we would be creating the same animation with controlAnimationJS and CSS Animations, visually you will see the difference in the necessary coding. controlAnimationJS code var myAnimation = {}; myAnimation.element = myElements; myAnimation[ 0 ] = 'transform: rotate( 0deg )'; myAnimation[ 100 ] = 'rotate( 360deg )'; myAnimation.iterations = Infinity; myAnimation.duration = 2; controlAnimation.play( myAnimation ); CSS Animations code @keyframes myAnimation { 0% { transform: rotate( 0deg ) } 100% { transform: rotate( 360deg ) } } @-webkit-keyframes myAnimation { 0% { transform: rotate( 0deg ) } 100% { transform: rotate( 360deg ) } } @-moz-keyframes myAnimation { 0% { transform: rotate( 0deg ) } 100% { transform: rotate( 360deg ) } } .myAnimation-element { -webkit-animation: myAnimation 2s infinite; -moz-animation: myAnimation 2s infinite; animation: myAnimation 2s infinite; } closure Extremely light, powerful, with many features and functionality, controlAnimationJS is the library that many developers were looking for. Read more Read the library's documentation, it's simple and easy to learn. Infrastructure Understand a little about what happens internally in controlAnimation. Inspiration Currently there are several JavaScript libraries, (incredible and powerful), intended for the construction of animations. However, I believe that at some point you also asked yourself the following questions: “Is it worth using such a heavy library in my application?” Or “Am I becoming a lazy, non-creative developer using ready-made animation logic?”. With the arrival of CSS3 Animations , these and other problems have become obsolete, but don't give the developer some features and functionality that only JavaScript can offer. And when considering compatibility with older browsers, as it is recent, CSS3 Animations will not be available for some of them. controlAnimationJS delivers similar features and functionality to the developer and adds new ones, being high performance and incredibly light: 13.8KB. Structure When starting and during the source code development process, the modeling was based on the Design Pattern: Factory Method e Facade . We will not go into details about these standards, but we will talk about their application in our source code. Factory Method The list below identifies the elements in our library according to the Factory Method structure. 'The structure as described in the book Design Patterns: Elements of Reusable Object-Oriented Software . ' Creator: The controlAnimation.create() method, its action is: Create a new animation object with properties and methods that the developer will need, but its use is optional. ConcreteCreator:The controlAnimation.play(myAnimationObject) method receives the animation object created by the developer, and from it creates a variation that will be used internally by the library as an object of control and reaction. Product:Is the object that the developer will use to build his animation. ConcreteProduct: A variation on the developer animation object used internally by the library, it will not only have the properties of the developer object, but also properties that were considered unnecessary for the developer. In our code, the Design Pattern Factory Method encouraged low coupling, greater flexibility and eliminated the need to couple specific classes for application at the code level. However, its implementation may not have been exactly as the theory suggests, but I believe that the result was pleasant. Facade Although it did not go deeply into its theory, the motivation for its use was to structure a system in subsystems to help reduce its complexity. We will not identify the elements as we did with the previous Design Pattern, but it is very clear that the Facade class (Grouper) is the controlAnimation object, as it knows which classes of the subsystems are responsible for the call and delegates customer calls to the correct subsystem objects. The implementation of the design standards mentioned above, guided the source code of our library, enabling low coupling, in which each function, object or class has its responsibilities and that do not exceed its limits. This makes the code more readable, allowing the developer to understand it and, if necessary, make changes that will contribute to its use. Operation We will understand what happens internally from the initialization process to the end of the animation. See the flow chart below: controlAnimationJS Flowchart When you look at the flowchart carefully, you will notice that there is a red arrow pointing to a rectangle with the following message: “The object is ignored”, prevent this from happening, as the animation will not continue in the flow and will not be executed. The following situation can cause this message: When the animation object is invalid or is already in use. Also note that there is a rectangle with the message: “Animation data is loaded”. Pay attention to this, as it is incredible, the execution performance of each animation is exponentially optimized, considering that each animation when leaving the queue will pass quickly through its execution. This makes it possible to have several animations running simultaneously without requiring too much of the application. Also interesting is the condition message contained in one of the rhombus shapes: “Has the object been updated?”, This indicates that when the animation leaves the queue to be executed, a quick check is made to identify whether the developer's animation object has undergone some change. Thus, the developer does not need to invoke any update method when he changes something in his animation object. Also note that when there is a change, the animation is updated and played. Closure Initially, controlAnimationJS was being developed to be an animation engine, that is, it would do the internal part and not the visual part. Each code snippet was designed, revised and optimized to make the best possible use of resources without requiring too much of the application. Near the end of its construction, it was noticed how small the code snippet to make the visual part work, currently we have a light and robust library capable of performing simple and complex animations, without leaving aside the incredible animation engine, which makes the limits of this library your creativity. Usage rules Know and understand the rules for using the controlAnimationJS library. The list below describes some precautions to take when using controlAnimation. – When creating an animation using the style in the keyframes, you should always set the initial values of all the properties you will use in the 0 key. – When creating an animation using style in the keyframes, be aware that there is no conversion of the property values, that is, the initial unit of measure is always maintained. – When creating an animation using style in the keyframes, with the intention of using CSS properties that receive values related to colors, it is only allowed to use colors in RGB, RGBA and HEXADECIMAL. – When creating an animation using the style in the keyframes, remember that the library does not transition from non-numeric to numeric values, that is, if a given CSS property in key 0 has the value: center, and the next key: 200px. Nothing will happen, because the library does not make this transition. – When creating an animation using style in the keyframes, and if you want a property to accept floating values, it is necessary to insert a in the 0 key.See the example below: myAnimationObject[ 0 ] = ' top: 0.px'; Obviously if the property is already going to receive a floating value in the 0 key, there is no need to insert the . . create() method Creates an animation object. Detail This method belongs to the controlAnimation object. Description This method does not expect any arguments. Return value The returned value is a new animation object, with the default properties already included in it. Syntax var myAnimationObject = controlAnimation.create(); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. clone() method Clones the animation object. Detail This method belongs to the animation object. Description This method expect arguments. Arguments amount Expected type: number || object. This argument is optional. Specifies the number of clones. You can also pass an array with HTML elements. An object will be created for each element of the array and the element property will be defined with the element. The default value is: 1. Return value The returned value is an array with clones of the animation object. Syntax var myClones = myAnimationObject.clone( amount ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. config() method Sets the default values for the properties of animation objects. Detail This method belongs to the controlAnimation object. Description This method does not expect any arguments. Return value The returned value is an object. If there is a change in any of its properties, when starting the new animation object it will already have the new default values. Syntax var animationObjectsConfig = controlAnimation.config(); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. play() method Play the new animation. Detail This method belongs to the controlAnimation object. Description This method expect arguments. Arguments object This argument is mandatory. Específica o objeto da animação. Expected type: object. The object to be passed can also be an array containing animation objects. all This argument is optional. When passing multiple animation objects with identical styles, pass true to improve performance. Expected type: boolean. Return value No value is returned. Syntax controlAnimation.play( object ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. resume() method Resume animation. Detail This method belongs to the animation object. Description This method does not expect any arguments. Return value No value is returned. Syntax myAnimationObject.resume(); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. resume() method Resume animation. Detail This method belongs to the animation object. Description This method does not expect any arguments. Return value No value is returned. Syntax myAnimationObject.resume(); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. restart() method Restarts the animation. Detail This method belongs to the animation object. Description This method does not expect any arguments. Return value No value is returned. Syntax myAnimationObject.restart(); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. restartAll() method Restart all animations. Detail This method belongs to the controlAnimation object. Description This method does not expect any arguments. Return value No value is returned. Syntax controlAnimation.restartAll(); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. cancel() method Cancels the execution of the animation. Detail This method belongs to the animation object. Description This method does not expect any arguments. Unlike the pause method , this method erases animation data that is unnecessary after it is canceled. Return value No value is returned. Syntax myAnimationObject.cancel(); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. cancelAll() Method Cancels the execution of all animations. Detail This method belongs to the controlAnimation object. Description This method does not expect any arguments. Unlike the pauseAll method , this method erases unnecessary animation data after it is canceled. Return value No value is returned. Syntax controlAnimation.cancelAll(); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. get() method Gets an animation object. Detail This method belongs to the controlAnimation object. Description This method expect arguments. Arguments name This argument is mandatory. Specifies the object's animation identifier. Expected type: string || number. The animation identifier is the value of the name property . Return value The returned value is the object on success or false on failure. Syntax controlAnimation.get( name ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. getAll () Method Gets all animation objects. Detail This method belongs to the controlAnimation object. Description This method does not expect any arguments. Return value The returned value is the objects in an array on success or false on failure. Syntax controlAnimation.getAll(); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. back() method Makes the progress of the animation interaction return to a certain position and, after the return is complete, continue the interaction. Detail This method belongs to the animation object. Description This method expect arguments. Arguments goTo This argument is mandatory. Specifies the position to which the animation should return. Expected type: number. Return value No value is returned. Syntax myAnimationObject.back( goTo ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. backAll() method Makes the interaction progress of all animations return to a certain position and, after the return is complete, continue the interaction. Detail This method belongs to the controlAnimation object. Description This method expect arguments. Arguments goTo This argument is mandatory. Specifies the position to which the animations should return. Expected type: number. Return value No value is returned. Syntax controlAnimation.backAll( goTo ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. go() method Causes the animation interaction to return to a certain position and, after the return is complete, it ends. Detail This method belongs to the animation object. Description This method expect arguments. Arguments goTo This argument is mandatory. Specifies the position to which the animation should return. Expected type: number. Syntax myAnimationObject.go( goTo ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. goAll() method Causes the interaction of all animations to return to a certain position and, after the return is complete, ends each one. Detail This method belongs to the controlAnimation object. Description This method expect arguments. Arguments goTo This argument is mandatory. Specifies the position to which the animation should return. Expected type: number. Syntax controlAnimation.goAll( goTo ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. addListener() Method Adds listeners to the animation. Detail This method belongs to the animation object. Description This method expect arguments. Arguments listener This argument is mandatory. Specifies the listener to be attached to the animation object. Expected type: string. Below is a list of accepted values for this argument: start: Fires when the animation starts. end: Fires when the animation is finished. iterations: Fires when the animation interaction is complete. changekeys: Fires when the animation progress exceeds the value of a frame key. callback Expected type: function. This argument is mandatory. Specifies the function to be called. Return value No value is returned. Syntax myAnimationObject.addListener( listener, callback ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. addListenerAll() Method Add listeners to all animations. Detail This method belongs to the controlAnimation object. Description This method expect arguments. Arguments listener This argument is mandatory. Specifies the listener to be attached to the animation objects. Expected type: string. Below is a list of accepted values for this argument: start: Fires when the animation starts. end: Fires when the animation is finished. iterations: Fires when the animation interaction is complete. changekeys: Fires when the animation progress exceeds the value of a frame key. callback Expected type: function. This argument is mandatory. Specifies the function to be called. Return value No value is returned. Syntax controlAnimation.addListenerAll( listener, callback ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. removeListener() method Removes listeners from the animation. Detail This method belongs to the animation object. Description This method expect arguments. Arguments listener Below is a list of accepted values for this argument: start: Fires when the animation starts. end: Fires when the animation is finished. iterations: Fires when the animation interaction is complete. changekeys: Fires when the animation progress exceeds the value of a frame key. This argument is mandatory. Specifies the event to be removed from the animation object. Expected type: string. callback This argument is mandatory. Specifies the function to be called. Expected type: function. Return value No value is returned. Syntax myAnimationObject.removeListener( listener, callback ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. removeListenerAll() method Removes listeners from all animation. Detail This method belongs to the controlAnimation object. Description This method expect arguments. Arguments listener Below is a list of accepted values for this argument: start: Fires when the animation starts. end: Fires when the animation is finished. iterations: Fires when the animation interaction is complete. changekeys: Fires when the animation progress exceeds the value of a frame key. This argument is mandatory. Specifies the listener to be removed from animation objects. Expected type: string. callback Expected type: function. This argument is mandatory. Specifies the function to be called. Return value No value is returned. Syntax controlAnimation.removeListenerAll( listener, callback ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. Building keyframes Understand the operation and use rules for the construction of animation keyframes. Detail Keyframes properties are read and write. Keyframes properties belong to the animation object, not the controlAnimation object. Expected type: object || boolean || string . Description Key frames are the most important moments of an animation. As the name says, they are the “key” of all the frames of an animation, they are responsible for creating the correct time and rhythm of the movement, for example: they present differences in a character's actions, a crucial change in movement or even a great pose. Accepted values Understand the accepted values for each keyframe and how to use them. styleObject Define an object with CSS properties, with JavaScript nomenclature and the CSS style will be applied to the elements during the animation. See the example below: myAnimationObject[ 0 ] = { borderWidth: '0px', top: '0px', left: '0px', } In the keys following the 0 key, you can minimize the property names and their values. myAnimationObject[ 0 ] = { borderWidth: '0px', top: '0px', left: '0px' } myAnimationObject[ 100 ] = { 0: '10', /* borderWidth: 10px */ 1: '10' /* top: 10px */, 2: '10' /* left: 10px */ } boolean No action is defined, but the animation is performed and the properties of the animation object receive updates. string Define a character string and it will be understood as a CSS style and applied to the elements during the animation. You can also minify the names of the properties, see the example below: /* When the sequence of properties is not changed. */ myAnimationObject[ 0 ] = ' border-width: 0px; top: 0px; left: 0px '; myAnimationObject[ 100 ] = '10; 200; 200;' /* The same as: 'border-width: 10px; top: 200px; left: 200px'*/; /* ___________________________________________________*/ /* When the sequence of properties is changed.*/ myAnimationObject[ 0 ] = ' border-width: 0px; top: 0px; left: 0px '; myAnimationObject[ 100 ] = '1: 10; 2: 200; 0: 200;' /* The same as: 'top: 10px; left: 200px; border-width: 200px'*/; /* ___________________________________________________*/ The way you start the values of a property, you must follow them in all keyframes, example: border-width: 1px 2px 3px 4px , the sequence of values related to border, must maintained as they were initiated. Syntax myAnimationObject[ 0 ] = ' top: 0px; left: 50px;...'; animationId Property The unique identifier for each animation object. Detail This is a read-only property, that is, its value must not be changed. This property belongs to the animation object, not the controlAnimation object. Description This property is very important, as it is used by the library to identify each of the animation objects. Syntax var animationId = myAnimationObject.animationId; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. call property Defines a function to be called at each interleaving. Detail This property is read and write. This property belongs to the animation object, not the controlAnimation object. Expected type: function. Description As the defined function will be called at each animation interleaving, avoid defining functions that require a lot of the browser. Syntax myAnimationObject.call = myFunction; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. className property Defines the name of the CSS class, to be linked to the animation object. Detail This property is read and write. This property belongs to the animation object, not the controlAnimation object. Expected type: string. Description When inserting the style in keyframes and setting the insertStyle property to auto or tag , you will need of a name for the class that will be added to the elements, however, the library itself already defines an initial value for this property that can be maintained. Syntax myAnimationObject.className = myFunction; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. delay property Sets the delay between each animation interaction. Detail This property is read and write. This property belongs to the animation object, not the controlAnimation object. Expected type: number || boolean || undefined. Description Accepted values for this property: number: Sets the delay in seconds. false: There is no delay. undefined: Não há atraso. The default value is: false. Syntax myAnimationObject.delay = 5; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. direction property Defines the reading order of the keyframes, in an animation cycle. Detail This property is read and write. This property belongs to the animation object, not the controlAnimation object. Expected type: string. Description Accepted values for this property: normal: The reading of the keyframes happens in an increasing way: initial key to final key. reverse: The reading of keyframes happens in a decreasing way: final key for the initial key. alternate: The reading of the keyframes happens alternately between normal and reverse , in each cycle a different way of reading is used, starting from: normal. alternate-reverse: The reading of the keyframes happens alternately between normal and reverse , in each cycle a different way of reading is used, starting from: reverse. random-keys: At each cycle, a key from the keyframes is chosen at random as the maximum value that the animation should progress, and the animation will always start from the 0 key. random-offset:In each cycle, an offset value between the keys of the keyframes is chosen randomly as the maximum value that the animation should progress, and the animation will always start at the 0 key. fluid-random-keys: In each cycle, a key from the keyframes is chosen randomly as the maximum value that the animation must progress, and the animation will always start from the progression value reached by the previous cycle. fluid-random-offset: In each cycle, an offset value between the keys of the keyframes is chosen randomly as the maximum value that the animation must progress, and the animation will always start from the progression value reached by the previous cycle. The default value is: normal. Syntax myAnimationObject.direction = 'random-keys'; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. duration property Sets the duration of the animation. Detail This property is read and write. This property belongs to the animation object, not the controlAnimation object. Expected type: number. Description The value to be set indicates the duration of the animation in seconds. The default value is: 3. Syntax myAnimationObject.duration = 5000; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. easing property Defines how the animation will progress during its execution. Detail This property is read and write. This property belongs to the animation object, not the controlAnimation object. Expected type: function. Description The function to be defined for this property, must be one of the easing functions . There are several websites and projects that present and distribute these mathematical functions. The default value is: function linearTween( t, b, c, d ) { return c * t / d + b; }; Syntax myAnimationObject.easing = function easeInOutQuad( t, b, c, d ) { t /= d / 2; if ( t < 1 ) return c / 2 * t * t + b; t--; return -c / 2 * ( t * ( t -2 ) - 1 ) + b; }; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. element property Defines the elements that will undergo the style changes. Detail This property is read and write. This property belongs to the animation object, not the controlAnimation object. Expected type: object. Description The object to be passed can also be an array containing HTML elements. Syntax myAnimationObject.element = document.getElementsByTagName( 'div' ); Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. listenerFired property The listener name which was triggered. Detail This is a read-only property, that is, its value must not be changed. This property belongs to the animation object, not the controlAnimation object. Description This property can be used to identify the newly triggered listener. The default value is: false,indicating that no listener has been triggered. Syntax var listenerFired = myAnimationObject.listenerFired; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. fill property Defines which values are applied by the animation, when the end of its cycles arrives. Detail This property is read and write. This property belongs to the animation object, not the controlAnimation object. Expected type: boolean || number. Description Accepted values for this property: true: The last values are kept. false: No value is maintained. number: The animation runs again until it reaches the set value. The default value is: false. Syntax myAnimationObject.fill = true; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. insertStyle property Defines the mode for inserting the style included in the keyframes. Detail This property is read and write. Expected type: string. This property belongs to the animation object, not the controlAnimation object. Description Accepted values for this property: inline: The style is added to the elements by the HTML style attribute. tag: The style is added to the elements by the HTML style tag, through the CSS class, using the value of the property className as the name of the class. auto: The style via tag is added only when there are more than 1 element. The default value is: auto. Syntax myAnimationObject.insertStyle = 'tag'; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. iterations property Sets the number of times the animation should be executed. Detail This property is read and write. This property belongs to the animation object, not the controlAnimation object. Expected type: number. Description For the animation to run infinitely define: Infinity . The default value is: 1. Syntax myAnimationObject.iterations = 5; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. iterationsComplete property The number of interactions completed by the animation. Detail This is a read-only property, that is, its value must not be changed. This property belongs to the animation object, not the controlAnimation object. Description The default value is: 0. Syntax var iterationsComplete = myAnimationObject.iterationsComplete; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. keepFrameStyle property Defines whether to maintain the style of each keyframe. Detail This property is read and write. This property belongs to the animation object, not the controlAnimation object. Expected type: boolean. Description Accepted values for this property: true O valor de estilo contido em cada keyframe é mantido. false Imagine that in the construction of your animation the following keyframes were passed: in order to insert the style contained in each one. myAnimationObject[ 0 ] = ' top: 0px; left:0'; myAnimationObject[ 33 ] = ' 0; 200'; myAnimationObject[ 66 ] = ' 0;'; myAnimationObject[ 100 ] = ' 200; 200'; Note that in the 33 keyframe, the left CSS style property will reach 200, but in the next keyframe there is no reference to it. In the current case, in the next keyframe, the property on the left would be added with the same value as the initial key. The default value is: false. Syntax myAnimationObject.keepFrameStyle = true; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. maxProgress property Sets the maximum progress that the interaction of animation can achieve. Detail This property is read and write. This property belongs to the animation object, not the controlAnimation object. Expected type: number || object. Description You can also define the property value as an array: myAnimationObject.maxProgress = [ 40, 70 , 90]; In the example above in the first interaction the progress of the animation would go up to 40 , and the second up to 70 and so on. When the value of the interaction sequence is greater than the number of values in the matrix, you can start over: myAnimationObject.maxProgress = [ 40, 70 , 'restart']; Setting the string: 'restart' as the last value of the array will cause the count of the array values to begin again. If there is no value in the matrix at the position indicated by the number of completed interactions, maxProgress will return to its normal behavior according to the direction property . Syntax myAnimationObject.maxProgress = 100; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. name property Sets the identifier for the animation object. Detail This property is read and write. This property belongs to the animation object, not the controlAnimation object. Expected type: string || number. Description If you do not define the value of this property, it will be defined with the value of the animationId property . Syntax myAnimationObject.name = 'myAnimation'; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. pause() method Pauses the animation that is playing. Detail This method belongs to the animation object. Description This method does not expect any arguments. Return value No value is returned. Syntax myAnimationObject.pause(); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. pauseAll() method Pause all animations running. Detail This method belongs to the controlAnimation object. Description This method does not expect any arguments. Return value No value is returned. Syntax controlAnimation.pauseAll(); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. play() method Play the new animation. Detail This method belongs to the controlAnimation object. Description This method expect arguments. Arguments object This argument is mandatory. Específica o objeto da animação. Expected type: object. The object to be passed can also be an array containing animation objects. all This argument is optional. When passing multiple animation objects with identical styles, pass true to improve performance. Expected type: boolean. Return value No value is returned. Syntax controlAnimation.play( object ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. progress property The current progress of the animation. Detail This property is read and write. This property belongs to the animation object, not the controlAnimation object. Expected type: number. Description At the beginning of the animation if you define a value for this property, it will be respected, that is, the animation will start from the defined value. Syntax myAnimationObject.progress = 100; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. state property The current state the animation is in. Detail This is a read-only property, that is, its value must not be changed. This property belongs to the animation object, not the controlAnimation object. Description Accepted values for this property: running: The animation is running. paused: The animation is paused. completed: All animation cycles have been completed. canceled: The animation has been canceled. Syntax var state = myAnimationObject.state; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. styleBetweenFrames property Defines whether the style properties of a keyframe should be added since the previous keyframes. Detail This property is read and write. This property belongs to the animation object, not the controlAnimation object. Expected type: boolean. Description Accepted values for this property: true The property value is inserted since the previous keyframes, even if they do not have it. false The value of the property is only changed in keyframes that contain it. The default value is: true. Syntax myAnimationObject.styleBetweenFrames = false; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. timeline property The animation schedule. Detail This is a read-only property, that is, its value must not be changed. This property belongs to the animation object, not the controlAnimation object. Description The contained value is an object. Object properties The properties below contain a list of keys that tells how the animation's attenuation will occur. If you pass style to the keys of the keyframes, the keys of the list will have as value the style that will be applied when the tempo of the animation is the same as the key. normal The animation schedule for when the reading of the keyframes happens in an increasing way: initial key for the final key. reverse The animation schedule for when the reading of the keyframes happens in a decreasing way: final key for the initial key. Direções The animation schedule is defined according to its direction: normal: The chosen schedule is: normal. reverse: The chosen schedule is: reverse. alternate: Switch between schedules alternate-reverse: Switch between schedules random-keys: The chosen schedule will always be: strong random-offset: The chosen schedule will always be: normal fluid-random-keys: The chosen schedule will always be: normal fluid-random-offset: The chosen schedule will always be: normal Syntax var animationTimeline = myAnimationObject.timeline; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. Getting started controlAnimationJS Getting started. Browsers support table Discover the compatibility of the controlAnimationJS library between the main browsers. Mozilla Firefox 3.6 * Opera 11.0 * Google Chrome 26.0 * Microsoft Edge * Internet Explorer 5.0 * Safari 5.1 * Attention Google Chrome: It is possible that the library also supports older versions of this browser. ",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/single-page-documentation/"
	},
	"11":{
		"documentContentType":"other",
		"title":" Browser support table – textFieldRangeJS | FlyNeves ",
		"description":"Discover the compatibility of the textFieldRangeRS library among the main browsers.",
		"keywords":"",
		"h1":" Browser support table ",
		"h2":"",
		"h3":" Attention ",
		"mainText":" Browser support table Discover the compatibility of the textFieldRangeRS library among the main browsers. Mozilla Firefox 20.0.1 * Opera 25.0 * Google Chrome 26.0 * Microsoft Edge * Internet Explorer 7.0 * Safari 5.1 * Attention Google Chrome: It is possible that the library also supports older versions of this browser. ",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/browser-support-table/"
	},
	"12":{
		"documentContentType":"article",
		"title":" Documentation – textFieldRangeJS | FlyNeves ",
		"description":"On this page, you will find links to all pages related to the textFieldRangeJS library documentation.",
		"keywords":"",
		"h1":" Documentation ",
		"h2":" List of links: ",
		"h3":"",
		"mainText":" Documentation On this page, you will find links to all pages related to the textFieldRangeJS library documentation. List of links: All on one page Infrastructure Rules of use appendString() breakLines() findString() insert() moveCaret() refresh() replaceSelection() select() setCaret() size() afterSelection beforeSelection borderWidth charHeight charList charWidth currentLine currentLineEnd currentLineStart currentLineText left lineHeight numberOfLines offsetLeft offsetTop padding selection selectionEnd selectionStart textFieldHeight textFieldWidth textFieldWidth top viewLeft viewTop x y Getting started ",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/"
	},
	"13":{
		"documentContentType":"other",
		"title":" Single page documentation – textFieldRangeJS | FlyNeves ",
		"description":"This page contains all the documentation textFieldRangeJS library.",
		"keywords":"",
		"h1":" Single page documentation Introduction Infrastructure Rules of use insert() method appendString() method replaceSelection() method findString() method size() method setCaret() method select() method lines() method breakLines() method moveCaret() method refresh() method selection property beforeSelection property afterSelection property selectionEnd property selectionStart property currentLine property currentLineEnd property numberOfLines property top property left property x property y property offsetTop property offsetLeft property viewTop property viewLeft property charHeight property charsWidth property charList property charBreak property lineHeight property textFieldHeight property textFieldWidth property borderWidth property padding property Getting started Browser support table ",
		"h2":" A brief look Read more Inspiration Structure Operation Closure Support for HTML elements Defining lines in the text field Character \r Performance Description Syntax Browser Support Description Syntax Browser Support Description Syntax Browser Support Description Syntax Browser Support Description Syntax Browser Support Description Syntax Browser Support Description Syntax Browser Support Description Syntax Browser Support Description Syntax Browser Support Description Syntax Browser Support Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Syntax Browser Support Detail Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support Detail Description Syntax Browser Support ",
		"h3":" Moving the caret Get the caret position Facade Arguments Return value Arguments Return value Arguments Return value Arguments Return value Object properties: Arguments Return value Object properties: Arguments Return value Arguments Return value Return value Arguments Return value Arguments Return value Return value Object properties: Object properties: Object properties: Object properties: Attention ",
		"mainText":" Single page documentation This page contains all the documentation textFieldRangeJS library. Introduction Unifies the properties and methods of text range objects: ( Selection and createTextRange() ), implementing fantastic features and making it extremely simple to use. A brief look Two of its incredible features are briefly described below: Moving the caret Move the caret in the text field the same way as when the user presses the arrow keys. This task is extremely simple, obtaining the element's textFieldRange object, and using the method moveCaret() , with a command line it would be solved, see the code below. textFieldRange( element ).moveCaret( keyCode ); Perhaps you were a little confused by the code, as there was no explanation, don't worry, it's just a tasting, read more about the object returned from textFieldRange and the moveCaret method in the library documentation. Get the caret position When obtaining the element's textFieldRange object, you will see some properties about the current caret position in the text field. In the code below we would be using the top property . var caretPosition = textFieldRange( element ).top; Read more Read the library documentation , it is simple and easy to learn. Infrastructure Understand a little about what happens internally in textFieldRangeJS. Inspiration The inspiration for the development of this library came during the process of developing another project, in which we will not go into details. It was necessary to control the user's actions in the text field, in addition to facilitating its usability. Structure When starting and during the process of developing the source code, the modeling was based on the Design Pattern: Facade . We will not go into details about these standards, but we will talk about their application in our source code. Facade The motivation for its use was to structure a system in subsystems to help reduce its complexity. We will not be identifying the elements, but it is very clear that the Facade class is the textFieldRange function, as it knows which subsystem classes are responsible for the call and correctly delegates the customer calls to the subsystem objects. The implementation of the design pattern mentioned above, guided the source code of our library, enabling low coupling, in which each function, object or class has its responsibilities and that do not exceed its limits. This makes the code more readable, allowing the developer to understand it and, if necessary, make changes that will contribute to its use. Operation The textFieldRangeJS library was developed to obtain data from text fields and perform actions on them, from obtaining the cursor position to simulating the user's movements when pressing a key. When calling the textFieldRange function, passing the text input element as an argument, an object will be returned containing several methods and properties for obtaining data, manipulation and actions in the text field. To avoid the need to always call the main method: textFieldRange (element) , just add the object to a variable, this way you can use it whenever necessary throughout the code: var myElement = document.getElementById( 'textarea' ); var myElementRange = textFieldRange( element ); Closure textFieldRangeJS is simple and straightforward to solve the problems encountered when dealing with HTML text input elements, with precision, good performance and useful features. Rules of use Know and understand the rules for using the textFieldRangeJS library. Support for HTML elements The features of the textFieldRangeJS library are only available for the elements: &lt;input&gt; and &lt;textarea&gt; . Defining lines in the text field The lines in the text field are defined by line breaks ('\n' or '\r\\n') and by the number of times there should be an overflow and not hear, giving rise to a new line. Character \r The library's methods related to position and selection, ignore the \r character, so the operation of the library will have the same behavior in all browsers. Performance For best library performance, it is not recommended to exceed more than 5000 characters or 200 lines in your text field. insert() method Insert a string at the position of the caret in the text field. Description This method expect arguments. Arguments string This argument is mandatory. Specifies the string to be used by the method. select This argument is optional. Specifies whether to select the new string. Return value The returned value is the updated textFieldRange object. Syntax textFieldRange( element ).insert( 'myString' ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. appendString() method Inserts a string at a given position in the text field. Description This method expect arguments. Arguments position This argument is mandatory. Specifies the position where the string is to be inserted. string This argument is mandatory. Specifies the string to be used by the method. select This argument is optional. Specifies whether to select the new string. Return value The returned value is the updated textFieldRange object. Syntax textFieldRange( element ).appendString( 0, 'string' ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. replaceSelection() method Replaces the string selected in the text field. Description This method expect arguments. Arguments string This argument is mandatory. Specifies the character string to be used by the method. select This argument is optional. Specifies whether the new string is to be selected. Return value The returned value is the updated textFieldRange object. Syntax textFieldRange( element ).replaceSelection( 'string' ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. findString() method Find occurrences of a given string in the text field. Description This method expect arguments. Arguments string This argument is mandatory. Specifies the character string to be used by the method. Return value The returned value is an array with objects with properties for the search result. Object properties: start The beginning of the string in the text field. end The end of the string in the text field. string The string. Syntax var findString = textFieldRange( element ).findString( 'myString' ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. size() method Simulates the entry of a string in the text field. Description This method expect arguments. Arguments string This argument is mandatory. Specifies the string to be used by the method. noRemove This argument is optional. The method will clone the text field element to obtain the property values, that is, it will insert elements into the document and when they are no longer needed, remove them. Using this method in a repeating structure is very browser-intensive. This argument can be used to prevent the process from slowing down by passing true . Example textFieldRange( element ).size( string, true ); When it is no longer necessary to preserve the elements inserted by the method, just call it again, passing only false . Example textFieldRange( element ).size( false ); Return value The returned value is an object. Object properties: height Returns the height in px of the string. width Returns the width in px of the string. charHeight Returns the current height in px of the characters in the string. lineHeight Returns the height in px of the lines contained in the string. Syntax textFieldRange( element ).size( 'string' ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. setCaret() method Defines a new position for the caret in the text field. Description This method expect arguments. Arguments lineOrPosition This argument is mandatory. Specifies the new caret line or position. positionInLine This argument is optional. The new caret position on the line. If only one argument is passed to this method, it will be understood that the value refers to the new caret position in the text field. If two arguments were passed to this method, it will be understood that the first argument refers to the line on which you want to place the caret, and the second to the position on the line. If the value of the second argument is greater than the number of characters on the line, the caret is positioned at the end of the line. Negative values for the second argument will be understood as the subtraction of the number of characters in the line, by the passed value. That is, if you pass -1 , it means that the caret will be positioned one character before the last character of the line. If you move on to the second argument, the value -0.1 , the caret will be positioned at the end of the line. Return value The returned value is the updated textFieldRange object. Syntax textFieldRange( element ).setCaret( lineOrPosition , positionInLine ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. select() method Select a string in the text field. Description This method expect arguments. Arguments selectionStart This argument is optional. Specifies the position of the first character to start the selection. selectionEnd This argument is optional. Specifies the position of the last character at the end of the selection. If the selectionEnd argument is not passed, the method will place the cursor in the position passed to the selectionStart argument. If no arguments are passed, the method will select all text from the text field. Return value The returned value is the updated textFieldRange object. Syntax textFieldRange( element ).select( selectionStart, selectionEnd ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. lines() method Gets all lines contained in the text field. Description This method does not expect any arguments. Return value This method can accurately return an array containing the respective lines in the text field at their positions. Syntax var lines = textFieldRange( element ).lines(); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. breakLines() method Gets lines in the text field with line break characters inserted at specific points. Description This method expect arguments. Arguments apply This argument is optional. If passed as true , this argument indicates that: the method should insert the line break characters in the text field, only at the specific and necessary points at which the break occurs. The “line break characters” are: '\r\\n' or '\n' according to the browser. Return value The returned value is an array. Syntax var breakLines = textFieldRange( element ).breakLines(); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. moveCaret() method Move the caret in the text field. Description This method expect arguments. Arguments keyCode This argument is mandatory. Allowed values 33: Position the caret on a line one page above the line that is currently positioned. 34: Position the caret on a line one page below the line that is currently positioned. 35: Position the caret on the last character of the line that is currently positioned. 36: Position the caret on the first character of the line currently positioned. 37: Position the caret before the first character to the left of your current position. 38: Position the caret one line above your current position. 39: Position the caret after the first character to the right of your current position. 40: Position the caret one line below your current position. In cases where there are no more lines for the caret to move, if you pass the keyCode that your action refers to when moving between the lines: There are no more lines up, but the keyCode passed was: 33 or 38 , the caret will be positioned at the first character of the line, which is currently positioned. There are no more lines down, but the keyCode passed was: 34 or 40 , the caret will be positioned at the last character of the line, which is currently positioned. Return value The returned value is the updated textFieldRange object. Syntax textFieldRange( element ).moveCaret( keyCode ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. refresh() method Updates the object's property values. Description This method does not expect any arguments. Return value The returned value is the updated textFieldRange object. Syntax textFieldRange( element ).refresh(); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table. selection property The string selected in the text field. Detail This is a read-only property, that is, its value must not be changed. Description If there is no selection in the text field, the value is an empty string. Syntax var selection = textFieldRange( element ).selection; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. beforeSelection property The string before the current selection in the text field. Detail This is a read-only property, that is, its value must not be changed. Description If there is no selection in the text field, the value will be the string before the current caret position in the text field. Syntax var beforeSelection = textFieldRange( element ).beforeSelection; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. afterSelection property The string after the current selection in the text field. Detail This is a read-only property, that is, its value must not be changed. Description If there is no selection in the text field, the value will be the string after the current caret position in the text field. Syntax var afterSelection = textFieldRange( element ).afterSelection; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. selectionEnd property The position of the last character of the current selection in the text field. Detail This is a read-only property, that is, its value must not be changed. Description If there is no selection in the text field, the value will refer to the position of the first character before the current caret position in the text field. Syntax var selectionEnd = textFieldRange( element ).selectionEnd; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. selectionStart property The position of the first character of the current selection in the text field. Detail This is a read-only property, that is, its value must not be changed. Description If there is no selection in the text field, the value will refer to the position of the first character before the current caret position in the text field. Syntax var selectionStart = textFieldRange( element ).selectionStart; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. currentLine property The line in the text field where the caret is positioned. Detail This is a read-only property, that is, its value must not be changed. Description An integer indicating the line on which the caret is positioned. Syntax var currentLine = textFieldRange( element ).currentLine; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. currentLineEnd property The position of the last character of the line in the text field where the caret is positioned. Detail This is a read-only property, that is, its value must not be changed. Description An integer indicating the position of the last character on the line. Syntax var currentLineEnd = textFieldRange( element ).currentLineEnd; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. numberOfLines property The number of lines contained in the text field. Detail This is a read-only property, that is, its value must not be changed. Syntax var numberOfLines = textFieldRange( element ).numberOfLines; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. top property The current offset of the cursor, in relation to the upper delimiter of the text field display frame. Detail This is a read-only property, that is, its value must not be changed. Description The current cursor displacement, including locomotion of the scroll in relation to the left delimiter of the frame display text field. Syntax var top = textFieldRange( element ).top; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. left property The current offset of the caret in relation to the left delimiter of the text field display frame. Detail This is a read-only property, that is, its value must not be changed. Description If you define the CSS properties in your element: (padding: x; or border-width: x;), this value is not counted, because the property refers only to the element's frame where text is allowed to be added. Syntax var left = textFieldRange( element ).left; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. x property The current offset of the caret in relation to the left delimiter of the text field display frame. Detail This is a read-only property, that is, its value must not be changed. Description If you define the CSS properties in your element: (padding: x; or border-width: x;), this value is not counted, because the property refers only to the element's frame where text is allowed to be added. Syntax var x = textFieldRange( element ).x; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. y property The current offset of the cursor, in relation to the upper delimiter of the text field display frame. Detail This is a read-only property, that is, its value must not be changed. Description The current cursor displacement, including locomotion of the scroll in relation to the left delimiter of the frame display text field. Syntax var y = textFieldRange( element ).y; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. offsetTop property O deslocamento atual do cursor, incluindo a locomoção da rolagem em relação ao limite superior do quadro de exibição do campo de texto. Detail This is a read-only property, that is, its value must not be changed. Description The current cursor displacement, including locomotion of the scroll in relation to the left delimiter of the frame display text field. Syntax var offsetTop = textFieldRange( element ).offsetTop; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. offsetLeft property The current caret displacement, including locomotion of the scroll in relation to the left delimiter of the frame display text field. Detail This is a read-only property, that is, its value must not be changed. Description The current cursor displacement, including locomotion of the scroll in relation to the left delimiter of the frame display text field. Syntax var offsetLeft = textFieldRange( element ).offsetLeft; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. viewTop property The current offset of the caret, in relation to the top delimiter of the viewport. Detail This is a read-only property, that is, its value must not be changed. Syntax var viewTop = textFieldRange( element ).viewTop; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. viewLeft property The current offset of the caret, in relation to the left delimiter of the viewport. Detail This is a read-only property, that is, its value must not be changed. Syntax var viewLeft = textFieldRange( element ).viewLeft; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. charHeight property The height in px of all the different characters contained in the text field. Detail This is a read-only property, that is, its value must not be changed. Description Unlike the width, the height of the characters in the text field is always the same value, although visually some characters look a little taller than others. Syntax var charHeight = textFieldRange( element ).charHeight; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. charsWidth property The width in px of all the different characters contained in the text field. Detail This is a read-only property, that is, its value must not be changed. Description Contains objects with properties related to the characters. Object properties: char The character. width The width in px of the character. Syntax var charsWidth =textFieldRange( element ).charsWidth; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. charList property All the different characters contained in the text field. Detail This is a read-only property, that is, its value must not be changed. Description Contains objects with properties related to the characters. Object properties: char The character. amount The number of times the character is repeated in the text field. Syntax var charList = textFieldRange( element ).charList; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. charBreak property The character that the browser uses to break lines in the text field. Detail This is a read-only property, that is, its value must not be changed. Description The “line break character” are: '\r\\ n' or '\n' according to the browser. Syntax textFieldRange( element ).charBreak; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. lineHeight property The current height in px of the lines contained in the text field. Detail This is a read-only property, that is, its value must not be changed. Description If you define the CSS line-height property in your element, using a unit of measurement other than px, the value returned will be the conversion of the value to px. Syntax var lineHeight = textFieldRange( element ).lineHeight; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. textFieldHeight property The height of the text entry field. Detail This is a read-only property, that is, its value must not be changed. Description The text entry field is the frame of the element where the text can be added. Syntax var textFieldHeight = textFieldRange( element ).textFieldHeight; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. textFieldWidth property The width of the text entry field. Detail This is a read-only property, that is, its value must not be changed. Description The text entry field is the frame of the element where the text can be added. Syntax var textFieldWidth = textFieldRange( element ).textFieldWidth; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. borderWidth property The width in px of the edges of the text input element. Detail This is a read-only property, that is, its value must not be changed. Description If you set the CSS border-width property on your element, using a unit of measurement other than px, The value of the object's properties will be the conversion of the value to px. Object properties: top The width in px of the top border of the text entry element. left The width in px of the left border of the text entry element. right The width in px of the right border of the text entry element. bottom The px width of the bottom border of the text entry element. Syntax var borderWidth = textFieldRange( element ).borderWidth; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. padding property The padding of the element Detail This is a read-only property, that is, its value must not be changed. Description If you set the CSS padding property on your element using a unit of measurement other than px, the value of the object's properties will convert the value to px. Object properties: top The upper padding of the text entry element. left The left padding of the text entry element. right The right padding of the text entry element. bottom The bottom padding of the text entry element. Syntax var padding = textFieldRange( element ).padding; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. Getting started textFieldRangeJS Getting started. Browser support table Discover the compatibility of the textFieldRangeRS library among the main browsers. Mozilla Firefox 20.0.1 * Opera 25.0 * Google Chrome 26.0 * Microsoft Edge * Internet Explorer 7.0 * Safari 5.1 * Attention Google Chrome: It is possible that the library also supports older versions of this browser. ",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/single-page-documentation/"
	},
	"14":{
		"documentContentType":"article",
		"title":" $scroll-left property – controlAnimationJS | FlyNeves ",
		"description":"Sets the scroll offset in the left direction.",
		"keywords":"",
		"h1":" $scroll-left property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" $scroll-left property Sets the scroll offset in the left direction. Detail This property is read and write. This is a special style property, created for controlAnimation. Expected type: number. Description This property should only be used in the CSS style of the keyframes. Syntax myAnimationObject[100] = '$scroll-left: 100; top: 50px; left...'; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/$scroll-left/"
	},
	"15":{
		"documentContentType":"article",
		"title":" $scroll-to property – controlAnimationJS | FlyNeves ",
		"description":"Sets the scroll offset in the top and left directions.",
		"keywords":"",
		"h1":" $scroll-to property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" $scroll-to property Sets the scroll offset in the top and left directions. Detail This property is read and write. This is a special style property, created for controlAnimation. Expected type: number. Description This property should only be used in the CSS style of the keyframes. Syntax myAnimationObject[100] = '$scroll-to: 100 200; top: 50px; left...'; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/$scroll-to/"
	},
	"16":{
		"documentContentType":"article",
		"title":" $scroll-top property – controlAnimationJS | FlyNeves ",
		"description":"Sets the scroll offset in the upper direction.",
		"keywords":"",
		"h1":" $scroll-top property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" $scroll-top property Sets the scroll offset in the upper direction. Detail This property is read and write. This is a special style property, created for controlAnimation. Expected type: number. Description This property should only be used in the CSS style of the keyframes. Syntax myAnimationObject[100] = '$scroll-top: 100; top: 50px; left...'; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/$scroll-top/"
	},
	"17":{
		"documentContentType":"article",
		"title":" addListener() Method – controlAnimationJS | FlyNeves ",
		"description":"Adds listeners to the animation.",
		"keywords":"",
		"h1":" addListener() Method ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":" Arguments Return value ",
		"mainText":" addListener() Method Adds listeners to the animation. Detail This method belongs to the animation object. Description This method expect arguments. Arguments listener This argument is mandatory. Specifies the listener to be attached to the animation object. Expected type: string. Below is a list of accepted values for this argument: start: Fires when the animation starts. end: Fires when the animation is finished. iterations: Fires when the animation interaction is complete. changekeys: Fires when the animation progress exceeds the value of a frame key. callback Expected type: function. This argument is mandatory. Specifies the function to be called. Return value No value is returned. Syntax myAnimationObject.addListener( listener, callback ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/addListener/"
	},
	"18":{
		"documentContentType":"article",
		"title":" addListenerAll() Method – controlAnimationJS | FlyNeves ",
		"description":"Add listeners to all animations.",
		"keywords":"",
		"h1":" addListenerAll() Method ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":" Arguments Return value ",
		"mainText":" addListenerAll() Method Add listeners to all animations. Detail This method belongs to the controlAnimation object. Description This method expect arguments. Arguments listener This argument is mandatory. Specifies the listener to be attached to the animation objects. Expected type: string. Below is a list of accepted values for this argument: start: Fires when the animation starts. end: Fires when the animation is finished. iterations: Fires when the animation interaction is complete. changekeys: Fires when the animation progress exceeds the value of a frame key. callback Expected type: function. This argument is mandatory. Specifies the function to be called. Return value No value is returned. Syntax controlAnimation.addListenerAll( listener, callback ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/addListenerAll/"
	},
	"19":{
		"documentContentType":"article",
		"title":" animationId Property – controlAnimationJS | FlyNeves ",
		"description":"The unique identifier for each animation object.",
		"keywords":"",
		"h1":" animationId Property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" animationId Property The unique identifier for each animation object. Detail This is a read-only property, that is, its value must not be changed. This property belongs to the animation object, not the controlAnimation object. Description This property is very important, as it is used by the library to identify each of the animation objects. Syntax var animationId = myAnimationObject.animationId; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/animationId/"
	},
	"20":{
		"documentContentType":"article",
		"title":" back() method – controlAnimationJS | FlyNeves ",
		"description":"Makes the progress of the animation interaction return to a certain position and, after the return is complete, continue the interaction.",
		"keywords":"",
		"h1":" back() method ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":" Arguments Return value ",
		"mainText":" back() method Makes the progress of the animation interaction return to a certain position and, after the return is complete, continue the interaction. Detail This method belongs to the animation object. Description This method expect arguments. Arguments goTo This argument is mandatory. Specifies the position to which the animation should return. Expected type: number. Return value No value is returned. Syntax myAnimationObject.back( goTo ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/back/"
	},
	"21":{
		"documentContentType":"article",
		"title":" backAll() method – controlAnimationJS | FlyNeves ",
		"description":"Makes the interaction progress of all animations return to a certain position and, after the return is complete, continue the interaction.",
		"keywords":"",
		"h1":" backAll() method ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":" Arguments Return value ",
		"mainText":" backAll() method Makes the interaction progress of all animations return to a certain position and, after the return is complete, continue the interaction. Detail This method belongs to the controlAnimation object. Description This method expect arguments. Arguments goTo This argument is mandatory. Specifies the position to which the animations should return. Expected type: number. Return value No value is returned. Syntax controlAnimation.backAll( goTo ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/backAll/"
	},
	"22":{
		"documentContentType":"article",
		"title":" Building keyframes – controlAnimationJS | FlyNeves ",
		"description":"Understand the operation and use rules for the construction of animation keyframes.",
		"keywords":"",
		"h1":" Building keyframes ",
		"h2":" Detail Description Syntax ",
		"h3":" Accepted values ",
		"mainText":" Building keyframes Understand the operation and use rules for the construction of animation keyframes. Detail Keyframes properties are read and write. Keyframes properties belong to the animation object, not the controlAnimation object. Expected type: object || boolean || string . Description Key frames are the most important moments of an animation. As the name says, they are the “key” of all the frames of an animation, they are responsible for creating the correct time and rhythm of the movement, for example: they present differences in a character's actions, a crucial change in movement or even a great pose. Accepted values Understand the accepted values for each keyframe and how to use them. styleObject Define an object with CSS properties, with JavaScript nomenclature and the CSS style will be applied to the elements during the animation. See the example below: myAnimationObject[ 0 ] = { borderWidth: '0px', top: '0px', left: '0px', } In the keys following the 0 key, you can minimize the property names and their values. myAnimationObject[ 0 ] = { borderWidth: '0px', top: '0px', left: '0px' } myAnimationObject[ 100 ] = { 0: '10', /* borderWidth: 10px */ 1: '10' /* top: 10px */, 2: '10' /* left: 10px */ } boolean No action is defined, but the animation is performed and the properties of the animation object receive updates. string Define a character string and it will be understood as a CSS style and applied to the elements during the animation. You can also minify the names of the properties, see the example below: /* When the sequence of properties is not changed. */ myAnimationObject[ 0 ] = ' border-width: 0px; top: 0px; left: 0px '; myAnimationObject[ 100 ] = '10; 200; 200;' /* The same as: 'border-width: 10px; top: 200px; left: 200px'*/; /* ___________________________________________________*/ /* When the sequence of properties is changed.*/ myAnimationObject[ 0 ] = ' border-width: 0px; top: 0px; left: 0px '; myAnimationObject[ 100 ] = '1: 10; 2: 200; 0: 200;' /* The same as: 'top: 10px; left: 200px; border-width: 200px'*/; /* ___________________________________________________*/ The way you start the values of a property, you must follow them in all keyframes, example: border-width: 1px 2px 3px 4px , the sequence of values related to border, must maintained as they were initiated. Syntax myAnimationObject[ 0 ] = ' top: 0px; left: 50px;...'; ",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/building-keyframes/"
	},
	"23":{
		"documentContentType":"article",
		"title":" call property – controlAnimationJS | FlyNeves ",
		"description":"Defines a function to be called at each interleaving.",
		"keywords":"",
		"h1":" call property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" call property Defines a function to be called at each interleaving. Detail This property is read and write. This property belongs to the animation object, not the controlAnimation object. Expected type: function. Description As the defined function will be called at each animation interleaving, avoid defining functions that require a lot of the browser. Syntax myAnimationObject.call = myFunction; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/call/"
	},
	"24":{
		"documentContentType":"article",
		"title":" cancel() method – controlAnimationJS | FlyNeves ",
		"description":"Cancels the execution of the animation.",
		"keywords":"",
		"h1":" cancel() method ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":" Return value ",
		"mainText":" cancel() method Cancels the execution of the animation. Detail This method belongs to the animation object. Description This method does not expect any arguments. Unlike the pause method , this method erases animation data that is unnecessary after it is canceled. Return value No value is returned. Syntax myAnimationObject.cancel(); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/cancel/"
	},
	"25":{
		"documentContentType":"article",
		"title":" cancelAll() Method – controlAnimationJS | FlyNeves ",
		"description":"Cancels the execution of all animations.",
		"keywords":"",
		"h1":" cancelAll() Method ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":" Return value ",
		"mainText":" cancelAll() Method Cancels the execution of all animations. Detail This method belongs to the controlAnimation object. Description This method does not expect any arguments. Unlike the pauseAll method , this method erases unnecessary animation data after it is canceled. Return value No value is returned. Syntax controlAnimation.cancelAll(); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/cancelAll/"
	},
	"26":{
		"documentContentType":"article",
		"title":" className property – controlAnimationJS | FlyNeves ",
		"description":"Defines the name of the CSS class, to be linked to the animation object.",
		"keywords":"",
		"h1":" className property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" className property Defines the name of the CSS class, to be linked to the animation object. Detail This property is read and write. This property belongs to the animation object, not the controlAnimation object. Expected type: string. Description When inserting the style in keyframes and setting the insertStyle property to auto or tag , you will need of a name for the class that will be added to the elements, however, the library itself already defines an initial value for this property that can be maintained. Syntax myAnimationObject.className = myFunction; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/className/"
	},
	"27":{
		"documentContentType":"article",
		"title":" clone() method – controlAnimationJS | FlyNeves ",
		"description":"Clones the animation object.",
		"keywords":"",
		"h1":" clone() method ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":" Arguments Return value ",
		"mainText":" clone() method Clones the animation object. Detail This method belongs to the animation object. Description This method expect arguments. Arguments amount Expected type: number || object. This argument is optional. Specifies the number of clones. You can also pass an array with HTML elements. An object will be created for each element of the array and the element property will be defined with the element. The default value is: 1. Return value The returned value is an array with clones of the animation object. Syntax var myClones = myAnimationObject.clone( amount ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/clone/"
	},
	"28":{
		"documentContentType":"article",
		"title":" config() method – controlAnimationJS | FlyNeves ",
		"description":"Sets the default values for the properties of animation objects.",
		"keywords":"",
		"h1":" config() method ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":" Return value ",
		"mainText":" config() method Sets the default values for the properties of animation objects. Detail This method belongs to the controlAnimation object. Description This method does not expect any arguments. Return value The returned value is an object. If there is a change in any of its properties, when starting the new animation object it will already have the new default values. Syntax var animationObjectsConfig = controlAnimation.config(); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/config/"
	},
	"29":{
		"documentContentType":"article",
		"title":" create() method – controlAnimationJS | FlyNeves ",
		"description":"Creates an animation object.",
		"keywords":"",
		"h1":" create() method ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":" Return value ",
		"mainText":" create() method Creates an animation object. Detail This method belongs to the controlAnimation object. Description This method does not expect any arguments. Return value The returned value is a new animation object, with the default properties already included in it. Syntax var myAnimationObject = controlAnimation.create(); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/create/"
	},
	"30":{
		"documentContentType":"article",
		"title":" delay property – controlAnimationJS | FlyNeves ",
		"description":"Sets the delay between each animation interaction.",
		"keywords":"",
		"h1":" delay property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" delay property Sets the delay between each animation interaction. Detail This property is read and write. This property belongs to the animation object, not the controlAnimation object. Expected type: number || boolean || undefined. Description Accepted values for this property: number: Sets the delay in seconds. false: There is no delay. undefined: Não há atraso. The default value is: false. Syntax myAnimationObject.delay = 5; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/delay/"
	},
	"31":{
		"documentContentType":"article",
		"title":" direction property – controlAnimationJS | FlyNeves ",
		"description":"Defines the reading order of the keyframes, in an animation cycle.",
		"keywords":"",
		"h1":" direction property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" direction property Defines the reading order of the keyframes, in an animation cycle. Detail This property is read and write. This property belongs to the animation object, not the controlAnimation object. Expected type: string. Description Accepted values for this property: normal: The reading of the keyframes happens in an increasing way: initial key to final key. reverse: The reading of keyframes happens in a decreasing way: final key for the initial key. alternate: The reading of the keyframes happens alternately between normal and reverse , in each cycle a different way of reading is used, starting from: normal. alternate-reverse: The reading of the keyframes happens alternately between normal and reverse , in each cycle a different way of reading is used, starting from: reverse. random-keys: At each cycle, a key from the keyframes is chosen at random as the maximum value that the animation should progress, and the animation will always start from the 0 key. random-offset:In each cycle, an offset value between the keys of the keyframes is chosen randomly as the maximum value that the animation should progress, and the animation will always start at the 0 key. fluid-random-keys: In each cycle, a key from the keyframes is chosen randomly as the maximum value that the animation must progress, and the animation will always start from the progression value reached by the previous cycle. fluid-random-offset: In each cycle, an offset value between the keys of the keyframes is chosen randomly as the maximum value that the animation must progress, and the animation will always start from the progression value reached by the previous cycle. The default value is: normal. Syntax myAnimationObject.direction = 'random-keys'; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/direction/"
	},
	"32":{
		"documentContentType":"article",
		"title":" duration property – controlAnimationJS | FlyNeves ",
		"description":"Sets the duration of the animation.",
		"keywords":"",
		"h1":" duration property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" duration property Sets the duration of the animation. Detail This property is read and write. This property belongs to the animation object, not the controlAnimation object. Expected type: number. Description The value to be set indicates the duration of the animation in seconds. The default value is: 3. Syntax myAnimationObject.duration = 5000; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/duration/"
	},
	"33":{
		"documentContentType":"article",
		"title":" easing property – controlAnimationJS | FlyNeves ",
		"description":"Defines how the animation will progress during its execution.",
		"keywords":"",
		"h1":" easing property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" easing property Defines how the animation will progress during its execution. Detail This property is read and write. This property belongs to the animation object, not the controlAnimation object. Expected type: function. Description The function to be defined for this property, must be one of the easing functions . There are several websites and projects that present and distribute these mathematical functions. The default value is: function linearTween( t, b, c, d ) { return c * t / d + b; }; Syntax myAnimationObject.easing = function easeInOutQuad( t, b, c, d ) { t /= d / 2; if ( t < 1 ) return c / 2 * t * t + b; t--; return -c / 2 * ( t * ( t -2 ) - 1 ) + b; }; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/easing/"
	},
	"34":{
		"documentContentType":"article",
		"title":" element property – controlAnimationJS | FlyNeves ",
		"description":"Defines the elements that will undergo the style changes.",
		"keywords":"",
		"h1":" element property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" element property Defines the elements that will undergo the style changes. Detail This property is read and write. This property belongs to the animation object, not the controlAnimation object. Expected type: object. Description The object to be passed can also be an array containing HTML elements. Syntax myAnimationObject.element = document.getElementsByTagName( 'div' ); Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/element/"
	},
	"35":{
		"documentContentType":"article",
		"title":" fill property – controlAnimationJS | FlyNeves ",
		"description":"Defines which values are applied by the animation, when the end of its cycles arrives.",
		"keywords":"",
		"h1":" fill property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" fill property Defines which values are applied by the animation, when the end of its cycles arrives. Detail This property is read and write. This property belongs to the animation object, not the controlAnimation object. Expected type: boolean || number. Description Accepted values for this property: true: The last values are kept. false: No value is maintained. number: The animation runs again until it reaches the set value. The default value is: false. Syntax myAnimationObject.fill = true; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/fill/"
	},
	"36":{
		"documentContentType":"article",
		"title":" get() method – controlAnimationJS | FlyNeves ",
		"description":"Gets an animation object.",
		"keywords":"",
		"h1":" get() method ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":" Arguments Return value ",
		"mainText":" get() method Gets an animation object. Detail This method belongs to the controlAnimation object. Description This method expect arguments. Arguments name This argument is mandatory. Specifies the object's animation identifier. Expected type: string || number. The animation identifier is the value of the name property . Return value The returned value is the object on success or false on failure. Syntax controlAnimation.get( name ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/get/"
	},
	"37":{
		"documentContentType":"article",
		"title":" getAll () Method – controlAnimationJS | FlyNeves ",
		"description":"Gets all animation objects.",
		"keywords":"",
		"h1":" getAll () Method ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":" Return value ",
		"mainText":" getAll () Method Gets all animation objects. Detail This method belongs to the controlAnimation object. Description This method does not expect any arguments. Return value The returned value is the objects in an array on success or false on failure. Syntax controlAnimation.getAll(); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/getAll/"
	},
	"38":{
		"documentContentType":"article",
		"title":" Getting started – controlAnimationJS | FlyNeves ",
		"description":"See a simple example of using controlAnimation.",
		"keywords":"",
		"h1":" Getting started ",
		"h2":" Installing What will we do? ",
		"h3":" Code Running ",
		"mainText":" Getting started See a simple example of using controlAnimation. Installing To start the tutorial the first steps are: download the library, then create an HTML file, in this file we will add the link to controlAnimationJS, we will also create a JavaScript file with the name: myAnimation.js, and we will add the link, it will be where we will do the manipulations . We will insert the necessary elements and some CSS. See the example below: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset='utf-8'&gt; &lt;meta name='viewport' content='width=device-width, initial-scale=1.0'&gt; &lt;title&gt;controlAnimationJS&lt;/title&gt; &lt;style&gt; #controlAnimation-rectangle{ float: left; width: 90%; margin: 0 5%; padding: 40px 0; overflow: hidden; height: 200px; } #controlAnimation-rectangle div{ float: left; width: 700px; height: 100px; } #controlAnimation-bars span{ display: inline-block; width: 30px; height: 10px; position: relative; margin: 40px; z-index: 9; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id='controlAnimation-rectangle'&gt; &lt;div&gt; &lt;div id='controlAnimation-bars'&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script src='controlAnimation.js'&gt;&lt;/script&gt; &lt;script src='myAnimation.js'&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; What will we do? The example chosen for this tutorial, will be the very simple example. It will only serve to observe how easy it is to work with controlAnimation. We will use stylized elements in the shape of bars and make them move at random. Code The code below must be inserted in the myAnimation.js file. var elementsBars = document.getElementById( 'controlAnimation-bars' ).getElementsByTagName( 'span' ); var myAnimation = controlAnimation.create(); myAnimation.direction = 'fluid-random-offset'; myAnimation.iterations = Infinity; myAnimation[ 0 ] = 'height:100px; top: 0px; left: 0px; background-color: rgb( 255, 0, 0 ); border-radius:0px; transform: rotate( 0deg );'; myAnimation[ 100 ] = '300; 50; 100; rgb( 0, 0, 255 ); 20; rotate( 360deg );'; controlAnimation.play( myAnimation.clone( elementBars ) ); Running If you are not seeing the animation correctly: if possible try to use the device horizontally. ",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/getting-started/"
	},
	"39":{
		"documentContentType":"article",
		"title":" go() method – controlAnimationJS | FlyNeves ",
		"description":"Causes the animation interaction to return to a certain position and, after the return is complete, it ends.",
		"keywords":"",
		"h1":" go() method ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":" Arguments ",
		"mainText":" go() method Causes the animation interaction to return to a certain position and, after the return is complete, it ends. Detail This method belongs to the animation object. Description This method expect arguments. Arguments goTo This argument is mandatory. Specifies the position to which the animation should return. Expected type: number. Syntax myAnimationObject.go( goTo ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/go/"
	},
	"40":{
		"documentContentType":"article",
		"title":" goAll() method – controlAnimationJS | FlyNeves ",
		"description":"Causes the interaction of all animations to return to a certain position and, after the return is complete, ends each one.",
		"keywords":"",
		"h1":" goAll() method ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":" Arguments ",
		"mainText":" goAll() method Causes the interaction of all animations to return to a certain position and, after the return is complete, ends each one. Detail This method belongs to the controlAnimation object. Description This method expect arguments. Arguments goTo This argument is mandatory. Specifies the position to which the animation should return. Expected type: number. Syntax controlAnimation.goAll( goTo ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/goAll/"
	},
	"41":{
		"documentContentType":"article",
		"title":" Infrastructure – controlAnimationJS | FlyNeves ",
		"description":"Understand a little about what happens internally in controlAnimation.",
		"keywords":"",
		"h1":" Infrastructure ",
		"h2":" Inspiration Structure Operation Closure ",
		"h3":" Factory Method Facade ",
		"mainText":" Infrastructure Understand a little about what happens internally in controlAnimation. Inspiration Currently there are several JavaScript libraries, (incredible and powerful), intended for the construction of animations. However, I believe that at some point you also asked yourself the following questions: “Is it worth using such a heavy library in my application?” Or “Am I becoming a lazy, non-creative developer using ready-made animation logic?”. With the arrival of CSS3 Animations , these and other problems have become obsolete, but don't give the developer some features and functionality that only JavaScript can offer. And when considering compatibility with older browsers, as it is recent, CSS3 Animations will not be available for some of them. controlAnimationJS delivers similar features and functionality to the developer and adds new ones, being high performance and incredibly light: 13.8KB. Structure When starting and during the source code development process, the modeling was based on the Design Pattern: Factory Method e Facade . We will not go into details about these standards, but we will talk about their application in our source code. Factory Method The list below identifies the elements in our library according to the Factory Method structure. 'The structure as described in the book Design Patterns: Elements of Reusable Object-Oriented Software . ' Creator: The controlAnimation.create() method, its action is: Create a new animation object with properties and methods that the developer will need, but its use is optional. ConcreteCreator:The controlAnimation.play(myAnimationObject) method receives the animation object created by the developer, and from it creates a variation that will be used internally by the library as an object of control and reaction. Product:Is the object that the developer will use to build his animation. ConcreteProduct: A variation on the developer animation object used internally by the library, it will not only have the properties of the developer object, but also properties that were considered unnecessary for the developer. In our code, the Design Pattern Factory Method encouraged low coupling, greater flexibility and eliminated the need to couple specific classes for application at the code level. However, its implementation may not have been exactly as the theory suggests, but I believe that the result was pleasant. Facade Although it did not go deeply into its theory, the motivation for its use was to structure a system in subsystems to help reduce its complexity. We will not identify the elements as we did with the previous Design Pattern, but it is very clear that the Facade class (Grouper) is the controlAnimation object, as it knows which classes of the subsystems are responsible for the call and delegates customer calls to the correct subsystem objects. The implementation of the design standards mentioned above, guided the source code of our library, enabling low coupling, in which each function, object or class has its responsibilities and that do not exceed its limits. This makes the code more readable, allowing the developer to understand it and, if necessary, make changes that will contribute to its use. Operation We will understand what happens internally from the initialization process to the end of the animation. See the flow chart below: controlAnimationJS Flowchart When you look at the flowchart carefully, you will notice that there is a red arrow pointing to a rectangle with the following message: “The object is ignored”, prevent this from happening, as the animation will not continue in the flow and will not be executed. The following situation can cause this message: When the animation object is invalid or is already in use. Also note that there is a rectangle with the message: “Animation data is loaded”. Pay attention to this, as it is incredible, the execution performance of each animation is exponentially optimized, considering that each animation when leaving the queue will pass quickly through its execution. This makes it possible to have several animations running simultaneously without requiring too much of the application. Also interesting is the condition message contained in one of the rhombus shapes: “Has the object been updated?”, This indicates that when the animation leaves the queue to be executed, a quick check is made to identify whether the developer's animation object has undergone some change. Thus, the developer does not need to invoke any update method when he changes something in his animation object. Also note that when there is a change, the animation is updated and played. Closure Initially, controlAnimationJS was being developed to be an animation engine, that is, it would do the internal part and not the visual part. Each code snippet was designed, revised and optimized to make the best possible use of resources without requiring too much of the application. Near the end of its construction, it was noticed how small the code snippet to make the visual part work, currently we have a light and robust library capable of performing simple and complex animations, without leaving aside the incredible animation engine, which makes the limits of this library your creativity. ",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/infrastructure/"
	},
	"42":{
		"documentContentType":"article",
		"title":" insertStyle property – controlAnimationJS | FlyNeves ",
		"description":"Defines the mode for inserting the style included in the keyframes.",
		"keywords":"",
		"h1":" insertStyle property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" insertStyle property Defines the mode for inserting the style included in the keyframes. Detail This property is read and write. Expected type: string. This property belongs to the animation object, not the controlAnimation object. Description Accepted values for this property: inline: The style is added to the elements by the HTML style attribute. tag: The style is added to the elements by the HTML style tag, through the CSS class, using the value of the property className as the name of the class. auto: The style via tag is added only when there are more than 1 element. The default value is: auto. Syntax myAnimationObject.insertStyle = 'tag'; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/insertStyle/"
	},
	"43":{
		"documentContentType":"article",
		"title":" controlAnimationJS library – controlAnimationJS | FlyNeves ",
		"description":"Developed for creative developers who do not give up high performance, offering total control over their animations.",
		"keywords":"",
		"h1":" Introduction ",
		"h2":" “Original copy” controlAnimationJS vs CSS Animations closure Read more ",
		"h3":" Comparing coding ",
		"mainText":" Introduction Developed for creative developers who do not give up high performance, offering total control over their animations. “Original copy” Inspired by the CSS model for creating animations with @keyframes, the line of learning to use this library shortens considerably. Even if you don't read the documentation, you will hardly be lost when using it, with similar features, properties and methods and with the same structure as @keyframes, the coding will always be elegant and familiar. The main positive point of this library is the countless possibilities for creating animations, simplicity, elegance, and its ability to work with different and old browsers, offering excellent quality among them. controlAnimationJS vs CSS Animations CSS Animations added incredible features, however, it does not offer complete control, reaction to user actions, obtaining data about the current state of the animation and if you want to support an old browser, it will not be available. The controlAnimationJS library meets these needs, bringing similar functionality and adding new ones, the coding is simpler and more complete, because with less code you will do the same, but will support all browsers. Comparing coding The examples below are for comparison, in them we would be creating the same animation with controlAnimationJS and CSS Animations, visually you will see the difference in the necessary coding. controlAnimationJS code var myAnimation = {}; myAnimation.element = myElements; myAnimation[ 0 ] = 'transform: rotate( 0deg )'; myAnimation[ 100 ] = 'rotate( 360deg )'; myAnimation.iterations = Infinity; myAnimation.duration = 2; controlAnimation.play( myAnimation ); CSS Animations code @keyframes myAnimation { 0% { transform: rotate( 0deg ) } 100% { transform: rotate( 360deg ) } } @-webkit-keyframes myAnimation { 0% { transform: rotate( 0deg ) } 100% { transform: rotate( 360deg ) } } @-moz-keyframes myAnimation { 0% { transform: rotate( 0deg ) } 100% { transform: rotate( 360deg ) } } .myAnimation-element { -webkit-animation: myAnimation 2s infinite; -moz-animation: myAnimation 2s infinite; animation: myAnimation 2s infinite; } closure Extremely light, powerful, with many features and functionality, controlAnimationJS is the library that many developers were looking for. Read more Read the library's documentation, it's simple and easy to learn. ",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/introduction/"
	},
	"44":{
		"documentContentType":"article",
		"title":" iterations property – controlAnimationJS | FlyNeves ",
		"description":"Sets the number of times the animation should be executed.",
		"keywords":"",
		"h1":" iterations property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" iterations property Sets the number of times the animation should be executed. Detail This property is read and write. This property belongs to the animation object, not the controlAnimation object. Expected type: number. Description For the animation to run infinitely define: Infinity . The default value is: 1. Syntax myAnimationObject.iterations = 5; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/iterations/"
	},
	"45":{
		"documentContentType":"article",
		"title":" iterationsComplete property – controlAnimationJS | FlyNeves ",
		"description":"The number of interactions completed by the animation.",
		"keywords":"",
		"h1":" iterationsComplete property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" iterationsComplete property The number of interactions completed by the animation. Detail This is a read-only property, that is, its value must not be changed. This property belongs to the animation object, not the controlAnimation object. Description The default value is: 0. Syntax var iterationsComplete = myAnimationObject.iterationsComplete; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/iterationsComplete/"
	},
	"46":{
		"documentContentType":"article",
		"title":" keepFrameStyle property – controlAnimationJS | FlyNeves ",
		"description":"Defines whether to maintain the style of each keyframe.",
		"keywords":"",
		"h1":" keepFrameStyle property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" keepFrameStyle property Defines whether to maintain the style of each keyframe. Detail This property is read and write. This property belongs to the animation object, not the controlAnimation object. Expected type: boolean. Description Accepted values for this property: true O valor de estilo contido em cada keyframe é mantido. false Imagine that in the construction of your animation the following keyframes were passed: in order to insert the style contained in each one. myAnimationObject[ 0 ] = ' top: 0px; left:0'; myAnimationObject[ 33 ] = ' 0; 200'; myAnimationObject[ 66 ] = ' 0;'; myAnimationObject[ 100 ] = ' 200; 200'; Note that in the 33 keyframe, the left CSS style property will reach 200, but in the next keyframe there is no reference to it. In the current case, in the next keyframe, the property on the left would be added with the same value as the initial key. The default value is: false. Syntax myAnimationObject.keepFrameStyle = true; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/keepFrameStyle/"
	},
	"47":{
		"documentContentType":"article",
		"title":" listenerFired property – controlAnimationJS | FlyNeves ",
		"description":"The listener name which was triggered.",
		"keywords":"",
		"h1":" listenerFired property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" listenerFired property The listener name which was triggered. Detail This is a read-only property, that is, its value must not be changed. This property belongs to the animation object, not the controlAnimation object. Description This property can be used to identify the newly triggered listener. The default value is: false,indicating that no listener has been triggered. Syntax var listenerFired = myAnimationObject.listenerFired; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/listenerFired/"
	},
	"48":{
		"documentContentType":"article",
		"title":" maxProgress property – controlAnimationJS | FlyNeves ",
		"description":"Sets the maximum progress that the interaction of animation can achieve.",
		"keywords":"",
		"h1":" maxProgress property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" maxProgress property Sets the maximum progress that the interaction of animation can achieve. Detail This property is read and write. This property belongs to the animation object, not the controlAnimation object. Expected type: number || object. Description You can also define the property value as an array: myAnimationObject.maxProgress = [ 40, 70 , 90]; In the example above in the first interaction the progress of the animation would go up to 40 , and the second up to 70 and so on. When the value of the interaction sequence is greater than the number of values in the matrix, you can start over: myAnimationObject.maxProgress = [ 40, 70 , 'restart']; Setting the string: 'restart' as the last value of the array will cause the count of the array values to begin again. If there is no value in the matrix at the position indicated by the number of completed interactions, maxProgress will return to its normal behavior according to the direction property . Syntax myAnimationObject.maxProgress = 100; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/maxProgress/"
	},
	"49":{
		"documentContentType":"article",
		"title":" name property – controlAnimationJS | FlyNeves ",
		"description":"Sets the identifier for the animation object.",
		"keywords":"",
		"h1":" name property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" name property Sets the identifier for the animation object. Detail This property is read and write. This property belongs to the animation object, not the controlAnimation object. Expected type: string || number. Description If you do not define the value of this property, it will be defined with the value of the animationId property . Syntax myAnimationObject.name = 'myAnimation'; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/name/"
	},
	"50":{
		"documentContentType":"article",
		"title":" pause() method – controlAnimationJS | FlyNeves ",
		"description":"Pauses the animation that is playing.",
		"keywords":"",
		"h1":" pause() method ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":" Return value ",
		"mainText":" pause() method Pauses the animation that is playing. Detail This method belongs to the animation object. Description This method does not expect any arguments. Return value No value is returned. Syntax myAnimationObject.pause(); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/pause/"
	},
	"51":{
		"documentContentType":"article",
		"title":" pauseAll() method – controlAnimationJS | FlyNeves ",
		"description":"Pause all animations running.",
		"keywords":"",
		"h1":" pauseAll() method ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":" Return value ",
		"mainText":" pauseAll() method Pause all animations running. Detail This method belongs to the controlAnimation object. Description This method does not expect any arguments. Return value No value is returned. Syntax controlAnimation.pauseAll(); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/pauseAll/"
	},
	"52":{
		"documentContentType":"article",
		"title":" play() method – controlAnimationJS | FlyNeves ",
		"description":"Play the new animation.",
		"keywords":"",
		"h1":" play() method ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":" Arguments Return value ",
		"mainText":" play() method Play the new animation. Detail This method belongs to the controlAnimation object. Description This method expect arguments. Arguments object This argument is mandatory. Específica o objeto da animação. Expected type: object. The object to be passed can also be an array containing animation objects. all This argument is optional. When passing multiple animation objects with identical styles, pass true to improve performance. Expected type: boolean. Return value No value is returned. Syntax controlAnimation.play( object ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/play/"
	},
	"53":{
		"documentContentType":"article",
		"title":" progress property – controlAnimationJS | FlyNeves ",
		"description":"The current progress of the animation.",
		"keywords":"",
		"h1":" progress property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" progress property The current progress of the animation. Detail This property is read and write. This property belongs to the animation object, not the controlAnimation object. Expected type: number. Description At the beginning of the animation if you define a value for this property, it will be respected, that is, the animation will start from the defined value. Syntax myAnimationObject.progress = 100; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/progress/"
	},
	"54":{
		"documentContentType":"article",
		"title":" removeListener() method – controlAnimationJS | FlyNeves ",
		"description":"Removes listeners from the animation.",
		"keywords":"",
		"h1":" removeListener() method ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":" Arguments Return value ",
		"mainText":" removeListener() method Removes listeners from the animation. Detail This method belongs to the animation object. Description This method expect arguments. Arguments listener Below is a list of accepted values for this argument: start: Fires when the animation starts. end: Fires when the animation is finished. iterations: Fires when the animation interaction is complete. changekeys: Fires when the animation progress exceeds the value of a frame key. This argument is mandatory. Specifies the event to be removed from the animation object. Expected type: string. callback This argument is mandatory. Specifies the function to be called. Expected type: function. Return value No value is returned. Syntax myAnimationObject.removeListener( listener, callback ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/removeListener/"
	},
	"55":{
		"documentContentType":"article",
		"title":" removeListenerAll() method – controlAnimationJS | FlyNeves ",
		"description":"Removes listeners from all animation.",
		"keywords":"",
		"h1":" removeListenerAll() method ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":" Arguments Return value ",
		"mainText":" removeListenerAll() method Removes listeners from all animation. Detail This method belongs to the controlAnimation object. Description This method expect arguments. Arguments listener Below is a list of accepted values for this argument: start: Fires when the animation starts. end: Fires when the animation is finished. iterations: Fires when the animation interaction is complete. changekeys: Fires when the animation progress exceeds the value of a frame key. This argument is mandatory. Specifies the listener to be removed from animation objects. Expected type: string. callback Expected type: function. This argument is mandatory. Specifies the function to be called. Return value No value is returned. Syntax controlAnimation.removeListenerAll( listener, callback ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/removeListenerAll/"
	},
	"56":{
		"documentContentType":"article",
		"title":" restart() method – controlAnimationJS | FlyNeves ",
		"description":"Restarts the animation.",
		"keywords":"",
		"h1":" restart() method ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":" Return value ",
		"mainText":" restart() method Restarts the animation. Detail This method belongs to the animation object. Description This method does not expect any arguments. Return value No value is returned. Syntax myAnimationObject.restart(); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/restart/"
	},
	"57":{
		"documentContentType":"article",
		"title":" restartAll() method – controlAnimationJS | FlyNeves ",
		"description":"Restart all animations.",
		"keywords":"",
		"h1":" restartAll() method ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":" Return value ",
		"mainText":" restartAll() method Restart all animations. Detail This method belongs to the controlAnimation object. Description This method does not expect any arguments. Return value No value is returned. Syntax controlAnimation.restartAll(); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/restartAll/"
	},
	"58":{
		"documentContentType":"article",
		"title":" resume() method – controlAnimationJS | FlyNeves ",
		"description":"Resume all animations.",
		"keywords":"",
		"h1":" resume() method ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":" Return value ",
		"mainText":" resume() method Resume animation. Detail This method belongs to the animation object. Description This method does not expect any arguments. Return value No value is returned. Syntax myAnimationObject.resume(); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/resume/"
	},
	"59":{
		"documentContentType":"article",
		"title":" Usage rules – controlAnimationJS | FlyNeves ",
		"description":"Know and understand the rules for using the controlAnimationJS library.",
		"keywords":"",
		"h1":" Usage rules ",
		"h2":"",
		"h3":"",
		"mainText":" Usage rules Know and understand the rules for using the controlAnimationJS library. The list below describes some precautions to take when using controlAnimation. – When creating an animation using the style in the keyframes, you should always set the initial values of all the properties you will use in the 0 key. – When creating an animation using style in the keyframes, be aware that there is no conversion of the property values, that is, the initial unit of measure is always maintained. – When creating an animation using style in the keyframes, with the intention of using CSS properties that receive values related to colors, it is only allowed to use colors in RGB, RGBA and HEXADECIMAL. – When creating an animation using the style in the keyframes, remember that the library does not transition from non-numeric to numeric values, that is, if a given CSS property in key 0 has the value: center, and the next key: 200px. Nothing will happen, because the library does not make this transition. – When creating an animation using style in the keyframes, and if you want a property to accept floating values, it is necessary to insert a in the 0 key.See the example below: myAnimationObject[ 0 ] = ' top: 0.px'; Obviously if the property is already going to receive a floating value in the 0 key, there is no need to insert the . . ",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/rules-of-use/"
	},
	"60":{
		"documentContentType":"article",
		"title":" state property – controlAnimationJS | FlyNeves ",
		"description":"The current state the animation is in.",
		"keywords":"",
		"h1":" state property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" state property The current state the animation is in. Detail This is a read-only property, that is, its value must not be changed. This property belongs to the animation object, not the controlAnimation object. Description Accepted values for this property: running: The animation is running. paused: The animation is paused. completed: All animation cycles have been completed. canceled: The animation has been canceled. Syntax var state = myAnimationObject.state; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/state/"
	},
	"61":{
		"documentContentType":"article",
		"title":" styleBetweenFrames property – controlAnimationJS | FlyNeves ",
		"description":"Defines whether the style properties of a keyframe should be added since the previous keyframes.",
		"keywords":"",
		"h1":" styleBetweenFrames property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":" true false ",
		"mainText":" styleBetweenFrames property Defines whether the style properties of a keyframe should be added since the previous keyframes. Detail This property is read and write. This property belongs to the animation object, not the controlAnimation object. Expected type: boolean. Description Accepted values for this property: true The property value is inserted since the previous keyframes, even if they do not have it. false The value of the property is only changed in keyframes that contain it. The default value is: true. Syntax myAnimationObject.styleBetweenFrames = false; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/styleBetweenFrames/"
	},
	"62":{
		"documentContentType":"article",
		"title":" timeline property – controlAnimationJS | FlyNeves ",
		"description":"The animation schedule.",
		"keywords":"",
		"h1":" timeline property ",
		"h2":" Detail Description Direções Syntax Browser Support ",
		"h3":" Object properties ",
		"mainText":" timeline property The animation schedule. Detail This is a read-only property, that is, its value must not be changed. This property belongs to the animation object, not the controlAnimation object. Description The contained value is an object. Object properties The properties below contain a list of keys that tells how the animation's attenuation will occur. If you pass style to the keys of the keyframes, the keys of the list will have as value the style that will be applied when the tempo of the animation is the same as the key. normal The animation schedule for when the reading of the keyframes happens in an increasing way: initial key for the final key. reverse The animation schedule for when the reading of the keyframes happens in a decreasing way: final key for the initial key. Direções The animation schedule is defined according to its direction: normal: The chosen schedule is: normal. reverse: The chosen schedule is: reverse. alternate: Switch between schedules alternate-reverse: Switch between schedules random-keys: The chosen schedule will always be: strong random-offset: The chosen schedule will always be: normal fluid-random-keys: The chosen schedule will always be: normal fluid-random-offset: The chosen schedule will always be: normal Syntax var animationTimeline = myAnimationObject.timeline; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/controlAnimationJS/1.0/documentation/timeline/"
	},
	"63":{
		"documentContentType":"article",
		"title":" afterSelection property – textFieldRangeJS | FlyNeves ",
		"description":"The string after the current selection in the text field.",
		"keywords":"",
		"h1":" afterSelection property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" afterSelection property The string after the current selection in the text field. Detail This is a read-only property, that is, its value must not be changed. Description If there is no selection in the text field, the value will be the string after the current caret position in the text field. Syntax var afterSelection = textFieldRange( element ).afterSelection; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/afterSelection/"
	},
	"64":{
		"documentContentType":"article",
		"title":" appendString() method – textFieldRangeJS | FlyNeves ",
		"description":"Inserts a string at a given position in the text field.",
		"keywords":"",
		"h1":" appendString() method ",
		"h2":" Description Syntax Browser Support ",
		"h3":" Arguments Return value ",
		"mainText":" appendString() method Inserts a string at a given position in the text field. Description This method expect arguments. Arguments position This argument is mandatory. Specifies the position where the string is to be inserted. string This argument is mandatory. Specifies the string to be used by the method. select This argument is optional. Specifies whether to select the new string. Return value The returned value is the updated textFieldRange object. Syntax textFieldRange( element ).appendString( 0, 'string' ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/appendString/"
	},
	"65":{
		"documentContentType":"article",
		"title":" beforeSelection property – textFieldRangeJS | FlyNeves ",
		"description":"The string before the current selection in the text field.",
		"keywords":"",
		"h1":" beforeSelection property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" beforeSelection property The string before the current selection in the text field. Detail This is a read-only property, that is, its value must not be changed. Description If there is no selection in the text field, the value will be the string before the current caret position in the text field. Syntax var beforeSelection = textFieldRange( element ).beforeSelection; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/beforeSelection/"
	},
	"66":{
		"documentContentType":"article",
		"title":" borderWidth property – textFieldRangeJS | FlyNeves ",
		"description":"The width in px of the edges of the text input element.",
		"keywords":"",
		"h1":" borderWidth property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":" Object properties: ",
		"mainText":" borderWidth property The width in px of the edges of the text input element. Detail This is a read-only property, that is, its value must not be changed. Description If you set the CSS border-width property on your element, using a unit of measurement other than px, The value of the object's properties will be the conversion of the value to px. Object properties: top The width in px of the top border of the text entry element. left The width in px of the left border of the text entry element. right The width in px of the right border of the text entry element. bottom The px width of the bottom border of the text entry element. Syntax var borderWidth = textFieldRange( element ).borderWidth; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/borderWidth/"
	},
	"67":{
		"documentContentType":"article",
		"title":" breakLines() method – textFieldRangeJS | FlyNeves ",
		"description":"Gets lines in the text field with line break characters inserted at specific points.",
		"keywords":"",
		"h1":" breakLines() method ",
		"h2":" Description Syntax Browser Support ",
		"h3":" Arguments Return value ",
		"mainText":" breakLines() method Gets lines in the text field with line break characters inserted at specific points. Description This method expect arguments. Arguments apply This argument is optional. If passed as true , this argument indicates that: the method should insert the line break characters in the text field, only at the specific and necessary points at which the break occurs. The “line break characters” are: '\r\\n' or '\n' according to the browser. Return value The returned value is an array. Syntax var breakLines = textFieldRange( element ).breakLines(); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/breakLines/"
	},
	"68":{
		"documentContentType":"article",
		"title":" charBreak property – textFieldRangeJS | FlyNeves ",
		"description":"The character that the browser uses to break lines in the text field.",
		"keywords":"",
		"h1":" charBreak property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" charBreak property The character that the browser uses to break lines in the text field. Detail This is a read-only property, that is, its value must not be changed. Description The “line break character” are: '\r\\ n' or '\n' according to the browser. Syntax textFieldRange( element ).charBreak; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/charBreak/"
	},
	"69":{
		"documentContentType":"article",
		"title":" charHeight property – textFieldRangeJS | FlyNeves ",
		"description":"The height in px of all the different characters contained in the text field.",
		"keywords":"",
		"h1":" charHeight property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" charHeight property The height in px of all the different characters contained in the text field. Detail This is a read-only property, that is, its value must not be changed. Description Unlike the width, the height of the characters in the text field is always the same value, although visually some characters look a little taller than others. Syntax var charHeight = textFieldRange( element ).charHeight; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/charHeight/"
	},
	"70":{
		"documentContentType":"article",
		"title":" charList property – textFieldRangeJS | FlyNeves ",
		"description":"All the different characters contained in the text field.",
		"keywords":"",
		"h1":" charList property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":" Object properties: ",
		"mainText":" charList property All the different characters contained in the text field. Detail This is a read-only property, that is, its value must not be changed. Description Contains objects with properties related to the characters. Object properties: char The character. amount The number of times the character is repeated in the text field. Syntax var charList = textFieldRange( element ).charList; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/charList/"
	},
	"71":{
		"documentContentType":"article",
		"title":" charsWidth property – textFieldRangeJS | FlyNeves ",
		"description":"The width in px of all the different characters contained in the text field.",
		"keywords":"",
		"h1":" charsWidth property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":" Object properties: ",
		"mainText":" charsWidth property The width in px of all the different characters contained in the text field. Detail This is a read-only property, that is, its value must not be changed. Description Contains objects with properties related to the characters. Object properties: char The character. width The width in px of the character. Syntax var charsWidth =textFieldRange( element ).charsWidth; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/charsWidth/"
	},
	"72":{
		"documentContentType":"article",
		"title":" currentLine property – textFieldRangeJS | FlyNeves ",
		"description":"The line in the text field where the caret is positioned.",
		"keywords":"",
		"h1":" currentLine property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" currentLine property The line in the text field where the caret is positioned. Detail This is a read-only property, that is, its value must not be changed. Description An integer indicating the line on which the caret is positioned. Syntax var currentLine = textFieldRange( element ).currentLine; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table. ",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/currentLine/"
	},
	"73":{
		"documentContentType":"article",
		"title":" currentLineEnd property – textFieldRangeJS | FlyNeves ",
		"description":"The position of the last character of the line in the text field where the caret is positioned.",
		"keywords":"",
		"h1":" currentLineEnd property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" currentLineEnd property The position of the last character of the line in the text field where the caret is positioned. Detail This is a read-only property, that is, its value must not be changed. Description An integer indicating the position of the last character on the line. Syntax var currentLineEnd = textFieldRange( element ).currentLineEnd; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/currentLineEnd/"
	},
	"74":{
		"documentContentType":"article",
		"title":" currentLineStart property – textFieldRangeJS | FlyNeves ",
		"description":"The position of the first character in the line of the text field where the caret is positioned.",
		"keywords":"",
		"h1":" currentLineStart property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" currentLineStart property The position of the first character in the line of the text field where the caret is positioned. Detail This is a read-only property, that is, its value must not be changed. Description An integer indicating the position of the first character on the line. Syntax var currentLineStart = textFieldRange( element ).currentLineStart; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/currentLineStart/"
	},
	"75":{
		"documentContentType":"article",
		"title":" currentLineText property – textFieldRangeJS | FlyNeves ",
		"description":"The character string of the line in the text field where the caret is positioned.",
		"keywords":"",
		"h1":" currentLineText property ",
		"h2":" Description Syntax Browser Support ",
		"h3":"",
		"mainText":" currentLineText property The character string of the line in the text field where the caret is positioned. Description This is a read-only property, that is, its value must not be changed. Syntax var currentLineText = textFieldRange( element ).currentLineText; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/currentLineText/"
	},
	"76":{
		"documentContentType":"article",
		"title":" findString() method – textFieldRangeJS | FlyNeves ",
		"description":"Find occurrences of a given string in the text field.",
		"keywords":"",
		"h1":" findString() method ",
		"h2":" Description Syntax Browser Support ",
		"h3":" Arguments Return value Object properties: ",
		"mainText":" findString() method Find occurrences of a given string in the text field. Description This method expect arguments. Arguments string This argument is mandatory. Specifies the character string to be used by the method. Return value The returned value is an array with objects with properties for the search result. Object properties: start The beginning of the string in the text field. end The end of the string in the text field. string The string. Syntax var findString = textFieldRange( element ).findString( 'myString' ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/findString/"
	},
	"77":{
		"documentContentType":"article",
		"title":" Getting started – textFieldRangeJS | FlyNeves ",
		"description":"Learn the basic knowledge about the library, and see a simple example of its use.",
		"keywords":"",
		"h1":" Getting started ",
		"h2":" Installing What will we do? ",
		"h3":" Code Running ",
		"mainText":" Getting started Learn the basic knowledge about the library, and see a simple example of its use. Installing To start the tutorial the first steps are: download the library, create an HTML file, in this file we will add the textFieldRangeJS library. Let's create a JavaScript file with the name: textFieldHandler.js and add it to our HTML and also insert the necessary elements: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset='utf-8'&gt; &lt;meta name='viewport' content='width=device-width, initial-scale=1.0'&gt; &lt;title&gt;textFieldRangeJS&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;textarea id='textField' &gt;&lt;/textarea&gt; &lt;script src='textFieldRange.js'&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; What will we do? The example chosen for this tutorial will be a very simple example. It will only serve to observe the speed and accuracy of the library. We will define the position of the caret in the text field, simulating the movements of the keys. Code The code below must be inserted in the textFieldHandler.js file: var myElement = document.getElementById( 'textField' ); textFieldRange( myElement ).moveCaret( caretPosition ); Running Below is the running example, obviously slightly improved: Lorem ipsum dolor sit amet consectetur adipisicing elit. Nam impedit accusantium repudiandae? Velit consequuntur illo aut, laudantium eligendi nesciunt odio consectetur porro et laborum pariatur nostrum sunt, officiis, natus cum! 37 - ArrowLeft 38 - ArrowUp 39 - ArrowRight 40 - ArrowDown 35 - End 36 - Home 33 - PageUp 34 - PageDown ",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/getting-started/"
	},
	"78":{
		"documentContentType":"article",
		"title":" Infrastructure – textFieldRangeJS | FlyNeves ",
		"description":"Understand a little about what happens internally in textFieldRangeJS.",
		"keywords":"",
		"h1":" Infrastructure ",
		"h2":" Inspiration Structure Operation Closure ",
		"h3":" Facade ",
		"mainText":" Infrastructure Understand a little about what happens internally in textFieldRangeJS. Inspiration The inspiration for the development of this library came during the process of developing another project, in which we will not go into details. It was necessary to control the user's actions in the text field, in addition to facilitating its usability. Structure When starting and during the process of developing the source code, the modeling was based on the Design Pattern: Facade . We will not go into details about these standards, but we will talk about their application in our source code. Facade The motivation for its use was to structure a system in subsystems to help reduce its complexity. We will not be identifying the elements, but it is very clear that the Facade class is the textFieldRange function, as it knows which subsystem classes are responsible for the call and correctly delegates the customer calls to the subsystem objects. The implementation of the design pattern mentioned above, guided the source code of our library, enabling low coupling, in which each function, object or class has its responsibilities and that do not exceed its limits. This makes the code more readable, allowing the developer to understand it and, if necessary, make changes that will contribute to its use. Operation The textFieldRangeJS library was developed to obtain data from text fields and perform actions on them, from obtaining the cursor position to simulating the user's movements when pressing a key. When calling the textFieldRange function, passing the text input element as an argument, an object will be returned containing several methods and properties for obtaining data, manipulation and actions in the text field. To avoid the need to always call the main method: textFieldRange (element) , just add the object to a variable, this way you can use it whenever necessary throughout the code: var myElement = document.getElementById( 'textarea' ); var myElementRange = textFieldRange( element ); Closure textFieldRangeJS is simple and straightforward to solve the problems encountered when dealing with HTML text input elements, with precision, good performance and useful features. ",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/infrastructure/"
	},
	"79":{
		"documentContentType":"article",
		"title":" insert() method – textFieldRangeJS | FlyNeves ",
		"description":"Insert a string at the position of the caret in the text field.",
		"keywords":"",
		"h1":" insert() method ",
		"h2":" Description Syntax Browser Support ",
		"h3":" Arguments Return value ",
		"mainText":" insert() method Insert a string at the position of the caret in the text field. Description This method expect arguments. Arguments string This argument is mandatory. Specifies the string to be used by the method. select This argument is optional. Specifies whether to select the new string. Return value The returned value is the updated textFieldRange object. Syntax textFieldRange( element ).insert( 'myString' ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/insert/"
	},
	"80":{
		"documentContentType":"article",
		"title":" textFieldRangeJS Library – textFieldRangeJS | FlyNeves ",
		"description":"Unifies the properties and methods of text range objects: ( Selection and createTextRange() ), implementing fantastic features and making it extremely simple to use.",
		"keywords":"",
		"h1":" Introduction ",
		"h2":" A brief look Read more ",
		"h3":" Moving the caret Get the caret position ",
		"mainText":" Introduction Unifies the properties and methods of text range objects: ( Selection and createTextRange() ), implementing fantastic features and making it extremely simple to use. A brief look Two of its incredible features are briefly described below: Moving the caret Move the caret in the text field the same way as when the user presses the arrow keys. This task is extremely simple, obtaining the element's textFieldRange object, and using the method moveCaret() , with a command line it would be solved, see the code below. textFieldRange( element ).moveCaret( keyCode ); Perhaps you were a little confused by the code, as there was no explanation, don't worry, it's just a tasting, read more about the object returned from textFieldRange and the moveCaret method in the library documentation. Get the caret position When obtaining the element's textFieldRange object, you will see some properties about the current caret position in the text field. In the code below we would be using the top property . var caretPosition = textFieldRange( element ).top; Read more Read the library documentation , it is simple and easy to learn.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/introduction/"
	},
	"81":{
		"documentContentType":"article",
		"title":" left property – textFieldRangeJS | FlyNeves ",
		"description":"The current offset of the caret in relation to the left delimiter of the text field display frame.",
		"keywords":"",
		"h1":" left property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" left property The current offset of the caret in relation to the left delimiter of the text field display frame. Detail This is a read-only property, that is, its value must not be changed. Description If you define the CSS properties in your element: (padding: x; or border-width: x;), this value is not counted, because the property refers only to the element's frame where text is allowed to be added. Syntax var left = textFieldRange( element ).left; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/left/"
	},
	"82":{
		"documentContentType":"article",
		"title":" lineHeight property – textFieldRangeJS | FlyNeves ",
		"description":"The current height in px of the lines contained in the text field.",
		"keywords":"",
		"h1":" lineHeight property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" lineHeight property The current height in px of the lines contained in the text field. Detail This is a read-only property, that is, its value must not be changed. Description If you define the CSS line-height property in your element, using a unit of measurement other than px, the value returned will be the conversion of the value to px. Syntax var lineHeight = textFieldRange( element ).lineHeight; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/lineHeight/"
	},
	"83":{
		"documentContentType":"article",
		"title":" lines() method – textFieldRangeJS | FlyNeves ",
		"description":"Gets all lines contained in the text field.",
		"keywords":"",
		"h1":" lines() method ",
		"h2":" Description Syntax Browser Support ",
		"h3":" Return value ",
		"mainText":" lines() method Gets all lines contained in the text field. Description This method does not expect any arguments. Return value This method can accurately return an array containing the respective lines in the text field at their positions. Syntax var lines = textFieldRange( element ).lines(); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/lines/"
	},
	"84":{
		"documentContentType":"article",
		"title":" moveCaret() method – textFieldRangeJS | FlyNeves ",
		"description":"Move the caret in the text field.",
		"keywords":"",
		"h1":" moveCaret() method ",
		"h2":" Description Syntax Browser Support ",
		"h3":" Arguments Return value ",
		"mainText":" moveCaret() method Move the caret in the text field. Description This method expect arguments. Arguments keyCode This argument is mandatory. Allowed values 33: Position the caret on a line one page above the line that is currently positioned. 34: Position the caret on a line one page below the line that is currently positioned. 35: Position the caret on the last character of the line that is currently positioned. 36: Position the caret on the first character of the line currently positioned. 37: Position the caret before the first character to the left of your current position. 38: Position the caret one line above your current position. 39: Position the caret after the first character to the right of your current position. 40: Position the caret one line below your current position. In cases where there are no more lines for the caret to move, if you pass the keyCode that your action refers to when moving between the lines: There are no more lines up, but the keyCode passed was: 33 or 38 , the caret will be positioned at the first character of the line, which is currently positioned. There are no more lines down, but the keyCode passed was: 34 or 40 , the caret will be positioned at the last character of the line, which is currently positioned. Return value The returned value is the updated textFieldRange object. Syntax textFieldRange( element ).moveCaret( keyCode ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/moveCaret/"
	},
	"85":{
		"documentContentType":"article",
		"title":" numberOfLines property – textFieldRangeJS | FlyNeves ",
		"description":"The number of lines contained in the text field.",
		"keywords":"",
		"h1":" numberOfLines property ",
		"h2":" Detail Syntax Browser Support ",
		"h3":"",
		"mainText":" numberOfLines property The number of lines contained in the text field. Detail This is a read-only property, that is, its value must not be changed. Syntax var numberOfLines = textFieldRange( element ).numberOfLines; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/numberOfLines/"
	},
	"86":{
		"documentContentType":"article",
		"title":" offsetLeft property – textFieldRangeJS | FlyNeves ",
		"description":"The current caret displacement, including locomotion of the scroll in relation to the left delimiter of the frame display text field.",
		"keywords":"",
		"h1":" offsetLeft property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" offsetLeft property The current caret displacement, including locomotion of the scroll in relation to the left delimiter of the frame display text field. Detail This is a read-only property, that is, its value must not be changed. Description The current cursor displacement, including locomotion of the scroll in relation to the left delimiter of the frame display text field. Syntax var offsetLeft = textFieldRange( element ).offsetLeft; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/offsetLeft/"
	},
	"87":{
		"documentContentType":"article",
		"title":" offsetTop property – textFieldRangeJS | FlyNeves ",
		"description":"O deslocamento atual do cursor, incluindo a locomoção da rolagem em relação ao limite superior do quadro de exibição do campo de texto.",
		"keywords":"",
		"h1":" offsetTop property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" offsetTop property O deslocamento atual do cursor, incluindo a locomoção da rolagem em relação ao limite superior do quadro de exibição do campo de texto. Detail This is a read-only property, that is, its value must not be changed. Description The current cursor displacement, including locomotion of the scroll in relation to the left delimiter of the frame display text field. Syntax var offsetTop = textFieldRange( element ).offsetTop; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/offsetTop/"
	},
	"88":{
		"documentContentType":"article",
		"title":" padding property – textFieldRangeJS | FlyNeves ",
		"description":"The padding of the element",
		"keywords":"",
		"h1":" padding property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":" Object properties: ",
		"mainText":" padding property The padding of the element Detail This is a read-only property, that is, its value must not be changed. Description If you set the CSS padding property on your element using a unit of measurement other than px, the value of the object's properties will convert the value to px. Object properties: top The upper padding of the text entry element. left The left padding of the text entry element. right The right padding of the text entry element. bottom The bottom padding of the text entry element. Syntax var padding = textFieldRange( element ).padding; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/padding/"
	},
	"89":{
		"documentContentType":"article",
		"title":" refresh() method – textFieldRangeJS | FlyNeves ",
		"description":"Updates the object",
		"keywords":"",
		"h1":" refresh() method ",
		"h2":" Description Syntax Browser Support ",
		"h3":" Return value ",
		"mainText":" refresh() method Updates the object's property values. Description This method does not expect any arguments. Return value The returned value is the updated textFieldRange object. Syntax textFieldRange( element ).refresh(); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/refresh/"
	},
	"90":{
		"documentContentType":"article",
		"title":" replaceSelection() method – textFieldRangeJS | FlyNeves ",
		"description":"Replaces the string selected in the text field.",
		"keywords":"",
		"h1":" replaceSelection() method ",
		"h2":" Description Syntax Browser Support ",
		"h3":" Arguments Return value ",
		"mainText":" replaceSelection() method Replaces the string selected in the text field. Description This method expect arguments. Arguments string This argument is mandatory. Specifies the character string to be used by the method. select This argument is optional. Specifies whether the new string is to be selected. Return value The returned value is the updated textFieldRange object. Syntax textFieldRange( element ).replaceSelection( 'string' ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/replaceSelection/"
	},
	"91":{
		"documentContentType":"article",
		"title":" Rules of use – textFieldRangeJS | FlyNeves ",
		"description":"Know and understand the rules for using the textFieldRangeJS library.",
		"keywords":"",
		"h1":" Rules of use ",
		"h2":" Support for HTML elements Defining lines in the text field Character \r Performance ",
		"h3":"",
		"mainText":" Rules of use Know and understand the rules for using the textFieldRangeJS library. Support for HTML elements The features of the textFieldRangeJS library are only available for the elements: &lt;input&gt; and &lt;textarea&gt; . Defining lines in the text field The lines in the text field are defined by line breaks ('\n' or '\r\\n') and by the number of times there should be an overflow and not hear, giving rise to a new line. Character \r The library's methods related to position and selection, ignore the \r character, so the operation of the library will have the same behavior in all browsers. Performance For best library performance, it is not recommended to exceed more than 5000 characters or 200 lines in your text field. ",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/rules-of-use/"
	},
	"92":{
		"documentContentType":"article",
		"title":" select() method – textFieldRangeJS | FlyNeves ",
		"description":"Select a string in the text field.",
		"keywords":"",
		"h1":" select() method ",
		"h2":" Description Syntax Browser Support ",
		"h3":" Arguments Return value ",
		"mainText":" select() method Select a string in the text field. Description This method expect arguments. Arguments selectionStart This argument is optional. Specifies the position of the first character to start the selection. selectionEnd This argument is optional. Specifies the position of the last character at the end of the selection. If the selectionEnd argument is not passed, the method will place the cursor in the position passed to the selectionStart argument. If no arguments are passed, the method will select all text from the text field. Return value The returned value is the updated textFieldRange object. Syntax textFieldRange( element ).select( selectionStart, selectionEnd ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/select/"
	},
	"93":{
		"documentContentType":"article",
		"title":" selection property – textFieldRangeJS | FlyNeves ",
		"description":"The string selected in the text field.",
		"keywords":"",
		"h1":" selection property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" selection property The string selected in the text field. Detail This is a read-only property, that is, its value must not be changed. Description If there is no selection in the text field, the value is an empty string. Syntax var selection = textFieldRange( element ).selection; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/selection/"
	},
	"94":{
		"documentContentType":"article",
		"title":" selectionEnd property – textFieldRangeJS | FlyNeves ",
		"description":"The position of the last character of the current selection in the text field.",
		"keywords":"",
		"h1":" selectionEnd property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" selectionEnd property The position of the last character of the current selection in the text field. Detail This is a read-only property, that is, its value must not be changed. Description If there is no selection in the text field, the value will refer to the position of the first character before the current caret position in the text field. Syntax var selectionEnd = textFieldRange( element ).selectionEnd; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/selectionEnd/"
	},
	"95":{
		"documentContentType":"article",
		"title":" selectionStart property – textFieldRangeJS | FlyNeves ",
		"description":"The position of the first character of the current selection in the text field.",
		"keywords":"",
		"h1":" selectionStart property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" selectionStart property The position of the first character of the current selection in the text field. Detail This is a read-only property, that is, its value must not be changed. Description If there is no selection in the text field, the value will refer to the position of the first character before the current caret position in the text field. Syntax var selectionStart = textFieldRange( element ).selectionStart; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/selectionStart/"
	},
	"96":{
		"documentContentType":"article",
		"title":" setCaret() method – textFieldRangeJS | FlyNeves ",
		"description":"Defines a new position for the caret in the text field.",
		"keywords":"",
		"h1":" setCaret() method ",
		"h2":" Description Syntax Browser Support ",
		"h3":" Arguments Return value ",
		"mainText":" setCaret() method Defines a new position for the caret in the text field. Description This method expect arguments. Arguments lineOrPosition This argument is mandatory. Specifies the new caret line or position. positionInLine This argument is optional. The new caret position on the line. If only one argument is passed to this method, it will be understood that the value refers to the new caret position in the text field. If two arguments were passed to this method, it will be understood that the first argument refers to the line on which you want to place the caret, and the second to the position on the line. If the value of the second argument is greater than the number of characters on the line, the caret is positioned at the end of the line. Negative values for the second argument will be understood as the subtraction of the number of characters in the line, by the passed value. That is, if you pass -1 , it means that the caret will be positioned one character before the last character of the line. If you move on to the second argument, the value -0.1 , the caret will be positioned at the end of the line. Return value The returned value is the updated textFieldRange object. Syntax textFieldRange( element ).setCaret( lineOrPosition , positionInLine ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/setCaret/"
	},
	"97":{
		"documentContentType":"article",
		"title":" size() method – textFieldRangeJS | FlyNeves ",
		"description":"Simulates the entry of a string in the text field.",
		"keywords":"",
		"h1":" size() method ",
		"h2":" Description Syntax Browser Support ",
		"h3":" Arguments Return value Object properties: ",
		"mainText":" size() method Simulates the entry of a string in the text field. Description This method expect arguments. Arguments string This argument is mandatory. Specifies the string to be used by the method. noRemove This argument is optional. The method will clone the text field element to obtain the property values, that is, it will insert elements into the document and when they are no longer needed, remove them. Using this method in a repeating structure is very browser-intensive. This argument can be used to prevent the process from slowing down by passing true . Example textFieldRange( element ).size( string, true ); When it is no longer necessary to preserve the elements inserted by the method, just call it again, passing only false . Example textFieldRange( element ).size( false ); Return value The returned value is an object. Object properties: height Returns the height in px of the string. width Returns the width in px of the string. charHeight Returns the current height in px of the characters in the string. lineHeight Returns the height in px of the lines contained in the string. Syntax textFieldRange( element ).size( 'string' ); Browser Support This method has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/size/"
	},
	"98":{
		"documentContentType":"article",
		"title":" textFieldHeight property – textFieldRangeJS | FlyNeves ",
		"description":"The height of the text entry field.",
		"keywords":"",
		"h1":" textFieldHeight property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" textFieldHeight property The height of the text entry field. Detail This is a read-only property, that is, its value must not be changed. Description The text entry field is the frame of the element where the text can be added. Syntax var textFieldHeight = textFieldRange( element ).textFieldHeight; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/textFieldHeight/"
	},
	"99":{
		"documentContentType":"article",
		"title":" textFieldWidth property – textFieldRangeJS | FlyNeves ",
		"description":"The width of the text entry field.",
		"keywords":"",
		"h1":" textFieldWidth property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" textFieldWidth property The width of the text entry field. Detail This is a read-only property, that is, its value must not be changed. Description The text entry field is the frame of the element where the text can be added. Syntax var textFieldWidth = textFieldRange( element ).textFieldWidth; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/textFieldWidth/"
	},
	"100":{
		"documentContentType":"article",
		"title":" top property – textFieldRangeJS | FlyNeves ",
		"description":"The current offset of the cursor, in relation to the upper delimiter of the text field display frame.",
		"keywords":"",
		"h1":" top property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" top property The current offset of the cursor, in relation to the upper delimiter of the text field display frame. Detail This is a read-only property, that is, its value must not be changed. Description The current cursor displacement, including locomotion of the scroll in relation to the left delimiter of the frame display text field. Syntax var top = textFieldRange( element ).top; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/top/"
	},
	"101":{
		"documentContentType":"article",
		"title":" viewLeft property – textFieldRangeJS | FlyNeves ",
		"description":"The current offset of the caret, in relation to the left delimiter of the viewport.",
		"keywords":"",
		"h1":" viewLeft property ",
		"h2":" Detail Syntax Browser Support ",
		"h3":"",
		"mainText":" viewLeft property The current offset of the caret, in relation to the left delimiter of the viewport. Detail This is a read-only property, that is, its value must not be changed. Syntax var viewLeft = textFieldRange( element ).viewLeft; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/viewLeft/"
	},
	"102":{
		"documentContentType":"article",
		"title":" viewTop property – textFieldRangeJS | FlyNeves ",
		"description":"The current offset of the caret, in relation to the top delimiter of the viewport.",
		"keywords":"",
		"h1":" viewTop property ",
		"h2":" Detail Syntax Browser Support ",
		"h3":"",
		"mainText":" viewTop property The current offset of the caret, in relation to the top delimiter of the viewport. Detail This is a read-only property, that is, its value must not be changed. Syntax var viewTop = textFieldRange( element ).viewTop; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/viewTop/"
	},
	"103":{
		"documentContentType":"article",
		"title":" x property – textFieldRangeJS | FlyNeves ",
		"description":"The current offset of the caret in relation to the x delimiter of the text field display frame.",
		"keywords":"",
		"h1":" x property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" x property The current offset of the caret in relation to the left delimiter of the text field display frame. Detail This is a read-only property, that is, its value must not be changed. Description If you define the CSS properties in your element: (padding: x; or border-width: x;), this value is not counted, because the property refers only to the element's frame where text is allowed to be added. Syntax var x = textFieldRange( element ).x; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/x/"
	},
	"104":{
		"documentContentType":"article",
		"title":" y property – textFieldRangeJS | FlyNeves ",
		"description":"The current offset of the cursor, in relation to the upper delimiter of the text field display frame.",
		"keywords":"",
		"h1":" y property ",
		"h2":" Detail Description Syntax Browser Support ",
		"h3":"",
		"mainText":" y property The current offset of the cursor, in relation to the upper delimiter of the text field display frame. Detail This is a read-only property, that is, its value must not be changed. Description The current cursor displacement, including locomotion of the scroll in relation to the left delimiter of the frame display text field. Syntax var y = textFieldRange( element ).y; Browser Support This property has the same compatibility table as the library, that is, just look at the library support table.",
		"url":"https://www.flyneves.com/en-US/projects/textFieldRangeJS/1.0/documentation/y/"
	}
}