{
	"0":{
		"documentContentType":"other",
		"title":" FlyNeves ",
		"description":"Aprenda, desenvolva e compartilhe, porque programar também é divertido — FlyNeves",
		"keywords":"",
		"h1":" Bem-vindo desenvolvedor ",
		"h2":"",
		"h3":"",
		"mainText":" Bem-vindo desenvolvedor FlyNeves é um site lançado recentemente, com o objetivo de desenvolver projetos open source para diferentes tecnologias, com o lema: aprender, desenvolver e compartilhar, porque programar também é divertido. $ Em nenhum momento nossos projetos visam o lucro. Gostamos de inovar, desenvolver, ajudar quem nos ajudou, pois durante nossas carreiras em algum momento utilizamos alguma ferramenta livre. Estamos em construção. Tudo relacionado ao site e aos projetos foi desenvolvido por um único desenvolvedor. Curta ou participe de nossas páginas sociais, isso nos incentiva a manter este site. ",
		"url":"https://www.flyneves.com/pt-BR/"
	},
	"1":{
		"documentContentType":"other",
		"title":" Página não encontrada! - FlyNeves ",
		"description":"",
		"keywords":"",
		"h1":"",
		"h2":"",
		"h3":"",
		"mainText":"",
		"url":"https://www.flyneves.com/pt-BR/perdido-no-site/"
	},
	"2":{
		"documentContentType":"other",
		"title":" Resultados — FlyNeves ",
		"description":"",
		"keywords":"",
		"h1":"",
		"h2":"",
		"h3":"",
		"mainText":"",
		"url":"https://www.flyneves.com/pt-BR/pesquisando-no-site/"
	},
	"3":{
		"documentContentType":"other",
		"title":" Projetos desenvolvidos — FlyNeves ",
		"description":"Conheça nosso inventário de projetos: bibliotecas, algoritmos e outros.",
		"keywords":"",
		"h1":" Projetos desenvolvidos ",
		"h2":"",
		"h3":"",
		"mainText":" Projetos desenvolvidos Conheça nosso inventário de projetos: bibliotecas, algoritmos e outros. ",
		"url":"https://www.flyneves.com/pt-BR/projetos/"
	},
	"4":{
		"documentContentType":"other",
		"title":" Versões – controlAnimationJS | FlyNeves ",
		"description":"Nesta página, você encontrará links para todas as versões da biblioteca controlAnimation.",
		"keywords":"",
		"h1":" Versões ",
		"h2":"",
		"h3":"",
		"mainText":" Versões Nesta página, você encontrará links para todas as versões da biblioteca controlAnimation. controlAnimation – 1.0 ",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/"
	},
	"5":{
		"documentContentType":"other",
		"title":" Versões – textFieldRangeJS | FlyNeves ",
		"description":"Nesta página, você encontrará links para todas as versões da biblioteca textFieldRangeJS.",
		"keywords":"",
		"h1":" Versões ",
		"h2":"",
		"h3":"",
		"mainText":" Versões Nesta página, você encontrará links para todas as versões da biblioteca textFieldRangeJS. textFieldRangeJS – 1.0 ",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/"
	},
	"6":{
		"documentContentType":"article",
		"title":" Introdução – controlAnimationJS | FlyNeves ",
		"description":"Desenvolvida para desenvolvedores criativos que não abrem mão do alto desempenho, oferecendo total controle sobre suas animações.",
		"keywords":"",
		"h1":" Introdução ",
		"h2":" “Cópia original” controlAnimationJS vs CSS Animations Fechamento Leia mais ",
		"h3":" Comparando a codificação ",
		"mainText":" Introdução Desenvolvida para desenvolvedores criativos que não abrem mão do alto desempenho, oferecendo total controle sobre suas animações. “Cópia original” Inspirado no modelo CSS para a criação de animações com @keyframes, a linha de aprendizado para usar esta biblioteca encurta consideravelmente. Mesmo que você não leia a documentação, dificilmente se perderá ao usá-la, com recursos, propriedades e métodos semelhantes e com a mesma estrutura de @keyframes, a codificação será sempre elegante e familiar. O principal ponto positivo desta biblioteca são as inúmeras possibilidades de criação de animações, simplicidade, elegância, e sua capacidade de trabalhar com diferentes e antigos navegadores, oferecendo entre eles excelente qualidade. controlAnimationJS vs CSS Animations CSS Animations adicionou recursos incríveis, porém, não oferece controle completo, reação às ações do usuário, obtenção de dados sobre o estado atual da animação e se você deseja suportar um navegador antigo, não estará disponível. A biblioteca controlAnimationJS atende a essas necessidades, trazendo funcionalidades semelhantes e adicionando novas, a codificação é mais simples e completa, pois com menos código você fará o mesmo, mas suportará todos os navegadores. Comparando a codificação Os exemplos abaixo são para comparação, neles estaríamos criando a mesma animação com controlAnimationJS e CSS Animations, visualmente você verá a diferença na codificação necessária. código controlAnimationJS var myAnimation = {}; myAnimation.element = myElement; myAnimation[ 0 ] = 'transform: rotate( 0deg )'; myAnimation[ 100 ] = 'rotate( 360deg )'; myAnimation.iterations = Infinity; myAnimation.duration = 2; controlAnimation.play( myAnimation ); Código de animações CSS @keyframes myAnimation { 0% { transform: rotate( 0deg ) } 100% { transform: rotate( 360deg ) } } @-webkit-keyframes myAnimation { 0% { transform: rotate( 0deg ) } 100% { transform: rotate( 360deg ) } } @-moz-keyframes myAnimation { 0% { transform: rotate( 0deg ) } 100% { transform: rotate( 360deg ) } } .myAnimation-element { -webkit-animation: myAnimation 2s infinite; -moz-animation: myAnimation 2s infinite; animation: myAnimation 2s infinite; } Fechamento Extremamente leve, poderosa, com muitos recursos e funcionalidades, controlAnimationJS é a biblioteca que muitos desenvolvedores estavam procurando. Leia mais Leia a documentação da biblioteca , é simples e fácil de aprender. ",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/"
	},
	"7":{
		"documentContentType":"other",
		"title":" Introdução – textFieldRangeJS | FlyNeves ",
		"description":"Unifica as propriedades e métodos de objetos de intervalo de texto: ( Selection e createTextRange() ), implementando recursos fantásticos e tornando-o extremamente simples de usar.",
		"keywords":"",
		"h1":" Introdução ",
		"h2":" Um breve olhar Leia mais ",
		"h3":" Movimentando o caret Obter a posição do caret ",
		"mainText":" Introdução Unifica as propriedades e métodos de objetos de intervalo de texto: ( Selection e createTextRange() ), implementando recursos fantásticos e tornando-o extremamente simples de usar. Um breve olhar Dois de seus incríveis recursos são descritos resumidamente a seguir: Movimentando o caret Mova o caret no campo de texto da mesma forma que quando o usuário pressiona as teclas de seta. Esta tarefa é extremamente simples, obtendo o objeto textFieldRange do elemento, e utilizando o método moveCaret() , com uma linha de comando seria resolvido: textFieldRange( element ).moveCaret( keyCode ); Talvez você tenha ficado um pouco confuso com o código, pois não havia explicação, não se preocupe, é apenas uma degustação, leia mais sobre o objeto retornado de textFieldRange e o método moveCaret na documentação da biblioteca. Obter a posição do caret Ao obter o objeto textFieldRange do elemento, você verá algumas propriedades sobre a posição atual do caret no campo de texto. No código abaixo estaríamos usando a propriedade top . var caretPosition = textFieldRange( element ).top; Leia mais Leia a documentação da biblioteca , é simples e fácil de aprender. ",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/"
	},
	"8":{
		"documentContentType":"article",
		"title":" Documentação – controlAnimationJS | FlyNeves ",
		"description":"Abaixo estão links para todas as páginas relacionadas à documentação da biblioteca controlAnimation.",
		"keywords":"",
		"h1":" Documentação ",
		"h2":"",
		"h3":"",
		"mainText":" Documentação Abaixo estão links para todas as páginas relacionadas à documentação da biblioteca controlAnimation. Tudo em uma página Infraestrutura Regras de uso Construindo keyframes addListener() addListenerAll() back() backAll() cancel() cancelAll() clone() config() create() get() getAll() go() goAll() pause() pauseAll() play() removeListener() removeListenerAll() restart() restartAll() resume() resumeAll() animationId call className delay direction duration easing element listenerFired fill insertStyle iterations iterationsComplete keepFrameStyle maxProgress name progress state styleBetweenFrames timeline $scroll-left $scroll-to $scroll-top Começando a usar ",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/"
	},
	"9":{
		"documentContentType":"other",
		"title":" Documentação em página única – controlAnimationJS | FlyNeves ",
		"description":"Esta página contém toda a documentação da biblioteca controlAnimation.",
		"keywords":"",
		"h1":" Documentação em página única Introdução Infraestrutura Regras de uso Método clone() Método config() Método play() Método resume() Método restart() Método restartAll() Método cancel() Método cancelAll() Método get() Método getAll() Método back() Método backAll() Método go() Método goAll() Método addListener() Método addListenerAll() Método removeListener() Método removeListenerAll() Construindo keyframes Propriedade animationId Propriedade call Propriedade className Propriedade delay Propriedade direction Propriedade duration Propriedade easing Propriedade element Propriedade listenerFired Propriedade fill Propriedade insertStyle Propriedade iterations Propriedade iterationsComplete Propriedade keepFrameStyle Propriedade maxProgress Propriedade name Método pause() Método pauseAll() Método play() Propriedade progress Propriedade state Propriedade styleBetweenFrames Propriedade timeline Começando a usar Tabela de suporte a navegadores ",
		"h2":" “Cópia original” controlAnimationJS vs CSS Animations Fechamento Leia mais Inspiração Estrutura Funcionamento Fechamento Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Direções Syntax Suporte a navegadores ",
		"h3":" Comparando a codificação Factory Method Facade Argumentos Valor de retorno Valor de retorno Argumentos Valor de retorno Valor de retorno Valor de retorno Valor de retorno Valor de retorno Valor de retorno Argumentos Valor de retorno Valor de retorno Argumentos Valor de retorno Argumentos Valor de retorno Argumentos Argumentos Argumentos Valor de retorno Argumentos Valor de retorno Argumentos Valor de retorno Argumentos Valor de retorno Valores aceitos Valor de retorno Valor de retorno Argumentos Valor de retorno true false Propriedades do objeto Atenção ",
		"mainText":" Documentação em página única Esta página contém toda a documentação da biblioteca controlAnimation. Introdução Desenvolvida para desenvolvedores criativos que não abrem mão do alto desempenho, oferecendo total controle sobre suas animações. “Cópia original” Inspirado no modelo CSS para a criação de animações com @keyframes, a linha de aprendizado para usar esta biblioteca encurta consideravelmente. Mesmo que você não leia a documentação, dificilmente se perderá ao usá-la, com recursos, propriedades e métodos semelhantes e com a mesma estrutura de @keyframes, a codificação será sempre elegante e familiar. O principal ponto positivo desta biblioteca são as inúmeras possibilidades de criação de animações, simplicidade, elegância, e sua capacidade de trabalhar com diferentes e antigos navegadores, oferecendo entre eles excelente qualidade. controlAnimationJS vs CSS Animations CSS Animations adicionou recursos incríveis, porém, não oferece controle completo, reação às ações do usuário, obtenção de dados sobre o estado atual da animação e se você deseja suportar um navegador antigo, não estará disponível. A biblioteca controlAnimationJS atende a essas necessidades, trazendo funcionalidades semelhantes e adicionando novas, a codificação é mais simples e completa, pois com menos código você fará o mesmo, mas suportará todos os navegadores. Comparando a codificação Os exemplos abaixo são para comparação, neles estaríamos criando a mesma animação com controlAnimationJS e CSS Animations, visualmente você verá a diferença na codificação necessária. código controlAnimationJS var myAnimation = {}; myAnimation.element = myElement; myAnimation[ 0 ] = 'transform: rotate( 0deg )'; myAnimation[ 100 ] = 'rotate( 360deg )'; myAnimation.iterations = Infinity; myAnimation.duration = 2; controlAnimation.play( myAnimation ); Código de animações CSS @keyframes myAnimation { 0% { transform: rotate( 0deg ) } 100% { transform: rotate( 360deg ) } } @-webkit-keyframes myAnimation { 0% { transform: rotate( 0deg ) } 100% { transform: rotate( 360deg ) } } @-moz-keyframes myAnimation { 0% { transform: rotate( 0deg ) } 100% { transform: rotate( 360deg ) } } .myAnimation-element { -webkit-animation: myAnimation 2s infinite; -moz-animation: myAnimation 2s infinite; animation: myAnimation 2s infinite; } Fechamento Extremamente leve, poderosa, com muitos recursos e funcionalidades, controlAnimationJS é a biblioteca que muitos desenvolvedores estavam procurando. Leia mais Leia a documentação da biblioteca , é simples e fácil de aprender. Infraestrutura Entenda um pouco sobre o que acontece internamente em controlAnimation. Inspiração Atualmente existem diversas bibliotecas JavaScript, (incríveis e poderosas), destinadas a construção de animações. Entretanto, acredito que em algum momento você também já tenha se feito os seguintes questionamentos: “Vale a pena usar uma biblioteca tão pesada na minha aplicação?” ou “Estou me tornando um desenvolvedor preguiçoso e não-criativo ao usar lógicas de animações prontas?”. Com a chegada da CSS3 Animations, essas e outras perguntas ficaram obsoletas, entretanto, ela não oferece ao desenvolvedor alguns recursos e funcionalidades que só o JavaScript é capaz de oferecer, se levarmos em consideração a compatibilidade com navegadores antigos, por ser algo recente CSS3 Animations não estará disponível para alguns deles. controlAnimationJS oferece recursos e funcionalidades semelhantes para o desenvolvedor e adiciona novos, sendo de alto desempenho e incrivelmente leve: 13,8 KB. Estrutura Ao iniciar e durante o processo de desenvolvimento do código fonte, a modelagem foi baseada nos Design Pattern: Factory Method e Facade . Não entraremos em detalhes sobre esses padrões, mas falaremos sobre sua aplicação em nosso código-fonte. Factory Method A lista abaixo identifica os elementos em nossa biblioteca de acordo com a estrutura Factory Method. 'A estrutura da forma como foi descrito no livro Design Patterns: Elements of Reusable Object-Oriented Software.' Creator(Criador abstrato): O método controlAnimation.create(), sua ação é: Criar um novo objeto de animação com propriedades e métodos que o desenvolvedor precisará, mas seu uso é opcional. ConcreteCreator(Criador concreto):O método controlAnimation.play( myAnimationObject ) recebe o objeto de animação criado pelo desenvolvedor, e a partir dele cria uma variação que será utilizada internamente pela biblioteca como objeto de controle e reação. Product(Produto abstrato): É o objeto que o desenvolvedor utilizará para construção de sua animação. ConcreteProduct(Produto concreto): Uma variação do objeto de animação do desenvolvedor utilizada internamente pela biblioteca, ela não possuirá apenas as propriedades do objeto do desenvolvedor, mas também propriedades que foram consideradas desnecessárias para o desenvolvedor Em nosso código o Padrão de Projeto (Design Pattern) Factory Method estimulou o baixo acoplamento, maior flexibilidade e a eliminar a necessidade de acoplar classes específicas para aplicação em nível de código. Entretanto sua implementação talvez não tenha sido exatamente como a teoria sugere, mas a acredito que o resultado tenha ficado agradável. Facade Embora não tenha ido a fundo em sua teoria, a motivação para sua utilização foi estruturar um sistema em subsistemas para auxiliar na redução de sua complexidade. Não iremos identificar os elementos como fizemos com o Padrão de Projeto (Design Pattern) anterior, mas fica muito claro que a classe Facade (Agrupadora) é o objeto controlAnimation, pois ele conhece quais as classes dos subsistemas são responsáveis pela chamada e delega chamadas do cliente aos objetos de subsistemas corretos. A implementação dos padrões de projeto citados acima, proporcionou ao código fonte de nossa biblioteca baixo acoplamento, no qual cada função, objeto ou classe tem uma responsabilidade de modo que não ultrapassam seus limites. Isso torna o código mais legível, possibilitando ao desenvolvedor seu entendimento e caso necessário, ele poderá fazer mudanças que venham agregar em sua utilização. Funcionamento Entenderemos o que acontece internamente do processo de inicialização à finalização da animação. Observe o fluxograma abaixo: controlAnimationJS Fluxograma Ao observar o fluxograma atentamente, notará que há uma seta vermelha apontando para um retângulo com a seguinte mensagem: “O objeto é ignorado” , evite que isso ocorra, pois a animação não continuará no fluxo e não será executada. A seguinte situação pode ocasionar essa mensagem: Quando o objeto de animação passado é invalido ou já está em uso. Observe também que há um retângulo com a mensagem: “Dados de animação carregados”. Preste atenção a isso, pois é incrível, o desempenho de execução de cada animação é otimizado exponencialmente, visto que cada animação ao sair da fila passará rapidamente por sua execução. Isso torna possível ter várias animações rodando simultaneamente sem exigir muito do aplicação. Também interessante é a mensagem de condição contida em uma das formas de losango: “O objeto foi atualizado?”, Isso indica que quando a animação sai da fila para ser executada, uma verificação rápida é feita para identificar se o objeto de animação do desenvolvedor foi submetido alguma mudança. Assim, o desenvolvedor não precisa invocar nenhum método de atualização quando muda algo em seu objeto de animação. Observe também que, quando há uma mudança, a animação é atualizada e reproduzida. Fechamento Inicialmente controlAnimationJS estava sendo desenvolvida para ser um motor da animação, isto é, faria a parte interna e não a visual. Cada trecho do código foi pensado, revisado e otimizado para fazer o melhor uso possível dos recursos sem exigir muito da aplicação. Próximo ao final de sua construção, percebeu-se quão pequeno seria o trecho de código necessário para fazê-la também operar a parte visual, atualmente temos uma biblioteca leve e robusta capaz de realizar animações simples e complexas, sem deixar de lado o incrível motor de animação, que faz com que os limites desta biblioteca seja a sua criatividade. Regras de uso Conheça e compreenda as regras de uso da biblioteca controlAnimation. A lista abaixo descreve alguns cuidados a serem tomados ao usar controlAnimation. – Ao criar uma animação usando o estilo nos keyframes, você deve sempre definir os valores iniciais de todas as propriedades que usará na chave 0. – Ao criar uma animação utilizando o estilo nos keyframes, lembre-se de que não há conversão dos valores das propriedades, ou seja, a unidade de medida inicial é sempre mantida. – Ao criar uma animação utilizando o estilo nos keyframes, com a intenção de utilizar propriedades CSS que recebem valores relacionados às cores, só é permitido utilizar cores em RGB, RGBA e HEXADECIMAL. – Ao criar uma animação usando o estilo nos keyframes, lembre-se de que a biblioteca não faz a transição de valores não numéricos para numéricos, ou seja, se uma determinada propriedade CSS na chave 0 tiver o valor: centro e a próxima chave: 200px. Nada vai acontecer, porque a biblioteca não faz essa transição. – Ao criar uma animação usando estilo nos quadros-chave, e caso queira que uma propriedade aceite valores flutuantes é necessário que na chave 0, no valor da propriedade insira um . , veja o exemplo abaixo: myAnimationObject[ 0 ] = ' top: 0.px'; Obviamente, se a propriedade já vai receber um valor flutuante na chave 0 , não há necessidade de inserir o . . Método clone() Clona o objeto de animação. Detalhe Este método pertence ao objeto da animação. Descrição Este método espera argumentos. Argumentos amount Tipo esperado: number || object. Este argumento é opcional. Especifica o número de clones. Você também pode passar um array com elementos HTML. Um objeto será criado para cada elemento da matriz e a propriedade element será definida com o elemento. O valor padrão é: 1. Valor de retorno O valor retornado é uma matriz com clones do objeto de animação. Syntax var myClones = myAnimationObject.clone( amount ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Método config() Define os valores padrão para as propriedades dos objetos de animação. Detalhe Este método pertence ao objeto controlAnimation. Descrição Este método não espera argumentos. Valor de retorno O valor retornado é um objeto. Se houver alteração em alguma de suas propriedades, ao iniciar o novo objeto de animação ele já terá os novos valores padrão. Syntax var animationObjectsConfig = controlAnimation.config(); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Método play() Executa a nova animação. Detalhe Este método pertence ao objeto controlAnimation. Descrição Este método espera argumentos. Argumentos object Este argumento é obrigatório. Específica o objeto da animação. Tipo esperado: object. O objeto a ser passado também pode ser uma matriz contendo objetos de animação. all This argument is optional. When passing multiple animation objects with identical styles, pass true to improve performance. Tipo esperado: boolean. Valor de retorno Nenhum valor é retornado. Syntax controlAnimation.play( object ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Método resume() Retoma a animação. Detalhe Este método pertence ao objeto da animação. Descrição Este método não espera argumentos. Valor de retorno Nenhum valor é retornado. Syntax myAnimationObject.resume(); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Método restart() Reinicia a animação. Detalhe Este método pertence ao objeto da animação. Descrição Este método não espera argumentos. Valor de retorno Nenhum valor é retornado. Syntax myAnimationObject.restart(); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Método restartAll() Reinicie todas as animações. Detalhe Este método pertence ao objeto controlAnimation. Descrição Este método não espera argumentos. Valor de retorno Nenhum valor é retornado. Syntax controlAnimation.restartAll(); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Método cancel() Cancela a execução da animação. Detalhe Este método pertence ao objeto da animação. Descrição Este método não espera argumentos. Ao contrário do método pause , este método apaga os dados da animação desnecessários depois de cancelada. Valor de retorno Nenhum valor é retornado. Syntax myAnimationObject.cancel(); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Método cancelAll() Cancela a execução de todas as animações. Detalhe Este método pertence ao objeto controlAnimation. Descrição Este método não espera argumentos. Ao contrário do método pauseAll , este método apaga os dados desnecessários da animação após o cancelamento. Valor de retorno Nenhum valor é retornado. Syntax controlAnimation.cancelAll(); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Método get() Obtém um objeto de animação. Detalhe Este método pertence ao objeto controlAnimation. Descrição Este método espera argumentos. Argumentos name Este argumento é obrigatório. Especifica o identificador de animação do objeto. Tipo esperado: string || number. O identificador da animação é o valor da propriedade name. Valor de retorno O valor retornado é o objeto em caso de sucesso ou false em caso de falha. Syntax controlAnimation.get( name ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Método getAll() Obtém todos os objetos de animação. Detalhe Este método pertence ao objeto controlAnimation. Descrição Este método não espera argumentos. Valor de retorno O valor retornado são os objetos em uma matriz em caso de sucesso ou false em caso de falha. Syntax controlAnimation.getAll(); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Método back() Faz com que o andamento da interação da animação volte a uma determinada posição e, após o retorno ser concluído, continue a interação. Detalhe Este método pertence ao objeto da animação. Descrição Este método espera argumentos. Argumentos goTo Este argumento é obrigatório. Especifica a posição para a qual a animação deve retornar. Tipo esperado: number. Valor de retorno Nenhum valor é retornado. Syntax myAnimationObject.back( goTo ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Método backAll() Faz com que o andamento da interação de todas as animações retorne a uma determinada posição e, após o retorno ser concluído, continue a interação. Detalhe Este método pertence ao objeto controlAnimation. Descrição Este método espera argumentos. Argumentos goTo Este argumento é obrigatório. Especifica a posição para a qual as animações deve retornar. Tipo esperado: number. Valor de retorno Nenhum valor é retornado. Syntax controlAnimation.backAll( goTo ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Método go() Faz com que a interação da animação retorne a uma determinada posição e, após o retorno ser concluído, ela termina. Detalhe Este método pertence ao objeto da animação. Descrição Este método espera argumentos. Argumentos goTo Este argumento é obrigatório. Especifica a posição para a qual a animação deve retornar. Tipo esperado: number. Syntax myAnimationObject.go( goTo ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Método goAll() Faz com que a interação de todas as animações retorne a uma determinada posição e, após o retorno ser concluído, finaliza cada uma. Detalhe Este método pertence ao objeto controlAnimation. Descrição Este método espera argumentos. Argumentos goTo Este argumento é obrigatório. Especifica a posição para a qual a animação deve retornar. Tipo esperado: number. Syntax controlAnimation.goAll( goTo ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Método addListener() Adiciona ouvintes à animação. Detalhe Este método pertence ao objeto da animação. Descrição Este método espera argumentos. Argumentos listener Este argumento é obrigatório. Específica o ouvinte a ser anexado ao objeto da animação. Tipo esperado: string. Abaixo está uma lista de valores aceitos para este argumento: start: Dispara quando a animação começa. end: Dispara quando a animação termina. iterations: Dispara quando a interação da animação é concluída. changekeys: Dispara quando o progresso da animação ultrapassa o valor de uma chave de quadro. callback Tipo esperado: function. Este argumento é obrigatório. Especifica a função a ser chamada. Valor de retorno Nenhum valor é retornado. Syntax myAnimationObject.addListener( listener, callback ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Método addListenerAll() Adiciona ouvintes a todas as animações. Detalhe Este método pertence ao objeto controlAnimation. Descrição Este método espera argumentos. Argumentos listener Este argumento é obrigatório. Específica o ouvinte a ser anexado aos objetos das animações. Tipo esperado: string. Abaixo está uma lista de valores aceitos para este argumento: start: Dispara quando a animação começa. end: Dispara quando a animação termina. iterations: Dispara quando a interação da animação é concluída. changekeys: Dispara quando o progresso da animação ultrapassa o valor de uma chave de quadro. callback Tipo esperado: function. Este argumento é obrigatório. Especifica a função a ser chamada. Valor de retorno Nenhum valor é retornado. Syntax controlAnimation.addListenerAll( listener, callback ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Método removeListener() Remove ouvintes da animação. Detalhe Esse método pertence ao objeto de animação. Descrição Esse método espera argumentos. Argumentos listener Abaixo está uma lista de valores aceitos para este argumento: start: Dispara quando a animação começa. end: Dispara quando a animação for concluída. iterations: Dispara quando a interação da animação é concluída. changekeys: Dispara quando o progresso da animação excede o valor de uma chave de quadro. Este argumento é obrigatório. Especifica o evento a ser removido do objeto de animação. Tipo esperado: string. callback Este argumento é obrigatório. Especifica a função a ser chamado. Tipo esperado: function. Valor de retorno Nenhum valor é retornado. Syntax myAnimationObject.removeListener( listener, callback ); Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Método removeListenerAll() Remove ouvintes de todas as animações. Detalhe Este método pertence ao objeto controlAnimation. Descrição Este método espera argumentos. Argumentos listener Abaixo está uma lista de valores aceitos para este argumento: start: Dispara quando a animação começa. end: Dispara quando a animação termina. iterations: Dispara quando a interação da animação é concluída. changekeys: Dispara quando o progresso da animação ultrapassa o valor de uma chave de quadro. Este argumento é obrigatório. Especifica o ouvinte a ser removido dos objetos de animação. Tipo esperado: string. callback Tipo esperado: function. Este argumento é obrigatório. Especifica a função a ser chamada. Valor de retorno Nenhum valor é retornado. Syntax controlAnimation.removeListenerAll( listener, callback ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Construindo keyframes Compreenda o funcionamento e as regras de uso para a construção dos keyframes da animação. Detalhe Propriedades keyframes são de leitura e gravação. Propriedades keyframes pertence ao objeto da animação, e não ao objeto controlAnimation. Tipo esperado: object || boolean || string . Descrição Os keyframes são os momentos mais importantes de uma animação. Como o nome já diz, são a “chave” de todos os frames de uma animação, são responsáveis por criar o tempo e o ritmo corretos do movimento, por exemplo: apresentam diferenças nas ações de um personagem, uma mudança crucial no movimento ou mesmo uma ótima pose. Valores aceitos Compreenda os valores aceitos para cada keyframe e como usá-los. styleObject Defina um objeto com propriedades CSS, com nomenclatura JavaScript e o estilo CSS será aplicado aos elementos durante a animação. Veja o exemplo abaixo: myAnimationObject[ 0 ] = { borderWidth: '0px', top: '0px', left: '0px', } Nas chaves após a chave 0, você pode minimizar os nomes das propriedades e seus valores. myAnimationObject[ 0 ] = { borderWidth: '0px', top: '0px', left: '0px' } myAnimationObject[ 100 ] = { 0: '10', /* borderWidth: 10px */ 1: '10' /* top: 10px */, 2: '10' /* left: 10px */ } boolean Nenhuma ação é definida, mas a animação é executada e as propriedades do objeto de animação recebem atualizações. string Defina uma string de caracteres e ela será entendida como um estilo CSS e aplicada aos elementos durante a animação. Você também pode minimizar os nomes das propriedades, veja o exemplo abaixo: /* Quando a sequência das propriedades não é alterada. */ myAnimationObject[ 0 ] = ' border-width: 0px; top: 0px; left: 0px '; myAnimationObject[ 100 ] = '10; 200; 200;' /* O mesmo que: 'border-width: 10px; top: 200px; left: 200px'*/; /* ___________________________________________________*/ /* Quando a sequência das propriedades é alterada. */ myAnimationObject[ 0 ] = ' border-width: 0px; top: 0px; left: 0px '; myAnimationObject[ 100 ] = '1: 10; 2: 200; 0: 200;' /* O mesmo que: 'top: 10px; left: 200px; border-width: 200px'*/; /* ___________________________________________________*/ Da maneira como você inicia os valores de uma propriedade, você deve segui-los em todos os quadros-chave, exemplo: border-width: 1px 2px 3px 4px , a sequência de valores relacionados a border, deve ser mantida conforme foram iniciados. Syntax myAnimationObject[ 0 ] = ' top: 0px; left: 50px;...'; Propriedade animationId O identificador único de cada objeto de animação. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Descrição Esta propriedade é muito importante, pois é utilizada pela biblioteca para identificar cada um dos objetos de animação. Syntax var animationId = myAnimationObject.animationId; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade call Define uma função a ser chamada a cada intercalação. Detalhe Esta propriedade é de leitura e gravação. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Tipo esperado: function. Descrição Como a função definida será chamada a cada intercalação da animação, evite definir funções que exijam muito do navegador. Syntax myAnimationObject.call = myFunction; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade className Define o nome da classe CSS, a ser vinculada ao objeto de animação. Detalhe Esta propriedade é de leitura e gravação. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Tipo esperado: string. Descrição Ao inserir o estilo em quadros-chave e definir a propriedade insertStyle como auto ou tag , você precisará de um nome para a classe que será adicionada aos elementos, entretanto, a própria biblioteca já define um valor inicial para esta propriedade que pode ser mantido. Syntax myAnimationObject.className = myFunction; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade delay Define o atraso entre cada interação da animação. Detalhe Esta propriedade é de leitura e gravação. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Tipo esperado: number || boolean || undefined. Descrição Valores aceitos para esta propriedade: number: Define o atraso em segundos. false: Não há atraso. undefined: Não há atraso. O valor padrão é: false. Syntax myAnimationObject.delay = 5; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade direction Define a ordem de leitura dos keyframes, em um ciclo de animação. Detalhe Esta propriedade é de leitura e gravação. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Tipo esperado: string. Descrição Valores aceitos para esta propriedade: normal: A leitura dos keyframes acontece de forma crescente: chave inicial para chave final. reverse: A leitura dos keyframes acontece de forma decrescente: chave final para a chave inicial. alternate: A leitura dos keyframes acontece de forma alternada entre normal e reverse, em cada ciclo e utilizado uma forma diferente de leitura, iniciando da: normal. alternate-reverse: A leitura dos keyframes acontece de forma alternada entre normal e reverse, em cada ciclo e utilizado uma forma diferente de leitura, iniciando da: reverse. random-keys: A cada ciclo, uma chave dos keyframes é escolhida aleatoriamente como o valor máximo que a animação deve progredir, e a animação sempre começará a partir da chave 0 random-offset: Em cada ciclo, um valor de deslocamento entre as chaves dos keyframes é escolhido aleatoriamente como o valor máximo que a animação deve progredir, e a animação sempre iniciará da chave 0 . fluid-random-keys: Em cada ciclo, uma chave dos keyframes é escolhida aleatoriamente como o valor máximo que a animação deve progredir, e a animação sempre começará a partir do valor de progressão alcançado pelo ciclo anterior. fluid-random-offset: Em cada ciclo, um valor de deslocamento entre as chaves dos keyframes é escolhido aleatoriamente como o valor máximo que a animação deve progredir, e a animação sempre começará a partir do valor de progressão alcançado pelo ciclo anterior. O valor padrão é: normal. Syntax myAnimationObject.direction = 'random-keys'; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade duration Define a duração da animação. Detalhe Esta propriedade é de leitura e gravação. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Tipo esperado: number. Descrição O valor a ser definido indica a duração da animação em segundos. O valor padrão é: 3. Syntax myAnimationObject.duration = 5000; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade easing Define como a animação irá progredir durante sua execução. Detalhe Esta propriedade é de leitura e gravação. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Tipo esperado: function. Descrição A função a ser definida para esta propriedade, deve ser uma das funções de easing . Existem vários sites e projetos que apresentam e distribuem essas funções matemáticas. O valor padrão é: function linearTween( t, b, c, d ) { return c * t / d + b; }; Syntax myAnimationObject.easing = function easeInOutQuad( t, b, c, d ) { t /= d / 2; if ( t < 1 ) return c / 2 * t * t + b; t--; return -c / 2 * ( t * ( t -2 ) - 1 ) + b; }; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade element Define os elementos que sofrerão as mudanças de estilo. Detalhe Esta propriedade é de leitura e gravação. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Tipo esperado: object. Descrição O objeto a ser passado também pode ser uma matriz contendo elementos HTML. Syntax myAnimationObject.element = document.getElementsByTagName( 'div' ); Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade listenerFired O nome do ouvinte que foi acionado. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Descrição Esta propriedade pode ser usada para identificar o ouvinte recém-acionado. O valor padrão é: false,indicando que nenhum ouvinte foi acionado. Syntax var listenerFired = myAnimationObject.listenerFired; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade fill Define quais valores são aplicados pela animação, quando chega o fim de seus ciclos. Detalhe Esta propriedade é de leitura e gravação. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Tipo esperado: boolean || number. Descrição Valores aceitos para esta propriedade: true: Os últimos valores são mantidos. false: Nenhum valor é mantido. number: A animação é executada novamente até atingir o valor definido. O valor padrão é: false. Syntax myAnimationObject.fill = true; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade insertStyle Define o modo para inserir o estilo incluído nos keyframes. Detalhe Esta propriedade é de leitura e gravação. Tipo esperado: string. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Descrição Valores aceitos para esta propriedade: inline: O estilo é adicionado aos elementos pelo atributo de style HTML. tag: O estilo é adicionado aos elementos pela tag de estilo HTML, por meio da classe CSS, usando o valor da propriedade className como o nome da classe. auto: O estilo por meio da tag é adicionado apenas quando há mais de 1 elemento. O valor padrão é: auto. Syntax myAnimationObject.insertStyle = 'tag'; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade iterations Define o número de vezes que a animação deve ser executada. Detalhe Esta propriedade é de leitura e gravação. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Tipo esperado: number. Descrição Para que a animação seja executada infinitamente defina: Infinity. O valor padrão é: 1. Syntax myAnimationObject.iterations = 5; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade iterationsComplete O número de interações concluídas pela animação. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Descrição O valor padrão é: 0. Syntax var iterationsComplete = myAnimationObject.iterationsComplete; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade keepFrameStyle Define se deve manter o estilo de cada keyframe. Detalhe Esta propriedade é de leitura e gravação. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Tipo esperado: boolean. Descrição Valores aceitos para esta propriedade: true The style value contained in each keyframe is maintained. false Imagine que na construção da sua animação foram passados os seguintes keyframes: para inserir o estilo contido em cada um. myAnimationObject[ 0 ] = ' top: 0px; left:0'; myAnimationObject[ 33 ] = ' 0; 200'; myAnimationObject[ 66 ] = ' 0;'; myAnimationObject[ 100 ] = ' 200; 200'; Observe que no keyframe 33 , a propriedade de estilo CSS left alcançará 200, mas no próximo keyframe não há referência a ele. No caso atual, no próximo keyframe, a propriedade à left seria adicionada com o mesmo valor da chave inicial. O valor padrão é: false. Syntax myAnimationObject.keepFrameStyle = true; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade maxProgress Define o progresso máximo que a interação da animação pode alcançar. Detalhe Esta propriedade é de leitura e gravação. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Tipo esperado: number || object. Descrição Você também pode definir o valor da propriedade como uma matriz: myAnimationObject.maxProgress = [ 40, 70 , 90]; No exemplo acima, na primeira interação, o progresso da animação iria até 40 , e no segundo até 70 e assim por diante. Quando o valor da sequência de interação é maior do que o número de valores na matriz, você pode começar de novo: myAnimationObject.maxProgress = [ 40, 70 , 'restart']; Definir a string: 'restart' como o último valor do array fará com que a contagem dos valores do array comece novamente. Se não houver nenhum valor na matriz na posição indicada pelo número de interações concluídas, maxProgress retornará ao seu comportamento normal de acordo com a propriedade direction . Syntax myAnimationObject.maxProgress = 100; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade name Define o identificador do objeto da animação. Detalhe Esta propriedade é de leitura e gravação. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Tipo esperado: string || number. Descrição Se você não definir o valor desta propriedade, ele será definido com o valor da propriedade animationId . Syntax myAnimationObject.name = 'myAnimation'; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Método pause() Pausa a animação em execução. Detalhe Este método pertence ao objeto da animação. Descrição Este método não espera argumentos. Valor de retorno Nenhum valor é retornado. Syntax myAnimationObject.pause(); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Método pauseAll() Pausa todas as animações em execução. Detalhe Este método pertence ao objeto controlAnimation. Descrição Este método não espera argumentos. Valor de retorno Nenhum valor é retornado. Syntax controlAnimation.pauseAll(); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Método play() Executa a nova animação. Detalhe Este método pertence ao objeto controlAnimation. Descrição Este método espera argumentos. Argumentos object Este argumento é obrigatório. Específica o objeto da animação. Tipo esperado: object. O objeto a ser passado também pode ser uma matriz contendo objetos de animação. all This argument is optional. When passing multiple animation objects with identical styles, pass true to improve performance. Tipo esperado: boolean. Valor de retorno Nenhum valor é retornado. Syntax controlAnimation.play( object ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade progress O progresso atual da animação. Detalhe Esta propriedade é de leitura e gravação. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Tipo esperado: number. Descrição No início da animação se você definir um valor para esta propriedade, ele será respeitado, ou seja, a animação começará a partir do valor definido. Syntax myAnimationObject.progress = 100; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade state O estado atual em que a animação está. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Descrição Valores aceitos para esta propriedade: running: A animação está em execução. paused: A animação está em pausada. completed: Todos os ciclos da animação foram concluídos. canceled: A animação foi cancelada. Syntax var state = myAnimationObject.state; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade styleBetweenFrames Define se as propriedades de estilo de um keyframe devem ser adicionadas desde os keyframes anteriores. Detalhe Esta propriedade é de leitura e gravação. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Tipo esperado: boolean. Descrição Valores aceitos para esta propriedade: true O valor da propriedade é inserido desde os keyframes anteriores, mesmo que eles não o tenham. false O valor da propriedade só é alterado nos keyframes que a contêm. O valor padrão é: true. Syntax myAnimationObject.styleBetweenFrames = false; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade timeline O cronograma da animação. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Descrição O valor contido é um objeto. Propriedades do objeto As propriedades abaixo contêm uma lista de chaves que informa como ocorrerá a atenuação da animação. Se você passar o estilo para as chaves dos quadros-chave, as chaves da lista terão como valor o estilo que será aplicado quando o andamento da animação for igual ao da chave. normal O cronograma da animação para quando a leitura dos keyframes acontece de forma crescente: chave inicial para a chave final. reverse O cronograma da animação para quando a leitura dos keyframes acontece de forma decrescente: chave final para a chave inicial. Direções O cronograma da animação é definido de acordo a direção da mesma. A lista abaixo informa qual cronograma será escolhido de acordo com a direção. normal: O cronograma escolhido é o: normal. reverse: O cronograma escolhido é o: reverse. alternate:Alternara os cronogramas. alternate-reverse: Alternara os cronogramas. random-keys: O cronograma escolhido será sempre o: normal random-offset: O cronograma escolhido será sempre o: normal fluid-random-keys: O cronograma escolhido será sempre o: normal fluid-random-offset: O cronograma escolhido será sempre o: normal Syntax var animationTimeline = myAnimationObject.timeline; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Começando a usar Começando a usar controlAnimationJS. Tabela de suporte a navegadores Conheça a compatibilidade da biblioteca controlAnimationJS entre os principais navegadores. Mozilla Firefox 3.6 * Opera 11.0 * Google Chrome 26.0 * Microsoft Edge * Internet Explorer 5.0 * Safari 5.1 * Atenção Google Chrome: É possível que a biblioteca também suporte versões mais antigas deste navegador. ",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao-em-pagina-unica/"
	},
	"10":{
		"documentContentType":"other",
		"title":" Tabela de suporte a navegadores – controlAnimationJS | FlyNeves ",
		"description":"Conheça a compatibilidade da biblioteca controlAnimationJS entre os principais navegadores.",
		"keywords":"",
		"h1":" Tabela de suporte a navegadores ",
		"h2":"",
		"h3":" Atenção ",
		"mainText":" Tabela de suporte a navegadores Conheça a compatibilidade da biblioteca controlAnimationJS entre os principais navegadores. Mozilla Firefox 3.6 * Opera 11.0 * Google Chrome 26.0 * Microsoft Edge * Internet Explorer 5.0 * Safari 5.1 * Atenção Google Chrome: É possível que a biblioteca também suporte versões mais antigas deste navegador. ",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/tabela-de-suporte-a-navegadores/"
	},
	"11":{
		"documentContentType":"article",
		"title":" Documentação – textFieldRangeJS | FlyNeves ",
		"description":"Nesta página, você encontrará links para todas as páginas relacionadas à documentação da biblioteca textFieldRangeJS.",
		"keywords":"",
		"h1":" Documentação ",
		"h2":" Lista de links: ",
		"h3":"",
		"mainText":" Documentação Nesta página, você encontrará links para todas as páginas relacionadas à documentação da biblioteca textFieldRangeJS. Lista de links: Tudo em uma página Infraestrutura Regras de uso appendString() breakLines() findString() insert() moveCaret() refresh() replaceSelection() select() setCaret() size() afterSelection beforeSelection borderWidth charHeight charList charWidth currentLine currentLineEnd currentLineStart currentLineText left lineHeight numberOfLines offsetLeft offsetTop padding selection selectionEnd selectionStart textFieldHeight textFieldWidth textFieldWidth top viewLeft viewTop x y Começando a usar ",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/"
	},
	"12":{
		"documentContentType":"other",
		"title":" Documentação em página única – textFieldRangeJS | FlyNeves ",
		"description":"Esta página contém toda a documentação da biblioteca textFieldRangeJS.",
		"keywords":"",
		"h1":" Documentação em página única Introdução Infraestrutura Regras de uso Método insert() Método appendString() Método replaceSelection() Método findString() Método size() Método setCaret() Método select() Método lines() Método breakLines() Método moveCaret() Método refresh() Propriedade selection Propriedade beforeSelection Propriedade afterSelection Propriedade selectionEnd Propriedade selectionStart Propriedade currentLine Propriedade currentLineText Propriedade currentLineEnd Propriedade currentLineStart Propriedade numberOfLines Propriedade top Propriedade left Propriedade x Propriedade y Propriedade offsetTop Propriedade offsetLeft Propriedade viewTop Propriedade viewLeft Propriedade charHeight Propriedade charsWidth Propriedade charList Propriedade charBreak Propriedade lineHeight Propriedade textFieldHeight Propriedade textFieldWidth Propriedade borderWidth Propriedade padding Começando a usar Tabela de suporte a navegadores ",
		"h2":" Um breve olhar Leia mais Inspiração Estrutura Funcionamento Fechamento Suporte para elementos HTML Definindo linhas no campo de texto Caracter \r Desempenho Descrição Syntax Suporte a navegadores Descrição Syntax Suporte a navegadores Descrição Syntax Suporte a navegadores Descrição Syntax Suporte a navegadores Descrição Syntax Suporte a navegadores Descrição Syntax Suporte a navegadores Descrição Syntax Suporte a navegadores Descrição Syntax Suporte a navegadores Descrição Syntax Suporte a navegadores Descrição Syntax Suporte a navegadores Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Syntax Suporte a navegadores Detalhe Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":" Movimentando o caret Obter a posição do caret Facade Argumentos Valor de retorno Argumentos Valor de retorno Argumentos Valor de retorno Argumentos Valor de retorno Propriedades do objeto: Argumentos Valor de retorno Propriedades do objeto: Argumentos Valor de retorno Argumentos Valor de retorno Valor de retorno Argumentos Valor de retorno Argumentos Valor de retorno Valor de retorno Propriedades do objeto: Propriedades do objeto: Propriedades do objeto: Propriedades do objeto: Atenção ",
		"mainText":" Documentação em página única Esta página contém toda a documentação da biblioteca textFieldRangeJS. Introdução Unifica as propriedades e métodos de objetos de intervalo de texto: ( Selection e createTextRange() ), implementando recursos fantásticos e tornando-o extremamente simples de usar. Um breve olhar Dois de seus incríveis recursos são descritos resumidamente a seguir: Movimentando o caret Mova o caret no campo de texto da mesma forma que quando o usuário pressiona as teclas de seta. Esta tarefa é extremamente simples, obtendo o objeto textFieldRange do elemento, e utilizando o método moveCaret() , com uma linha de comando seria resolvido: textFieldRange( element ).moveCaret( keyCode ); Talvez você tenha ficado um pouco confuso com o código, pois não havia explicação, não se preocupe, é apenas uma degustação, leia mais sobre o objeto retornado de textFieldRange e o método moveCaret na documentação da biblioteca. Obter a posição do caret Ao obter o objeto textFieldRange do elemento, você verá algumas propriedades sobre a posição atual do caret no campo de texto. No código abaixo estaríamos usando a propriedade top . var caretPosition = textFieldRange( element ).top; Leia mais Leia a documentação da biblioteca , é simples e fácil de aprender. Infraestrutura Entenda um pouco sobre o que acontece internamente em textFieldRangeJS. Inspiração A inspiração para o desenvolvimento desta biblioteca veio durante o processo de desenvolvimento de outro projeto, no qual não entraremos em detalhes. Era necessário um certo controle das ações do usuário no campo de texto além de facilitar a sua usabilidade. Estrutura Ao iniciar e durante o processo de desenvolvimento do código fonte, a modelagem foi baseada no Design Pattern: Facade . Não entraremos em detalhes sobre esses padrões, mas falaremos sobre sua aplicação em nosso código-fonte. Facade A motivação para seu uso foi estruturar um sistema em subsistemas para ajudar a reduzir sua complexidade. Não iremos identificar os elementos, mas está muito claro que a classe Facade é a função textFieldRange , pois ela sabe quais classes do subsistema são responsáveis pela chamada e delega as chamadas do cliente aos objetos do subsistema corretamente. A implementação dos padrões de projeto citados acima, proporcionou ao código fonte de nossa biblioteca baixo acoplamento, no qual cada função, objeto ou classe tem uma responsabilidade de modo que não ultrapassam seus limites. Isso torna o código mais legível, possibilitando ao desenvolvedor seu entendimento e caso necessário, ele poderá fazer mudanças que venham agregar em sua utilização. Funcionamento A biblioteca textFieldRangeJS foi desenvolvida para obter dados de campos de texto e realizar ações sobre eles, desde obter a posição do cursor até simular os movimentos do usuário ao pressionar uma tecla. Ao chamar a função textFieldRange, passando o elemento de entrada de texto como argumento, será retornado um objeto contendo diversos métodos e propriedades para obtenção de dados, manipulação e ações no campo de texto. Para evitar a necessidade de sempre chamar o método principal: textFieldRange (elemento) , basta adicionar o objeto a uma variável, desta forma você pode usá-lo sempre que necessário ao longo do código: var myElement = document.getElementById( 'textarea' ); var myElementRange = textFieldRange( element ); Fechamento textFieldRangeJS é simples e direto para resolver os problemas encontrados ao lidar com elementos de entrada de texto HTML, com precisão, bom desempenho e recursos úteis. Regras de uso Conheça e compreenda as regras de uso da biblioteca textFieldRangeJS. Suporte para elementos HTML Os recursos da biblioteca textFieldRangeJS estão disponíveis apenas para os elementos: &lt;input&gt; e &lt;textarea&gt; . Definindo linhas no campo de texto As linhas do campo de texto são definidas por quebras de linha ('\n' ou '\r\n') e pelo número de vezes que deve haver um estouro e não ouve, dando origem a uma nova linha. Caracter \r Os métodos da biblioteca relacionados à posição e seleção, ignoram o caractere \r, para que a operação da biblioteca tenha o mesmo comportamento em todos os navegadores. Desempenho Para obter o melhor desempenho da biblioteca, não é recomendado exceder mais de 5000 caracteres ou 200 linhas em seu campo de texto. Método insert() Insira uma string na posição do caret no campo de texto. Descrição Este método espera argumentos. Argumentos string Este argumento é obrigatório. Especifica a sequência de caracteres a ser usada pelo método. select Este argumento é opcional. Especifica se a nova sequência de caracteres deve ser selecionada. Valor de retorno O valor retornado é o objeto textFieldRange atualizado. Syntax textFieldRange( element ).insert( 'myString' ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Método appendString() Insere uma sequência de caracteres em uma determinada posição no campo de texto. Descrição Este método espera argumentos. Argumentos position Este argumento é obrigatório. Especifica a posição onde a sequência de caracteres deve ser inserida. string Este argumento é obrigatório. Especifica a sequência de caracteres a ser usada pelo método. select Este argumento é opcional. Especifica se a nova sequência de caracteres deve ser selecionada. Valor de retorno O valor retornado é o objeto textFieldRange atualizado. Syntax textFieldRange( element ).appendString( 0, 'string', true ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Método replaceSelection() Substitui a sequência de caracteres selecionada no campo de texto. Descrição Este método espera argumentos. Argumentos string Este argumento é obrigatório. Especifica a sequência de caracteres a ser usada pelo método. select Este argumento é opcional. Especifica se a nova string deve ser selecionada. Valor de retorno O valor retornado é o objeto textFieldRange atualizado. Syntax textFieldRange( element ).replaceSelection( 'string' ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Método findString() Encontre ocorrências de uma determinada sequência de caracteres no campo de texto. Descrição Este método espera argumentos. Argumentos string Este argumento é obrigatório. Especifica a sequência de caracteres a ser usada pelo método. Valor de retorno O valor retornado é uma matriz com objetos com propriedades para o resultado da pesquisa. Propriedades do objeto: start O início da sequência de caracteres no campo de texto. end O final da sequência de caracteres no campo de texto. string A seqüência de caracteres. Syntax var findString = textFieldRange( element ).findString( 'myString' ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Método size() Simula a entrada de uma sequência de caracteres no campo de texto. Descrição Este método espera argumentos. Argumentos string Este argumento é obrigatório. Especifica a sequência de caracteres a ser usada pelo método. noRemove Este argumento é opcional. O método clonará o elemento do campo de texto para obter os valores das propriedades, ou seja, inserirá elementos no documento e quando não forem mais necessários, os removerá. O uso desse método em uma estrutura repetitiva exige muito do navegador. Este argumento pode ser usado para evitar que o processo fique lento passando true . Exemplo textFieldRange( element ).size( string, true ); Quando não for mais necessário preservar os elementos inseridos pelo método, basta chamá-lo novamente, passando apenas false . Exemplo textFieldRange( element ).size( false ); Valor de retorno O valor retornado é um objeto. Propriedades do objeto: height Retorna a altura em px da sequência de caracteres. width Retorna a largura em px da sequência de caracteres. charHeight Retorna a altura atual em px dos caracteres da sequência de caracteres. lineHeight Retorna a altura em px das linhas contidas no sequência de caracteres. Syntax textFieldRange( element ).size( 'string' ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Método setCaret() Define uma nova posição para o caret no campo de texto. Descrição Este método espera argumentos. Argumentos lineOrPosition Este argumento é obrigatório. Específica a linha ou a nova posição do caret. positionInLine Este argumento é opcional. A nova posição do caret na linha. Se apenas um argumento é passado para este método, será entendido que o valor refere-se à nova posição do caret no campo de texto. Se dois argumentos forem passados para este método, será entendido que o primeiro argumento se refere à linha na qual você deseja colocar o caret, e o segundo à posição na linha. Se o valor do segundo argumento for maior que o número de caracteres na linha, o caret será colocado no final da linha. Valores negativos para o segundo argumento serão entendidos como a subtração do número de caracteres da linha, pelo valor passado. Ou seja, se passar -1 , significa que o caret será posicionado um caractere antes do último caractere da linha. Se você passar para o segundo argumento, o valor -0.1 , o caret será posicionado no final da linha. Valor de retorno O valor retornado é o objeto textFieldRange atualizado. Syntax textFieldRange( element ).setCaret( lineOrPosition , positionInLine ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Método select() Seleciona uma sequência de caracteres no campo de texto. Descrição Este método espera argumentos. Argumentos selectionStart Este argumento é opcional. Especifica a posição do primeiro caractere para iniciar a seleção. selectionEnd Este argumento é opcional. Especifica a posição do último caractere do final da seleção. Se o argumento selectionEnd não for passado, o método colocará o cursor na posição passada para o argumento selectionStart. Se nenhum argumento for passado, o método selecionará todo o texto do campo de texto. Valor de retorno O valor retornado é o objeto textFieldRange atualizado. Syntax textFieldRange( element ).select( selectionStart, selectionEnd ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Método lines() Obtém todas as linhas contidas no campo de texto. Descrição Este método não espera argumentos. Valor de retorno Este método pode retornar com precisão uma matriz contendo as respectivas linhas no campo de texto em suas posições. Syntax var lines = textFieldRange( element ).lines(); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Método breakLines() Obtém as linhas no campo de texto com caracteres de quebra de linha inseridos nos pontos específicos. Descrição Este método espera argumentos. Argumentos apply Este argumento é opcional. Se passado como true , este argumento indica que: o método deve inserir os caracteres de quebra de linha no campo de texto, apenas nos pontos específicos e necessários em que a quebra ocorre. Os “caracteres de quebra de linha” são: '\r\n' ou '\n' de acordo com o navegador. Valor de retorno O valor retornado é uma matriz. Syntax var breakLines = textFieldRange( element ).breakLines(); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Método moveCaret() Mova o caret no campo de texto. Descrição Este método espera argumentos. Argumentos keyCode Este argumento é obrigatório. Valores permitidos 33: Posicione o caret em uma linha uma página acima da linha que está posicionado no momento. 34: Posicione o caret em uma linha uma página abaixo da linha atualmente posicionado. 35: Posicione o caret no último caractere da linha que está atualmente posicionado. 36: Posicione o caret no primeiro caractere da linha atualmente posicionado. 37: Posicione o caret antes do primeiro caractere à esquerda de sua posição atual. 38: Posicione o caret uma linha acima de sua posição atual. 39: Posicione o caret após o primeiro caractere à direita de sua posição atual. 40: Posicione o caret uma linha abaixo de sua posição atual. Nos casos em que não há mais linhas para o caret mover, se você passar o keyCode que sua ação se refere ao mover entre as linhas: Não há mais linhas para cima, mas o keyCode passado foi: 33 ou 38 , o caret será posicionado no primeiro caractere da linha, que está posicionado no momento. Não há mais linhas para baixo, mas o keyCode passado foi: 34 ou 40 , o caret será posicionado no último caractere da linha, que está posicionado no momento. Valor de retorno O valor retornado é o objeto textFieldRange atualizado. Syntax textFieldRange( element ).moveCaret( keyCode ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Método refresh() Atualiza os valores das propriedades do objeto. Descrição Este método não espera argumentos. Valor de retorno O valor retornado é o objeto textFieldRange atualizado. Syntax textFieldRange( element ).refresh(); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade selection A sequência de caracteres selecionada no campo de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Se não houver seleção no campo de texto, o valor será uma sequência de caracteres vazia. Syntax var selection = textFieldRange( element ).selection; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade beforeSelection A sequência de caracteres antes da seleção atual no campo de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Se não houver seleção no campo de texto, o valor será a sequência de caracteres antes da posição atual do caret no campo de texto. Syntax var beforeSelection = textFieldRange( element ).beforeSelection; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade afterSelection A sequência de caracteres posterior após a seleção atual no campo de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Se não houver seleção no campo de texto, o valor será a sequência de caracteres após a posição atual do caret no campo de texto. Syntax var afterSelection = textFieldRange( element ).afterSelection; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade selectionEnd A posição do último caractere da seleção atual no campo de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Se não houver seleção no campo de texto, o valor se referirá à posição do primeiro caractere antes da posição atual do caret no campo de texto. Syntax var selectionEnd = textFieldRange( element ).selectionEnd; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade selectionStart A posição do primeiro caractere da seleção atual no campo de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Se não houver seleção no campo de texto, o valor se referirá à posição do primeiro caractere antes da posição atual do caret no campo de texto. Syntax var selectionStart = textFieldRange( element ).selectionStart; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade currentLine A linha no campo de texto onde o caret está posicionado. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Um número inteiro indicando a linha na qual o caret está posicionado. Syntax var currentLine = textFieldRange( element ).currentLine; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade currentLineText A sequência de caracteres da linha no campo de texto onde o caret está posicionado. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Syntax var currentLineText = textFieldRange( element ).currentLineText; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade currentLineEnd A posição do último caractere da linha no campo de texto onde o caret está posicionado. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Um inteiro indicando a posição do último caractere na linha. Syntax var currentLineEnd = textFieldRange( element ).currentLineEnd; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade currentLineStart A posição do primeiro caractere na linha do campo de texto onde o caret está posicionado. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Um número inteiro indicando a posição do primeiro caractere na linha. Syntax var currentLineStart = textFieldRange( element ).currentLineStart; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade numberOfLines O número de linhas contidas no campo de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Syntax var numberOfLines = textFieldRange( element ).numberOfLines; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade top O deslocamento atual do caret, em relação ao delimitador superior do quadro de exibição do campo de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Se você definir as propriedades CSS em seu elemento: (padding: x; ou border-width: x;), esse valor não será contado, pois a propriedade se refere apenas ao quadro do elemento onde o texto pode ser adicionado. Syntax var top = textFieldRange( element ).top; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade left O deslocamento atual do caret em relação ao delimitador esquerdo do quadro de exibição do campo de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Se você definir as propriedades CSS em seu elemento: (padding: x; ou border-width: x;), esse valor não será contado, pois a propriedade se refere apenas ao quadro do elemento onde o texto pode ser adicionado. Syntax var left = textFieldRange( element ).left; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade x O deslocamento atual do caret, em relação ao delimitador esquerdo do quadro de exibição do campo de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Se você definir as propriedades CSS em seu elemento: (padding: x; ou border-width: x;), esse valor não será contado, pois a propriedade se refere apenas ao quadro do elemento onde o texto pode ser adicionado. Syntax var x = textFieldRange( element ).x; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade y O deslocamento atual do caret, em relação ao delimitador superior do quadro de exibição do campo de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Se você definir as propriedades CSS em seu elemento: (padding: x; ou border-width: x;), esse valor não será contado, pois a propriedade se refere apenas ao quadro do elemento onde o texto pode ser adicionado. Syntax var y = textFieldRange( element ).y; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade offsetTop The current cursor displacement, including locomotion of the scroll relative to the upper limit of the text field of the display frame. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Se você definir as propriedades CSS em seu elemento: (padding: x; ou border-width: x;), esse valor não será contado, pois a propriedade se refere apenas ao quadro do elemento onde o texto pode ser adicionado. Syntax var offsetTop = textFieldRange( element ).offsetTop; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade offsetLeft O deslocamento atual do caret, incluindo a locomoção da rolagem em relação ao delimitador esquerdo do quadro do campo de texto de exibição. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Se você definir as propriedades CSS em seu elemento: (padding: x; ou border-width: x;), esse valor não será contado, pois a propriedade se refere apenas ao quadro do elemento onde o texto pode ser adicionado. Syntax var offsetLeft = textFieldRange( element ).offsetLeft; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade viewTop O deslocamento atual do caret, em relação ao delimitador superior da janela de exibição. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Syntax var viewTop = textFieldRange( element ).viewTop; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade viewLeft O deslocamento atual do caret, em relação ao delimitador esquerdo da janela de exibição. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Syntax var viewLeft = textFieldRange( element ).viewLeft; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade charHeight A altura em px de todos os diferentes caracteres contidos no campo de texto.. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Ao contrário da largura, a altura dos caracteres no campo de texto é sempre o mesmo valor, embora visualmente alguns caracteres pareçam um pouco mais altos do que outros. Syntax var charHeight = textFieldRange( element ).charHeight; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade charsWidth A largura em px de todos os diferentes caracteres contidos no campo de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Contém objetos com propriedades relacionadas aos caracteres. Propriedades do objeto: char O caracter. width A largura em px do caracter. Syntax var charsWidth =textFieldRange( element ).charsWidth; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade charList TContém objetos com propriedades relacionadas aos personagens e a quantidade de vezes que se repetem no campo de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Contém objetos com propriedades referente aos caracteres. Propriedades do objeto: char O caracter. amount O número de vezes que o caractere é repetido no campo de texto. Syntax var charList = textFieldRange( element ).charList; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade charBreak O caractere que o navegador usa para quebrar linhas no campo de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição O “caractere de quebra de linha” são: '\r\n' ou '\n' de acordo com o navegador. Syntax textFieldRange( element ).charBreak; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade lineHeight A altura atual em px das linhas contidas no campo de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Se você definir a propriedade de line-height CSS em seu elemento, usando uma unidade de medida diferente de px, o valor retornado será a conversão do valor para px. Syntax var lineHeight = textFieldRange( element ).lineHeight; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade textFieldHeight A altura do campo de entrada de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição O campo de entrada de texto é o quadro do elemento em que o texto pode ser adicionado. Syntax var textFieldHeight = textFieldRange( element ).textFieldHeight; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade textFieldWidth A largura do campo de entrada de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição O campo de entrada de texto é o quadro do elemento em que o texto pode ser adicionado. Syntax var textFieldWidth = textFieldRange( element ).textFieldWidth; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade borderWidth A largura em px das bordas do elemento de entrada de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Se você definir a propriedade CSS border-width em seu elemento, usando uma unidade de medida diferente de px, O valor das propriedades do objeto será a conversão do valor para px. Propriedades do objeto: top A largura em px da borda superior do elemento de entrada de texto. left A largura em px da borda esquerda do elemento de entrada de texto. right A largura em px da borda direita do elemento de entrada de texto. bottom A largura em px da borda inferior do elemento de entrada de texto. Syntax var borderWidth = textFieldRange( element ).borderWidth; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Propriedade padding Os preenchimento do elemento de entrada de texto Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Se você definir a propriedade de padding CSS em seu elemento usando uma unidade de medida diferente de px, o valor das propriedades do objeto será a conversão do valor em px. Propriedades do objeto: top O preenchimento superior do elemento de entrada de texto. left O preenchimento esquerdo do elemento de entrada de texto. right O preenchimento direito do elemento de entrada de texto. bottom O preenchimento inferior do elemento de entrada de texto. Syntax var padding = textFieldRange( element ).padding; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. Começando a usar Começando a usar textFieldRangeJS. Tabela de suporte a navegadores Conheça a compatibilidade da biblioteca textFieldRangeJS entre os principais navegadores. Mozilla Firefox 20.0.1 * Opera 25.0 * Google Chrome 26.0 * Microsoft Edge * Internet Explorer 7.0 * Safari 5.1 * Atenção Google Chrome: É possível que a biblioteca também suporte versões mais antigas deste navegador. ",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao-em-pagina-unica/"
	},
	"13":{
		"documentContentType":"other",
		"title":" Tabela de suporte a navegadores – textFieldRangeJS | FlyNeves ",
		"description":"Conheça a compatibilidade da biblioteca textFieldRangeJS, entre os diversos navegadores.",
		"keywords":"",
		"h1":" Tabela de suporte a navegadores ",
		"h2":"",
		"h3":" Atenção ",
		"mainText":" Tabela de suporte a navegadores Conheça a compatibilidade da biblioteca textFieldRangeJS entre os principais navegadores. Mozilla Firefox 20.0.1 * Opera 25.0 * Google Chrome 26.0 * Microsoft Edge * Internet Explorer 7.0 * Safari 5.1 * Atenção Google Chrome: É possível que a biblioteca também suporte versões mais antigas deste navegador. ",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/tabela-de-suporte-a-navegadores/"
	},
	"14":{
		"documentContentType":"article",
		"title":" Propriedade $scroll-left – controlAnimationJS | FlyNeves ",
		"description":"Define o deslocamento da rolagem na direção esquerda.",
		"keywords":"",
		"h1":" Propriedade $scroll-left ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade $scroll-left Define o deslocamento da rolagem na direção esquerda. Detalhe Esta propriedade é de leitura e gravação. Esta é uma propriedade de estilo especial criada para controlAnimation. Tipo esperado: number. Descrição Esta propriedade só deve ser usada no estilo CSS dos keyframes. Syntax myAnimationObject[100] = '$scroll-left: 100; top: 50px; left...'; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/$scroll-left/"
	},
	"15":{
		"documentContentType":"article",
		"title":" Propriedade $scroll-to – controlAnimationJS | FlyNeves ",
		"description":"Define o deslocamento da rolagem nas direções superior e esquerda.",
		"keywords":"",
		"h1":" Propriedade $scroll-to ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade $scroll-to Define o deslocamento da rolagem nas direções superior e esquerda. Detalhe Esta propriedade é de leitura e gravação. Esta é uma propriedade de estilo especial criada para controlAnimation. Tipo esperado: number. Descrição Esta propriedade só deve ser usada no estilo CSS dos keyframes. Syntax myAnimationObject[100] = '$scroll-to: 100 200; top: 50px; left...'; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/$scroll-to/"
	},
	"16":{
		"documentContentType":"article",
		"title":" Propriedade $scroll-top – controlAnimationJS | FlyNeves ",
		"description":"Define o deslocamento da rolagem na direção superior.",
		"keywords":"",
		"h1":" Propriedade $scroll-top ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade $scroll-top Define o deslocamento da rolagem na direção superior. Detalhe Esta propriedade é de leitura e gravação. Esta é uma propriedade de estilo especial criada para controlAnimation. Tipo esperado: number. Descrição Esta propriedade só deve ser usada no estilo CSS dos keyframes. Syntax myAnimationObject[100] = '$scroll-top: 100; top: 50px; left...'; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/$scroll-top/"
	},
	"17":{
		"documentContentType":"article",
		"title":" Método addListener() – controlAnimationJS | FlyNeves ",
		"description":"Adiciona ouvintes à animação.",
		"keywords":"",
		"h1":" Método addListener() ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":" Argumentos Valor de retorno ",
		"mainText":" Método addListener() Adiciona ouvintes à animação. Detalhe Este método pertence ao objeto da animação. Descrição Este método espera argumentos. Argumentos listener Este argumento é obrigatório. Específica o ouvinte a ser anexado ao objeto da animação. Tipo esperado: string. Abaixo está uma lista de valores aceitos para este argumento: start: Dispara quando a animação começa. end: Dispara quando a animação termina. iterations: Dispara quando a interação da animação é concluída. changekeys: Dispara quando o progresso da animação ultrapassa o valor de uma chave de quadro. callback Tipo esperado: function. Este argumento é obrigatório. Especifica a função a ser chamada. Valor de retorno Nenhum valor é retornado. Syntax myAnimationObject.addListener( listener, callback ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/addListener/"
	},
	"18":{
		"documentContentType":"article",
		"title":" Método addListenerAll() – controlAnimationJS | FlyNeves ",
		"description":"Adiciona ouvintes a todas as animações.",
		"keywords":"",
		"h1":" Método addListenerAll() ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":" Argumentos Valor de retorno ",
		"mainText":" Método addListenerAll() Adiciona ouvintes a todas as animações. Detalhe Este método pertence ao objeto controlAnimation. Descrição Este método espera argumentos. Argumentos listener Este argumento é obrigatório. Específica o ouvinte a ser anexado aos objetos das animações. Tipo esperado: string. Abaixo está uma lista de valores aceitos para este argumento: start: Dispara quando a animação começa. end: Dispara quando a animação termina. iterations: Dispara quando a interação da animação é concluída. changekeys: Dispara quando o progresso da animação ultrapassa o valor de uma chave de quadro. callback Tipo esperado: function. Este argumento é obrigatório. Especifica a função a ser chamada. Valor de retorno Nenhum valor é retornado. Syntax controlAnimation.addListenerAll( listener, callback ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/addListenerAll/"
	},
	"19":{
		"documentContentType":"article",
		"title":" Propriedade animationId – controlAnimationJS | FlyNeves ",
		"description":"O identificador único de cada objeto de animação.",
		"keywords":"",
		"h1":" Propriedade animationId ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade animationId O identificador único de cada objeto de animação. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Descrição Esta propriedade é muito importante, pois é utilizada pela biblioteca para identificar cada um dos objetos de animação. Syntax var animationId = myAnimationObject.animationId; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/animationId/"
	},
	"20":{
		"documentContentType":"article",
		"title":" Método back() – controlAnimationJS | FlyNeves ",
		"description":"Faz com que o andamento da interação da animação volte a uma determinada posição e, após o retorno ser concluído, continue a interação.",
		"keywords":"",
		"h1":" Método back() ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":" Argumentos Valor de retorno ",
		"mainText":" Método back() Faz com que o andamento da interação da animação volte a uma determinada posição e, após o retorno ser concluído, continue a interação. Detalhe Este método pertence ao objeto da animação. Descrição Este método espera argumentos. Argumentos goTo Este argumento é obrigatório. Especifica a posição para a qual a animação deve retornar. Tipo esperado: number. Valor de retorno Nenhum valor é retornado. Syntax myAnimationObject.back( goTo ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/back/"
	},
	"21":{
		"documentContentType":"article",
		"title":" Método backAll() – controlAnimationJS | FlyNeves ",
		"description":"Faz com que o andamento da interação de todas as animações retorne a uma determinada posição e, após o retorno ser concluído, continue a interação.",
		"keywords":"",
		"h1":" Método backAll() ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":" Argumentos Valor de retorno ",
		"mainText":" Método backAll() Faz com que o andamento da interação de todas as animações retorne a uma determinada posição e, após o retorno ser concluído, continue a interação. Detalhe Este método pertence ao objeto controlAnimation. Descrição Este método espera argumentos. Argumentos goTo Este argumento é obrigatório. Especifica a posição para a qual as animações deve retornar. Tipo esperado: number. Valor de retorno Nenhum valor é retornado. Syntax controlAnimation.backAll( goTo ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/backAll/"
	},
	"22":{
		"documentContentType":"article",
		"title":" Propriedade call – controlAnimationJS | FlyNeves ",
		"description":"Define uma função a ser chamada a cada intercalação.",
		"keywords":"",
		"h1":" Propriedade call ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade call Define uma função a ser chamada a cada intercalação. Detalhe Esta propriedade é de leitura e gravação. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Tipo esperado: function. Descrição Como a função definida será chamada a cada intercalação da animação, evite definir funções que exijam muito do navegador. Syntax myAnimationObject.call = myFunction; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/call/"
	},
	"23":{
		"documentContentType":"article",
		"title":" Método cancel() – controlAnimationJS | FlyNeves ",
		"description":"Cancela a execução da animação.",
		"keywords":"",
		"h1":" Método cancel() ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":" Valor de retorno ",
		"mainText":" Método cancel() Cancela a execução da animação. Detalhe Este método pertence ao objeto da animação. Descrição Este método não espera argumentos. Ao contrário do método pause , este método apaga os dados da animação desnecessários depois de cancelada. Valor de retorno Nenhum valor é retornado. Syntax myAnimationObject.cancel(); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/cancel/"
	},
	"24":{
		"documentContentType":"article",
		"title":" Método cancelAll() – controlAnimationJS | FlyNeves ",
		"description":"Cancela a execução de todas as animações.",
		"keywords":"",
		"h1":" Método cancelAll() ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":" Valor de retorno ",
		"mainText":" Método cancelAll() Cancela a execução de todas as animações. Detalhe Este método pertence ao objeto controlAnimation. Descrição Este método não espera argumentos. Ao contrário do método pauseAll , este método apaga os dados desnecessários da animação após o cancelamento. Valor de retorno Nenhum valor é retornado. Syntax controlAnimation.cancelAll(); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/cancelAll/"
	},
	"25":{
		"documentContentType":"article",
		"title":" Propriedade className – controlAnimationJS | FlyNeves ",
		"description":"Define o nome da classe CSS, a ser vinculada ao objeto de animação.",
		"keywords":"",
		"h1":" Propriedade className ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade className Define o nome da classe CSS, a ser vinculada ao objeto de animação. Detalhe Esta propriedade é de leitura e gravação. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Tipo esperado: string. Descrição Ao inserir o estilo em quadros-chave e definir a propriedade insertStyle como auto ou tag , você precisará de um nome para a classe que será adicionada aos elementos, entretanto, a própria biblioteca já define um valor inicial para esta propriedade que pode ser mantido. Syntax myAnimationObject.className = myFunction; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/className/"
	},
	"26":{
		"documentContentType":"article",
		"title":" Método clone() – controlAnimationJS | FlyNeves ",
		"description":"Clona o objeto de animação.",
		"keywords":"",
		"h1":" Método clone() ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":" Argumentos Valor de retorno ",
		"mainText":" Método clone() Clona o objeto de animação. Detalhe Este método pertence ao objeto da animação. Descrição Este método espera argumentos. Argumentos amount Tipo esperado: number || object. Este argumento é opcional. Especifica o número de clones. Você também pode passar um array com elementos HTML. Um objeto será criado para cada elemento da matriz e a propriedade element será definida com o elemento. O valor padrão é: 1. Valor de retorno O valor retornado é uma matriz com clones do objeto de animação. Syntax var myClones = myAnimationObject.clone( amount ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/clone/"
	},
	"27":{
		"documentContentType":"article",
		"title":" Começando a usar – controlAnimationJS | FlyNeves ",
		"description":"Veja um exemplo simples de uso de controlAnimation.",
		"keywords":"",
		"h1":" Começando a usar ",
		"h2":" Instalando O que faremos? ",
		"h3":" Código Executando ",
		"mainText":" Começando a usar Veja um exemplo simples de uso de controlAnimation. Instalando Para iniciar o tutorial os primeiros passos são: baixar a biblioteca, depois criar um arquivo HTML, neste arquivo adicionaremos o link para controlAnimationJS, também criaremos um arquivo JavaScript com o nome: myAnimation.js, e adicionaremos o link, será onde faremos as manipulações. Vamos inserir os elementos necessários e algum CSS. Veja o exemplo abaixo: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset='utf-8'&gt; &lt;meta name='viewport' content='width=device-width, initial-scale=1.0'&gt; &lt;title&gt;controlAnimationJS&lt;/title&gt; &lt;style&gt; #controlAnimation-rectangle{ float: left; width: 90%; margin: 0 5%; padding: 40px 0; overflow: hidden; height: 200px; } #controlAnimation-rectangle div{ float: left; width: 700px; height: 100px; } #controlAnimation-bars span{ display: inline-block; width: 30px; height: 10px; position: relative; margin: 40px; z-index: 9; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id='controlAnimation-rectangle'&gt; &lt;div&gt; &lt;div id='controlAnimation-bars'&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt; &lt;span&gt;&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script src='controlAnimation.js'&gt;&lt;/script&gt; &lt;script src='myAnimation.js'&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; O que faremos? O exemplo escolhido para este tutorial, será um exemplo muito simples. Servirá apenas para observar como é fácil trabalhar com controlAnimation. Usaremos elementos estilizados em forma de barras e faremos com que se movam aleatoriamente. Código O código abaixo deve ser inserido no arquivo myAnimation.js. var elementsBars = document.getElementById( 'controlAnimation-bars' ).getElementsByTagName( 'span' ); var myAnimation = controlAnimation.create(); myAnimation.direction = 'fluid-random-offset'; myAnimation.iterations = Infinity; myAnimation[ 0 ] = 'height:100px; top: 0px; left: 0px; background-color: rgb( 255, 0, 0 ); border-radius:0px; transform: rotate( 0deg );'; myAnimation[ 100 ] = '300; 50; 100; rgb( 0, 0, 255 ); 20; rotate( 360deg );'; controlAnimation.play( myAnimation.clone( elementBars ) ); Executando Se você não está vendo a animação corretamente: se possível, tente usar o dispositivo horizontalmente. ",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/comecando-a-usar/"
	},
	"28":{
		"documentContentType":"article",
		"title":" Método config() – controlAnimationJS | FlyNeves ",
		"description":"Define os valores padrão para as propriedades dos objetos de animação.",
		"keywords":"",
		"h1":" Método config() ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":" Valor de retorno ",
		"mainText":" Método config() Define os valores padrão para as propriedades dos objetos de animação. Detalhe Este método pertence ao objeto controlAnimation. Descrição Este método não espera argumentos. Valor de retorno O valor retornado é um objeto. Se houver alteração em alguma de suas propriedades, ao iniciar o novo objeto de animação ele já terá os novos valores padrão. Syntax var animationObjectsConfig = controlAnimation.config(); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. ",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/config/"
	},
	"29":{
		"documentContentType":"article",
		"title":" Construindo keyframes – controlAnimationJS | FlyNeves ",
		"description":"Compreenda o funcionamento e as regras de uso para a construção dos keyframes da animação.",
		"keywords":"",
		"h1":" Construindo keyframes ",
		"h2":" Detalhe Descrição Syntax ",
		"h3":" Valores aceitos ",
		"mainText":" Construindo keyframes Compreenda o funcionamento e as regras de uso para a construção dos keyframes da animação. Detalhe Propriedades keyframes são de leitura e gravação. Propriedades keyframes pertence ao objeto da animação, e não ao objeto controlAnimation. Tipo esperado: object || boolean || string . Descrição Os keyframes são os momentos mais importantes de uma animação. Como o nome já diz, são a “chave” de todos os frames de uma animação, são responsáveis por criar o tempo e o ritmo corretos do movimento, por exemplo: apresentam diferenças nas ações de um personagem, uma mudança crucial no movimento ou mesmo uma ótima pose. Valores aceitos Compreenda os valores aceitos para cada keyframe e como usá-los. styleObject Defina um objeto com propriedades CSS, com nomenclatura JavaScript e o estilo CSS será aplicado aos elementos durante a animação. Veja o exemplo abaixo: myAnimationObject[ 0 ] = { borderWidth: '0px', top: '0px', left: '0px', } Nas chaves após a chave 0, você pode minimizar os nomes das propriedades e seus valores. myAnimationObject[ 0 ] = { borderWidth: '0px', top: '0px', left: '0px' } myAnimationObject[ 100 ] = { 0: '10', /* borderWidth: 10px */ 1: '10' /* top: 10px */, 2: '10' /* left: 10px */ } boolean Nenhuma ação é definida, mas a animação é executada e as propriedades do objeto de animação recebem atualizações. string Defina uma string de caracteres e ela será entendida como um estilo CSS e aplicada aos elementos durante a animação. Você também pode minimizar os nomes das propriedades, veja o exemplo abaixo: /* Quando a sequência das propriedades não é alterada. */ myAnimationObject[ 0 ] = ' border-width: 0px; top: 0px; left: 0px '; myAnimationObject[ 100 ] = '10; 200; 200;' /* O mesmo que: 'border-width: 10px; top: 200px; left: 200px'*/; /* ___________________________________________________*/ /* Quando a sequência das propriedades é alterada. */ myAnimationObject[ 0 ] = ' border-width: 0px; top: 0px; left: 0px '; myAnimationObject[ 100 ] = '1: 10; 2: 200; 0: 200;' /* O mesmo que: 'top: 10px; left: 200px; border-width: 200px'*/; /* ___________________________________________________*/ Da maneira como você inicia os valores de uma propriedade, você deve segui-los em todos os quadros-chave, exemplo: border-width: 1px 2px 3px 4px , a sequência de valores relacionados a border, deve ser mantida conforme foram iniciados. Syntax myAnimationObject[ 0 ] = ' top: 0px; left: 50px;...'; ",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/construindo-keyframes/"
	},
	"30":{
		"documentContentType":"article",
		"title":" Método create() – controlAnimationJS | FlyNeves ",
		"description":"Cria um objeto de animação.",
		"keywords":"",
		"h1":"",
		"h2":"",
		"h3":"",
		"mainText":"",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/create/"
	},
	"31":{
		"documentContentType":"article",
		"title":" Propriedade delay – controlAnimationJS | FlyNeves ",
		"description":"Define o atraso entre cada interação da animação.",
		"keywords":"",
		"h1":" Propriedade delay ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade delay Define o atraso entre cada interação da animação. Detalhe Esta propriedade é de leitura e gravação. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Tipo esperado: number || boolean || undefined. Descrição Valores aceitos para esta propriedade: number: Define o atraso em segundos. false: Não há atraso. undefined: Não há atraso. O valor padrão é: false. Syntax myAnimationObject.delay = 5; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/delay/"
	},
	"32":{
		"documentContentType":"article",
		"title":" Propriedade direction – controlAnimationJS | FlyNeves ",
		"description":"Define a ordem de leitura dos keyframes, em um ciclo de animação.",
		"keywords":"",
		"h1":" Propriedade direction ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade direction Define a ordem de leitura dos keyframes, em um ciclo de animação. Detalhe Esta propriedade é de leitura e gravação. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Tipo esperado: string. Descrição Valores aceitos para esta propriedade: normal: A leitura dos keyframes acontece de forma crescente: chave inicial para chave final. reverse: A leitura dos keyframes acontece de forma decrescente: chave final para a chave inicial. alternate: A leitura dos keyframes acontece de forma alternada entre normal e reverse, em cada ciclo e utilizado uma forma diferente de leitura, iniciando da: normal. alternate-reverse: A leitura dos keyframes acontece de forma alternada entre normal e reverse, em cada ciclo e utilizado uma forma diferente de leitura, iniciando da: reverse. random-keys: A cada ciclo, uma chave dos keyframes é escolhida aleatoriamente como o valor máximo que a animação deve progredir, e a animação sempre começará a partir da chave 0 random-offset: Em cada ciclo, um valor de deslocamento entre as chaves dos keyframes é escolhido aleatoriamente como o valor máximo que a animação deve progredir, e a animação sempre iniciará da chave 0 . fluid-random-keys: Em cada ciclo, uma chave dos keyframes é escolhida aleatoriamente como o valor máximo que a animação deve progredir, e a animação sempre começará a partir do valor de progressão alcançado pelo ciclo anterior. fluid-random-offset: Em cada ciclo, um valor de deslocamento entre as chaves dos keyframes é escolhido aleatoriamente como o valor máximo que a animação deve progredir, e a animação sempre começará a partir do valor de progressão alcançado pelo ciclo anterior. O valor padrão é: normal. Syntax myAnimationObject.direction = 'random-keys'; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/direction/"
	},
	"33":{
		"documentContentType":"article",
		"title":" Propriedade duration – controlAnimationJS | FlyNeves ",
		"description":"Define a duração da animação.",
		"keywords":"",
		"h1":" Propriedade duration ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade duration Define a duração da animação. Detalhe Esta propriedade é de leitura e gravação. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Tipo esperado: number. Descrição O valor a ser definido indica a duração da animação em segundos. O valor padrão é: 3. Syntax myAnimationObject.duration = 5000; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/duration/"
	},
	"34":{
		"documentContentType":"article",
		"title":" Propriedade easing – controlAnimationJS | FlyNeves ",
		"description":"Define como a animação irá progredir durante sua execução.",
		"keywords":"",
		"h1":" Propriedade easing ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade easing Define como a animação irá progredir durante sua execução. Detalhe Esta propriedade é de leitura e gravação. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Tipo esperado: function. Descrição A função a ser definida para esta propriedade, deve ser uma das funções de easing . Existem vários sites e projetos que apresentam e distribuem essas funções matemáticas. O valor padrão é: function linearTween( t, b, c, d ) { return c * t / d + b; }; Syntax myAnimationObject.easing = function easeInOutQuad( t, b, c, d ) { t /= d / 2; if ( t < 1 ) return c / 2 * t * t + b; t--; return -c / 2 * ( t * ( t -2 ) - 1 ) + b; }; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/easing/"
	},
	"35":{
		"documentContentType":"article",
		"title":" Propriedade element – controlAnimationJS | FlyNeves ",
		"description":"Define os elementos que sofrerão as mudanças de estilo.",
		"keywords":"",
		"h1":" Propriedade element ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade element Define os elementos que sofrerão as mudanças de estilo. Detalhe Esta propriedade é de leitura e gravação. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Tipo esperado: object. Descrição O objeto a ser passado também pode ser uma matriz contendo elementos HTML. Syntax myAnimationObject.element = document.getElementsByTagName( 'div' ); Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/element/"
	},
	"36":{
		"documentContentType":"article",
		"title":" Propriedade fill – controlAnimationJS | FlyNeves ",
		"description":"Define quais valores são aplicados pela animação, quando chega o fim de seus ciclos.",
		"keywords":"",
		"h1":" Propriedade fill ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade fill Define quais valores são aplicados pela animação, quando chega o fim de seus ciclos. Detalhe Esta propriedade é de leitura e gravação. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Tipo esperado: boolean || number. Descrição Valores aceitos para esta propriedade: true: Os últimos valores são mantidos. false: Nenhum valor é mantido. number: A animação é executada novamente até atingir o valor definido. O valor padrão é: false. Syntax myAnimationObject.fill = true; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/fill/"
	},
	"37":{
		"documentContentType":"article",
		"title":" Método get() – controlAnimationJS | FlyNeves ",
		"description":"Obtém um objeto de animação.",
		"keywords":"",
		"h1":" Método get() ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":" Argumentos Valor de retorno ",
		"mainText":" Método get() Obtém um objeto de animação. Detalhe Este método pertence ao objeto controlAnimation. Descrição Este método espera argumentos. Argumentos name Este argumento é obrigatório. Especifica o identificador de animação do objeto. Tipo esperado: string || number. O identificador da animação é o valor da propriedade name. Valor de retorno O valor retornado é o objeto em caso de sucesso ou false em caso de falha. Syntax controlAnimation.get( name ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/get/"
	},
	"38":{
		"documentContentType":"article",
		"title":" Método getAll() – controlAnimationJS | FlyNeves ",
		"description":"Obtém todos os objetos de animação.",
		"keywords":"",
		"h1":" Método getAll() ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":" Valor de retorno ",
		"mainText":" Método getAll() Obtém todos os objetos de animação. Detalhe Este método pertence ao objeto controlAnimation. Descrição Este método não espera argumentos. Valor de retorno O valor retornado são os objetos em uma matriz em caso de sucesso ou false em caso de falha. Syntax controlAnimation.getAll(); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/getAll/"
	},
	"39":{
		"documentContentType":"article",
		"title":" Método go() – controlAnimationJS | FlyNeves ",
		"description":"Faz com que a interação da animação retorne a uma determinada posição e, após o retorno ser concluído, ela termina.",
		"keywords":"",
		"h1":" Método go() ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":" Argumentos ",
		"mainText":" Método go() Faz com que a interação da animação retorne a uma determinada posição e, após o retorno ser concluído, ela termina. Detalhe Este método pertence ao objeto da animação. Descrição Este método espera argumentos. Argumentos goTo Este argumento é obrigatório. Especifica a posição para a qual a animação deve retornar. Tipo esperado: number. Syntax myAnimationObject.go( goTo ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/go/"
	},
	"40":{
		"documentContentType":"article",
		"title":" Método goAll() – controlAnimationJS | FlyNeves ",
		"description":"Faz com que a interação de todas as animações retorne a uma determinada posição e, após o retorno ser concluído, finaliza cada uma.",
		"keywords":"",
		"h1":" Método goAll() ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":" Argumentos ",
		"mainText":" Método goAll() Faz com que a interação de todas as animações retorne a uma determinada posição e, após o retorno ser concluído, finaliza cada uma. Detalhe Este método pertence ao objeto controlAnimation. Descrição Este método espera argumentos. Argumentos goTo Este argumento é obrigatório. Especifica a posição para a qual a animação deve retornar. Tipo esperado: number. Syntax controlAnimation.goAll( goTo ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/goAll/"
	},
	"41":{
		"documentContentType":"article",
		"title":" Infraestrutura – controlAnimationJS | FlyNeves ",
		"description":"Entenda um pouco sobre o que acontece internamente em controlAnimation.",
		"keywords":"",
		"h1":" Infraestrutura ",
		"h2":" Inspiração Estrutura Funcionamento Fechamento ",
		"h3":" Factory Method Facade ",
		"mainText":" Infraestrutura Entenda um pouco sobre o que acontece internamente em controlAnimation. Inspiração Atualmente existem diversas bibliotecas JavaScript, (incríveis e poderosas), destinadas a construção de animações. Entretanto, acredito que em algum momento você também já tenha se feito os seguintes questionamentos: “Vale a pena usar uma biblioteca tão pesada na minha aplicação?” ou “Estou me tornando um desenvolvedor preguiçoso e não-criativo ao usar lógicas de animações prontas?”. Com a chegada da CSS3 Animations, essas e outras perguntas ficaram obsoletas, entretanto, ela não oferece ao desenvolvedor alguns recursos e funcionalidades que só o JavaScript é capaz de oferecer, se levarmos em consideração a compatibilidade com navegadores antigos, por ser algo recente CSS3 Animations não estará disponível para alguns deles. controlAnimationJS oferece recursos e funcionalidades semelhantes para o desenvolvedor e adiciona novos, sendo de alto desempenho e incrivelmente leve: 13,8 KB. Estrutura Ao iniciar e durante o processo de desenvolvimento do código fonte, a modelagem foi baseada nos Design Pattern: Factory Method e Facade . Não entraremos em detalhes sobre esses padrões, mas falaremos sobre sua aplicação em nosso código-fonte. Factory Method A lista abaixo identifica os elementos em nossa biblioteca de acordo com a estrutura Factory Method. 'A estrutura da forma como foi descrito no livro Design Patterns: Elements of Reusable Object-Oriented Software.' Creator(Criador abstrato): O método controlAnimation.create(), sua ação é: Criar um novo objeto de animação com propriedades e métodos que o desenvolvedor precisará, mas seu uso é opcional. ConcreteCreator(Criador concreto):O método controlAnimation.play( myAnimationObject ) recebe o objeto de animação criado pelo desenvolvedor, e a partir dele cria uma variação que será utilizada internamente pela biblioteca como objeto de controle e reação. Product(Produto abstrato): É o objeto que o desenvolvedor utilizará para construção de sua animação. ConcreteProduct(Produto concreto): Uma variação do objeto de animação do desenvolvedor utilizada internamente pela biblioteca, ela não possuirá apenas as propriedades do objeto do desenvolvedor, mas também propriedades que foram consideradas desnecessárias para o desenvolvedor Em nosso código o Padrão de Projeto (Design Pattern) Factory Method estimulou o baixo acoplamento, maior flexibilidade e a eliminar a necessidade de acoplar classes específicas para aplicação em nível de código. Entretanto sua implementação talvez não tenha sido exatamente como a teoria sugere, mas a acredito que o resultado tenha ficado agradável. Facade Embora não tenha ido a fundo em sua teoria, a motivação para sua utilização foi estruturar um sistema em subsistemas para auxiliar na redução de sua complexidade. Não iremos identificar os elementos como fizemos com o Padrão de Projeto (Design Pattern) anterior, mas fica muito claro que a classe Facade (Agrupadora) é o objeto controlAnimation, pois ele conhece quais as classes dos subsistemas são responsáveis pela chamada e delega chamadas do cliente aos objetos de subsistemas corretos. A implementação dos padrões de projeto citados acima, proporcionou ao código fonte de nossa biblioteca baixo acoplamento, no qual cada função, objeto ou classe tem uma responsabilidade de modo que não ultrapassam seus limites. Isso torna o código mais legível, possibilitando ao desenvolvedor seu entendimento e caso necessário, ele poderá fazer mudanças que venham agregar em sua utilização. Funcionamento Entenderemos o que acontece internamente do processo de inicialização à finalização da animação. Observe o fluxograma abaixo: controlAnimationJS Fluxograma Ao observar o fluxograma atentamente, notará que há uma seta vermelha apontando para um retângulo com a seguinte mensagem: “O objeto é ignorado” , evite que isso ocorra, pois a animação não continuará no fluxo e não será executada. A seguinte situação pode ocasionar essa mensagem: Quando o objeto de animação passado é invalido ou já está em uso. Observe também que há um retângulo com a mensagem: “Dados de animação carregados”. Preste atenção a isso, pois é incrível, o desempenho de execução de cada animação é otimizado exponencialmente, visto que cada animação ao sair da fila passará rapidamente por sua execução. Isso torna possível ter várias animações rodando simultaneamente sem exigir muito do aplicação. Também interessante é a mensagem de condição contida em uma das formas de losango: “O objeto foi atualizado?”, Isso indica que quando a animação sai da fila para ser executada, uma verificação rápida é feita para identificar se o objeto de animação do desenvolvedor foi submetido alguma mudança. Assim, o desenvolvedor não precisa invocar nenhum método de atualização quando muda algo em seu objeto de animação. Observe também que, quando há uma mudança, a animação é atualizada e reproduzida. Fechamento Inicialmente controlAnimationJS estava sendo desenvolvida para ser um motor da animação, isto é, faria a parte interna e não a visual. Cada trecho do código foi pensado, revisado e otimizado para fazer o melhor uso possível dos recursos sem exigir muito da aplicação. Próximo ao final de sua construção, percebeu-se quão pequeno seria o trecho de código necessário para fazê-la também operar a parte visual, atualmente temos uma biblioteca leve e robusta capaz de realizar animações simples e complexas, sem deixar de lado o incrível motor de animação, que faz com que os limites desta biblioteca seja a sua criatividade. ",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/infraestrutura/"
	},
	"42":{
		"documentContentType":"article",
		"title":" Propriedade insertStyle – controlAnimationJS | FlyNeves ",
		"description":"Define o modo para inserir o estilo incluído nos keyframes.",
		"keywords":"",
		"h1":" Propriedade insertStyle ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade insertStyle Define o modo para inserir o estilo incluído nos keyframes. Detalhe Esta propriedade é de leitura e gravação. Tipo esperado: string. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Descrição Valores aceitos para esta propriedade: inline: O estilo é adicionado aos elementos pelo atributo de style HTML. tag: O estilo é adicionado aos elementos pela tag de estilo HTML, por meio da classe CSS, usando o valor da propriedade className como o nome da classe. auto: O estilo por meio da tag é adicionado apenas quando há mais de 1 elemento. O valor padrão é: auto. Syntax myAnimationObject.insertStyle = 'tag'; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/insertStyle/"
	},
	"43":{
		"documentContentType":"article",
		"title":" Biblioteca controlAnimationJS – controlAnimationJS | FlyNeves ",
		"description":"Desenvolvida para desenvolvedores criativos que não abrem mão do alto desempenho, oferecendo total controle sobre suas animações.",
		"keywords":"",
		"h1":" Introdução ",
		"h2":" “Cópia original” controlAnimationJS vs CSS Animations Fechamento Leia mais ",
		"h3":" Comparando a codificação ",
		"mainText":" Introdução Desenvolvida para desenvolvedores criativos que não abrem mão do alto desempenho, oferecendo total controle sobre suas animações. “Cópia original” Inspirado no modelo CSS para a criação de animações com @keyframes, a linha de aprendizado para usar esta biblioteca encurta consideravelmente. Mesmo que você não leia a documentação, dificilmente se perderá ao usá-la, com recursos, propriedades e métodos semelhantes e com a mesma estrutura de @keyframes, a codificação será sempre elegante e familiar. O principal ponto positivo desta biblioteca são as inúmeras possibilidades de criação de animações, simplicidade, elegância, e sua capacidade de trabalhar com diferentes e antigos navegadores, oferecendo entre eles excelente qualidade. controlAnimationJS vs CSS Animations CSS Animations adicionou recursos incríveis, porém, não oferece controle completo, reação às ações do usuário, obtenção de dados sobre o estado atual da animação e se você deseja suportar um navegador antigo, não estará disponível. A biblioteca controlAnimationJS atende a essas necessidades, trazendo funcionalidades semelhantes e adicionando novas, a codificação é mais simples e completa, pois com menos código você fará o mesmo, mas suportará todos os navegadores. Comparando a codificação Os exemplos abaixo são para comparação, neles estaríamos criando a mesma animação com controlAnimationJS e CSS Animations, visualmente você verá a diferença na codificação necessária. código controlAnimationJS var myAnimation = {}; myAnimation.element = myElement; myAnimation[ 0 ] = 'transform: rotate( 0deg )'; myAnimation[ 100 ] = 'rotate( 360deg )'; myAnimation.iterations = Infinity; myAnimation.duration = 2; controlAnimation.play( myAnimation ); Código de animações CSS @keyframes myAnimation { 0% { transform: rotate( 0deg ) } 100% { transform: rotate( 360deg ) } } @-webkit-keyframes myAnimation { 0% { transform: rotate( 0deg ) } 100% { transform: rotate( 360deg ) } } @-moz-keyframes myAnimation { 0% { transform: rotate( 0deg ) } 100% { transform: rotate( 360deg ) } } .myAnimation-element { -webkit-animation: myAnimation 2s infinite; -moz-animation: myAnimation 2s infinite; animation: myAnimation 2s infinite; } Fechamento Extremamente leve, poderosa, com muitos recursos e funcionalidades, controlAnimationJS é a biblioteca que muitos desenvolvedores estavam procurando. Leia mais Leia a documentação da biblioteca , é simples e fácil de aprender. ",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/introducao/"
	},
	"44":{
		"documentContentType":"article",
		"title":" Propriedade iterations – controlAnimationJS | FlyNeves ",
		"description":"Define o número de vezes que a animação deve ser executada.",
		"keywords":"",
		"h1":" Propriedade iterations ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade iterations Define o número de vezes que a animação deve ser executada. Detalhe Esta propriedade é de leitura e gravação. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Tipo esperado: number. Descrição Para que a animação seja executada infinitamente defina: Infinity. O valor padrão é: 1. Syntax myAnimationObject.iterations = 5; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/iterations/"
	},
	"45":{
		"documentContentType":"article",
		"title":" Propriedade iterationsComplete – controlAnimationJS | FlyNeves ",
		"description":"O número de interações concluídas pela animação.",
		"keywords":"",
		"h1":" Propriedade iterationsComplete ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade iterationsComplete O número de interações concluídas pela animação. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Descrição O valor padrão é: 0. Syntax var iterationsComplete = myAnimationObject.iterationsComplete; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/iterationsComplete/"
	},
	"46":{
		"documentContentType":"article",
		"title":" Propriedade keepFrameStyle – controlAnimationJS | FlyNeves ",
		"description":"Define se deve manter o estilo de cada keyframe.",
		"keywords":"",
		"h1":" Propriedade keepFrameStyle ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade keepFrameStyle Define se deve manter o estilo de cada keyframe. Detalhe Esta propriedade é de leitura e gravação. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Tipo esperado: boolean. Descrição Valores aceitos para esta propriedade: true The style value contained in each keyframe is maintained. false Imagine que na construção da sua animação foram passados os seguintes keyframes: para inserir o estilo contido em cada um. myAnimationObject[ 0 ] = ' top: 0px; left:0'; myAnimationObject[ 33 ] = ' 0; 200'; myAnimationObject[ 66 ] = ' 0;'; myAnimationObject[ 100 ] = ' 200; 200'; Observe que no keyframe 33 , a propriedade de estilo CSS left alcançará 200, mas no próximo keyframe não há referência a ele. No caso atual, no próximo keyframe, a propriedade à left seria adicionada com o mesmo valor da chave inicial. O valor padrão é: false. Syntax myAnimationObject.keepFrameStyle = true; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/keepFrameStyle/"
	},
	"47":{
		"documentContentType":"article",
		"title":" Propriedade listenerFired – controlAnimationJS | FlyNeves ",
		"description":"O nome do ouvinte que foi acionado.",
		"keywords":"",
		"h1":" Propriedade listenerFired ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade listenerFired O nome do ouvinte que foi acionado. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Descrição Esta propriedade pode ser usada para identificar o ouvinte recém-acionado. O valor padrão é: false,indicando que nenhum ouvinte foi acionado. Syntax var listenerFired = myAnimationObject.listenerFired; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/listenerFired/"
	},
	"48":{
		"documentContentType":"article",
		"title":" Propriedade maxProgress – controlAnimationJS | FlyNeves ",
		"description":"Define o progresso máximo que a interação da animação pode alcançar.",
		"keywords":"",
		"h1":" Propriedade maxProgress ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade maxProgress Define o progresso máximo que a interação da animação pode alcançar. Detalhe Esta propriedade é de leitura e gravação. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Tipo esperado: number || object. Descrição Você também pode definir o valor da propriedade como uma matriz: myAnimationObject.maxProgress = [ 40, 70 , 90]; No exemplo acima, na primeira interação, o progresso da animação iria até 40 , e no segundo até 70 e assim por diante. Quando o valor da sequência de interação é maior do que o número de valores na matriz, você pode começar de novo: myAnimationObject.maxProgress = [ 40, 70 , 'restart']; Definir a string: 'restart' como o último valor do array fará com que a contagem dos valores do array comece novamente. Se não houver nenhum valor na matriz na posição indicada pelo número de interações concluídas, maxProgress retornará ao seu comportamento normal de acordo com a propriedade direction . Syntax myAnimationObject.maxProgress = 100; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/maxProgress/"
	},
	"49":{
		"documentContentType":"article",
		"title":" Propriedade name – controlAnimationJS | FlyNeves ",
		"description":"Define o identificador do objeto da animação.",
		"keywords":"",
		"h1":" Propriedade name ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade name Define o identificador do objeto da animação. Detalhe Esta propriedade é de leitura e gravação. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Tipo esperado: string || number. Descrição Se você não definir o valor desta propriedade, ele será definido com o valor da propriedade animationId . Syntax myAnimationObject.name = 'myAnimation'; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/name/"
	},
	"50":{
		"documentContentType":"article",
		"title":" Método pause() – controlAnimationJS | FlyNeves ",
		"description":"Pausa a animação em execução.",
		"keywords":"",
		"h1":" Método pause() ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":" Valor de retorno ",
		"mainText":" Método pause() Pausa a animação em execução. Detalhe Este método pertence ao objeto da animação. Descrição Este método não espera argumentos. Valor de retorno Nenhum valor é retornado. Syntax myAnimationObject.pause(); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/pause/"
	},
	"51":{
		"documentContentType":"article",
		"title":" Método pauseAll() – controlAnimationJS | FlyNeves ",
		"description":"Pausa todas as animações em execução.",
		"keywords":"",
		"h1":" Método pauseAll() ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":" Valor de retorno ",
		"mainText":" Método pauseAll() Pausa todas as animações em execução. Detalhe Este método pertence ao objeto controlAnimation. Descrição Este método não espera argumentos. Valor de retorno Nenhum valor é retornado. Syntax controlAnimation.pauseAll(); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/pauseAll/"
	},
	"52":{
		"documentContentType":"article",
		"title":" Método play() – controlAnimationJS | FlyNeves ",
		"description":"Executa a nova animação.",
		"keywords":"",
		"h1":" Método play() ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":" Argumentos Valor de retorno ",
		"mainText":" Método play() Executa a nova animação. Detalhe Este método pertence ao objeto controlAnimation. Descrição Este método espera argumentos. Argumentos object Este argumento é obrigatório. Específica o objeto da animação. Tipo esperado: object. O objeto a ser passado também pode ser uma matriz contendo objetos de animação. all This argument is optional. When passing multiple animation objects with identical styles, pass true to improve performance. Tipo esperado: boolean. Valor de retorno Nenhum valor é retornado. Syntax controlAnimation.play( object ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/play/"
	},
	"53":{
		"documentContentType":"article",
		"title":" Regras de uso – controlAnimationJS | FlyNeves ",
		"description":"Conheça e compreenda as regras de uso da biblioteca controlAnimation.",
		"keywords":"",
		"h1":" Regras de uso ",
		"h2":"",
		"h3":"",
		"mainText":" Regras de uso Conheça e compreenda as regras de uso da biblioteca controlAnimation. A lista abaixo descreve alguns cuidados a serem tomados ao usar controlAnimation. – Ao criar uma animação usando o estilo nos keyframes, você deve sempre definir os valores iniciais de todas as propriedades que usará na chave 0. – Ao criar uma animação utilizando o estilo nos keyframes, lembre-se de que não há conversão dos valores das propriedades, ou seja, a unidade de medida inicial é sempre mantida. – Ao criar uma animação utilizando o estilo nos keyframes, com a intenção de utilizar propriedades CSS que recebem valores relacionados às cores, só é permitido utilizar cores em RGB, RGBA e HEXADECIMAL. – Ao criar uma animação usando o estilo nos keyframes, lembre-se de que a biblioteca não faz a transição de valores não numéricos para numéricos, ou seja, se uma determinada propriedade CSS na chave 0 tiver o valor: centro e a próxima chave: 200px. Nada vai acontecer, porque a biblioteca não faz essa transição. – Ao criar uma animação usando estilo nos quadros-chave, e caso queira que uma propriedade aceite valores flutuantes é necessário que na chave 0, no valor da propriedade insira um . , veja o exemplo abaixo: myAnimationObject[ 0 ] = ' top: 0.px'; Obviamente, se a propriedade já vai receber um valor flutuante na chave 0 , não há necessidade de inserir o . . ",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/regras-de-uso/"
	},
	"54":{
		"documentContentType":"article",
		"title":" Método removeListener() – controlAnimationJS | FlyNeves ",
		"description":"Remove ouvintes da animação.",
		"keywords":"",
		"h1":" Método removeListener() ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":" Argumentos Valor de retorno ",
		"mainText":" Método removeListener() Remove ouvintes da animação. Detalhe Esse método pertence ao objeto de animação. Descrição Esse método espera argumentos. Argumentos listener Abaixo está uma lista de valores aceitos para este argumento: start: Dispara quando a animação começa. end: Dispara quando a animação for concluída. iterations: Dispara quando a interação da animação é concluída. changekeys: Dispara quando o progresso da animação excede o valor de uma chave de quadro. Este argumento é obrigatório. Especifica o evento a ser removido do objeto de animação. Tipo esperado: string. callback Este argumento é obrigatório. Especifica a função a ser chamado. Tipo esperado: function. Valor de retorno Nenhum valor é retornado. Syntax myAnimationObject.removeListener( listener, callback ); Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/removeListener/"
	},
	"55":{
		"documentContentType":"article",
		"title":" Método removeListenerAll() – controlAnimationJS | FlyNeves ",
		"description":"Remove ouvintes de todas as animações.",
		"keywords":"",
		"h1":" Método removeListenerAll() ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":" Argumentos Valor de retorno ",
		"mainText":" Método removeListenerAll() Remove ouvintes de todas as animações. Detalhe Este método pertence ao objeto controlAnimation. Descrição Este método espera argumentos. Argumentos listener Abaixo está uma lista de valores aceitos para este argumento: start: Dispara quando a animação começa. end: Dispara quando a animação termina. iterations: Dispara quando a interação da animação é concluída. changekeys: Dispara quando o progresso da animação ultrapassa o valor de uma chave de quadro. Este argumento é obrigatório. Especifica o ouvinte a ser removido dos objetos de animação. Tipo esperado: string. callback Tipo esperado: function. Este argumento é obrigatório. Especifica a função a ser chamada. Valor de retorno Nenhum valor é retornado. Syntax controlAnimation.removeListenerAll( listener, callback ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/removeListenerAll/"
	},
	"56":{
		"documentContentType":"article",
		"title":" Método restart() – controlAnimationJS | FlyNeves ",
		"description":"Reinicia a animação.",
		"keywords":"",
		"h1":" Método restart() ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":" Valor de retorno ",
		"mainText":" Método restart() Reinicia a animação. Detalhe Este método pertence ao objeto da animação. Descrição Este método não espera argumentos. Valor de retorno Nenhum valor é retornado. Syntax myAnimationObject.restart(); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/restart/"
	},
	"57":{
		"documentContentType":"article",
		"title":" Método restartAll() – controlAnimationJS | FlyNeves ",
		"description":"Reinicie todas as animações.",
		"keywords":"",
		"h1":" Método restartAll() ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":" Valor de retorno ",
		"mainText":" Método restartAll() Reinicie todas as animações. Detalhe Este método pertence ao objeto controlAnimation. Descrição Este método não espera argumentos. Valor de retorno Nenhum valor é retornado. Syntax controlAnimation.restartAll(); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/restartAll/"
	},
	"58":{
		"documentContentType":"article",
		"title":" Método resume() – controlAnimationJS | FlyNeves ",
		"description":"Retome todas as animações.",
		"keywords":"",
		"h1":" Método resume() ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":" Valor de retorno ",
		"mainText":" Método resume() Retoma a animação. Detalhe Este método pertence ao objeto da animação. Descrição Este método não espera argumentos. Valor de retorno Nenhum valor é retornado. Syntax myAnimationObject.resume(); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/resume/"
	},
	"59":{
		"documentContentType":"article",
		"title":" Propriedade state – controlAnimationJS | FlyNeves ",
		"description":"O estado atual em que a animação está.",
		"keywords":"",
		"h1":" Propriedade state ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade state O estado atual em que a animação está. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Descrição Valores aceitos para esta propriedade: running: A animação está em execução. paused: A animação está em pausada. completed: Todos os ciclos da animação foram concluídos. canceled: A animação foi cancelada. Syntax var state = myAnimationObject.state; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/state/"
	},
	"60":{
		"documentContentType":"article",
		"title":" Propriedade styleBetweenFrames – controlAnimationJS | FlyNeves ",
		"description":"Define se as propriedades de estilo de um keyframe devem ser adicionadas desde os keyframes anteriores.",
		"keywords":"",
		"h1":" Propriedade styleBetweenFrames ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":" true false ",
		"mainText":" Propriedade styleBetweenFrames Define se as propriedades de estilo de um keyframe devem ser adicionadas desde os keyframes anteriores. Detalhe Esta propriedade é de leitura e gravação. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Tipo esperado: boolean. Descrição Valores aceitos para esta propriedade: true O valor da propriedade é inserido desde os keyframes anteriores, mesmo que eles não o tenham. false O valor da propriedade só é alterado nos keyframes que a contêm. O valor padrão é: true. Syntax myAnimationObject.styleBetweenFrames = false; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/styleBetweenFrames/"
	},
	"61":{
		"documentContentType":"article",
		"title":" Propriedade timeline – controlAnimationJS | FlyNeves ",
		"description":"O cronograma da animação.",
		"keywords":"",
		"h1":" Propriedade timeline ",
		"h2":" Detalhe Descrição Direções Syntax Suporte a navegadores ",
		"h3":" Propriedades do objeto ",
		"mainText":" Propriedade timeline O cronograma da animação. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Esta propriedade pertence ao objeto de animação, não ao objeto controlAnimation. Descrição O valor contido é um objeto. Propriedades do objeto As propriedades abaixo contêm uma lista de chaves que informa como ocorrerá a atenuação da animação. Se você passar o estilo para as chaves dos quadros-chave, as chaves da lista terão como valor o estilo que será aplicado quando o andamento da animação for igual ao da chave. normal O cronograma da animação para quando a leitura dos keyframes acontece de forma crescente: chave inicial para a chave final. reverse O cronograma da animação para quando a leitura dos keyframes acontece de forma decrescente: chave final para a chave inicial. Direções O cronograma da animação é definido de acordo a direção da mesma. A lista abaixo informa qual cronograma será escolhido de acordo com a direção. normal: O cronograma escolhido é o: normal. reverse: O cronograma escolhido é o: reverse. alternate:Alternara os cronogramas. alternate-reverse: Alternara os cronogramas. random-keys: O cronograma escolhido será sempre o: normal random-offset: O cronograma escolhido será sempre o: normal fluid-random-keys: O cronograma escolhido será sempre o: normal fluid-random-offset: O cronograma escolhido será sempre o: normal Syntax var animationTimeline = myAnimationObject.timeline; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/controlAnimationJS/1.0/documentacao/timeline/"
	},
	"62":{
		"documentContentType":"article",
		"title":" Propriedade afterSelection – textFieldRangeJS | FlyNeves ",
		"description":"A sequência de caracteres posterior após a seleção atual no campo de texto.",
		"keywords":"",
		"h1":" Propriedade afterSelection ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade afterSelection A sequência de caracteres posterior após a seleção atual no campo de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Se não houver seleção no campo de texto, o valor será a sequência de caracteres após a posição atual do caret no campo de texto. Syntax var afterSelection = textFieldRange( element ).afterSelection; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/afterSelection/"
	},
	"63":{
		"documentContentType":"article",
		"title":" Método appendString() – textFieldRangeJS | FlyNeves ",
		"description":"Insere uma sequência de caracteres em uma determinada posição no campo de texto.",
		"keywords":"",
		"h1":" Método appendString() ",
		"h2":" Descrição Syntax Suporte a navegadores ",
		"h3":" Argumentos Valor de retorno ",
		"mainText":" Método appendString() Insere uma sequência de caracteres em uma determinada posição no campo de texto. Descrição Este método espera argumentos. Argumentos position Este argumento é obrigatório. Especifica a posição onde a sequência de caracteres deve ser inserida. string Este argumento é obrigatório. Especifica a sequência de caracteres a ser usada pelo método. select Este argumento é opcional. Especifica se a nova sequência de caracteres deve ser selecionada. Valor de retorno O valor retornado é o objeto textFieldRange atualizado. Syntax textFieldRange( element ).appendString( 0, 'string', true ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/appendString/"
	},
	"64":{
		"documentContentType":"article",
		"title":" Propriedade beforeSelection – textFieldRangeJS | FlyNeves ",
		"description":"A sequência de caracteres antes da seleção atual no campo de texto.",
		"keywords":"",
		"h1":" Propriedade beforeSelection ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade beforeSelection A sequência de caracteres antes da seleção atual no campo de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Se não houver seleção no campo de texto, o valor será a sequência de caracteres antes da posição atual do caret no campo de texto. Syntax var beforeSelection = textFieldRange( element ).beforeSelection; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/beforeSelection/"
	},
	"65":{
		"documentContentType":"article",
		"title":" Propriedade borderWidth – textFieldRangeJS | FlyNeves ",
		"description":"A largura em px das bordas do elemento de entrada de texto.",
		"keywords":"",
		"h1":" Propriedade borderWidth ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":" Propriedades do objeto: ",
		"mainText":" Propriedade borderWidth A largura em px das bordas do elemento de entrada de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Se você definir a propriedade CSS border-width em seu elemento, usando uma unidade de medida diferente de px, O valor das propriedades do objeto será a conversão do valor para px. Propriedades do objeto: top A largura em px da borda superior do elemento de entrada de texto. left A largura em px da borda esquerda do elemento de entrada de texto. right A largura em px da borda direita do elemento de entrada de texto. bottom A largura em px da borda inferior do elemento de entrada de texto. Syntax var borderWidth = textFieldRange( element ).borderWidth; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/borderWidth/"
	},
	"66":{
		"documentContentType":"article",
		"title":" Método breakLines() – textFieldRangeJS | FlyNeves ",
		"description":"Obtém as linhas no campo de texto com caracteres de quebra de linha inseridos nos pontos específicos.",
		"keywords":"",
		"h1":" Método breakLines() ",
		"h2":" Descrição Syntax Suporte a navegadores ",
		"h3":" Argumentos Valor de retorno ",
		"mainText":" Método breakLines() Obtém as linhas no campo de texto com caracteres de quebra de linha inseridos nos pontos específicos. Descrição Este método espera argumentos. Argumentos apply Este argumento é opcional. Se passado como true , este argumento indica que: o método deve inserir os caracteres de quebra de linha no campo de texto, apenas nos pontos específicos e necessários em que a quebra ocorre. Os “caracteres de quebra de linha” são: '\r\n' ou '\n' de acordo com o navegador. Valor de retorno O valor retornado é uma matriz. Syntax var breakLines = textFieldRange( element ).breakLines(); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/breakLines/"
	},
	"67":{
		"documentContentType":"article",
		"title":" Propriedade charBreak – textFieldRangeJS | FlyNeves ",
		"description":"O caractere que o navegador usa para quebrar linhas no campo de texto.",
		"keywords":"",
		"h1":" Propriedade charBreak ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade charBreak O caractere que o navegador usa para quebrar linhas no campo de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição O “caractere de quebra de linha” são: '\r\n' ou '\n' de acordo com o navegador. Syntax textFieldRange( element ).charBreak; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/charBreak/"
	},
	"68":{
		"documentContentType":"article",
		"title":" Propriedade charHeight – textFieldRangeJS | FlyNeves ",
		"description":"A altura em px de todos os diferentes caracteres contidos no campo de texto..",
		"keywords":"",
		"h1":" Propriedade charHeight ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade charHeight A altura em px de todos os diferentes caracteres contidos no campo de texto.. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Ao contrário da largura, a altura dos caracteres no campo de texto é sempre o mesmo valor, embora visualmente alguns caracteres pareçam um pouco mais altos do que outros. Syntax var charHeight = textFieldRange( element ).charHeight; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/charHeight/"
	},
	"69":{
		"documentContentType":"article",
		"title":" Propriedade charList – textFieldRangeJS | FlyNeves ",
		"description":"TContém objetos com propriedades relacionadas aos personagens e a quantidade de vezes que se repetem no campo de texto.",
		"keywords":"",
		"h1":" Propriedade charList ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":" Propriedades do objeto: ",
		"mainText":" Propriedade charList TContém objetos com propriedades relacionadas aos personagens e a quantidade de vezes que se repetem no campo de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Contém objetos com propriedades referente aos caracteres. Propriedades do objeto: char O caracter. amount O número de vezes que o caractere é repetido no campo de texto. Syntax var charList = textFieldRange( element ).charList; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/charList/"
	},
	"70":{
		"documentContentType":"article",
		"title":" Propriedade charsWidth – textFieldRangeJS | FlyNeves ",
		"description":"A largura em px de todos os diferentes caracteres contidos no campo de texto.",
		"keywords":"",
		"h1":" Propriedade charsWidth ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":" Propriedades do objeto: ",
		"mainText":" Propriedade charsWidth A largura em px de todos os diferentes caracteres contidos no campo de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Contém objetos com propriedades relacionadas aos caracteres. Propriedades do objeto: char O caracter. width A largura em px do caracter. Syntax var charsWidth =textFieldRange( element ).charsWidth; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/charsWidth/"
	},
	"71":{
		"documentContentType":"article",
		"title":" Começando a usar – textFieldRangeJS | FlyNeves ",
		"description":"Aprenda os conhecimentos básicos sobre a biblioteca e veja um exemplo simples de seu uso.",
		"keywords":"",
		"h1":" Começando a usar ",
		"h2":" Instalando O que faremos? ",
		"h3":" Código Executando ",
		"mainText":" Começando a usar Aprenda os conhecimentos básicos sobre a biblioteca e veja um exemplo simples de seu uso. Instalando Para iniciar o tutorial os primeiros passos são: baixar a biblioteca, criar um arquivo HTML, neste arquivo adicionaremos a biblioteca textFieldRangeJS. Vamos criar um arquivo JavaScript com o nome: textFieldHandler.js e adicioná-lo ao nosso HTML e também inserir os elementos necessários: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset='utf-8'&gt; &lt;meta name='viewport' content='width=device-width, initial-scale=1.0'&gt; &lt;title&gt;textFieldRangeJS&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;textarea id='textField' &gt;&lt;/textarea&gt; &lt;script src='textFieldRange.js'&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; O que faremos? O exemplo escolhido para este tutorial será um exemplo muito simples. Servirá apenas para observar a velocidade e precisão da biblioteca. Vamos definir a posição do caret no campo de texto, simulando os movimentos das teclas. Código O código abaixo deve ser inserido no arquivo textFieldHandler.js: var myElement = document.getElementById( 'textField' ); textFieldRange( myElement ).moveCaret( caretPosition ); Executando Abaixo está o exemplo em execução, obviamente ligeiramente melhorado: Lorem ipsum dolor sit amet consectetur adipisicing elit. Nam impedit accusantium repudiandae? Velit consequuntur illo aut, laudantium eligendi nesciunt odio consectetur porro et laborum pariatur nostrum sunt, officiis, natus cum! 37 - ArrowLeft 38 - ArrowUp 39 - ArrowRight 40 - ArrowDown 35 - End 36 - Home 33 - PageUp 34 - PageDown ",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/comecando-a-usar/"
	},
	"72":{
		"documentContentType":"article",
		"title":" Propriedade currentLine – textFieldRangeJS | FlyNeves ",
		"description":"A linha no campo de texto onde o caret está posicionado.",
		"keywords":"",
		"h1":" Propriedade currentLine ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade currentLine A linha no campo de texto onde o caret está posicionado. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Um número inteiro indicando a linha na qual o caret está posicionado. Syntax var currentLine = textFieldRange( element ).currentLine; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca. ",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/currentLine/"
	},
	"73":{
		"documentContentType":"article",
		"title":" Propriedade currentLineEnd – textFieldRangeJS | FlyNeves ",
		"description":"A posição do último caractere da linha no campo de texto onde o caret está posicionado.",
		"keywords":"",
		"h1":" Propriedade currentLineEnd ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade currentLineEnd A posição do último caractere da linha no campo de texto onde o caret está posicionado. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Um inteiro indicando a posição do último caractere na linha. Syntax var currentLineEnd = textFieldRange( element ).currentLineEnd; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/currentLineEnd/"
	},
	"74":{
		"documentContentType":"article",
		"title":" Propriedade currentLineStart – textFieldRangeJS | FlyNeves ",
		"description":"A posição do primeiro caractere na linha do campo de texto onde o caret está posicionado.",
		"keywords":"",
		"h1":" Propriedade currentLineStart ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade currentLineStart A posição do primeiro caractere na linha do campo de texto onde o caret está posicionado. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Um número inteiro indicando a posição do primeiro caractere na linha. Syntax var currentLineStart = textFieldRange( element ).currentLineStart; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/currentLineStart/"
	},
	"75":{
		"documentContentType":"article",
		"title":" Propriedade currentLineText – textFieldRangeJS | FlyNeves ",
		"description":"A sequência de caracteres da linha no campo de texto onde o caret está posicionado.",
		"keywords":"",
		"h1":" Propriedade currentLineText ",
		"h2":" Detalhe Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade currentLineText A sequência de caracteres da linha no campo de texto onde o caret está posicionado. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Syntax var currentLineText = textFieldRange( element ).currentLineText; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/currentLineText/"
	},
	"76":{
		"documentContentType":"article",
		"title":" Método findString() – textFieldRangeJS | FlyNeves ",
		"description":"Encontre ocorrências de uma determinada sequência de caracteres no campo de texto.",
		"keywords":"",
		"h1":" Método findString() ",
		"h2":" Descrição Syntax Suporte a navegadores ",
		"h3":" Argumentos Valor de retorno Propriedades do objeto: ",
		"mainText":" Método findString() Encontre ocorrências de uma determinada sequência de caracteres no campo de texto. Descrição Este método espera argumentos. Argumentos string Este argumento é obrigatório. Especifica a sequência de caracteres a ser usada pelo método. Valor de retorno O valor retornado é uma matriz com objetos com propriedades para o resultado da pesquisa. Propriedades do objeto: start O início da sequência de caracteres no campo de texto. end O final da sequência de caracteres no campo de texto. string A seqüência de caracteres. Syntax var findString = textFieldRange( element ).findString( 'myString' ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/findString/"
	},
	"77":{
		"documentContentType":"article",
		"title":" Infraestrutura – textFieldRangeJS | FlyNeves ",
		"description":"Entenda um pouco sobre o que acontece internamente em textFieldRangeJS.",
		"keywords":"",
		"h1":" Infraestrutura ",
		"h2":" Inspiração Estrutura Funcionamento Fechamento ",
		"h3":" Facade ",
		"mainText":" Infraestrutura Entenda um pouco sobre o que acontece internamente em textFieldRangeJS. Inspiração A inspiração para o desenvolvimento desta biblioteca veio durante o processo de desenvolvimento de outro projeto, no qual não entraremos em detalhes. Era necessário um certo controle das ações do usuário no campo de texto além de facilitar a sua usabilidade. Estrutura Ao iniciar e durante o processo de desenvolvimento do código fonte, a modelagem foi baseada no Design Pattern: Facade . Não entraremos em detalhes sobre esses padrões, mas falaremos sobre sua aplicação em nosso código-fonte. Facade A motivação para seu uso foi estruturar um sistema em subsistemas para ajudar a reduzir sua complexidade. Não iremos identificar os elementos, mas está muito claro que a classe Facade é a função textFieldRange , pois ela sabe quais classes do subsistema são responsáveis pela chamada e delega as chamadas do cliente aos objetos do subsistema corretamente. A implementação dos padrões de projeto citados acima, proporcionou ao código fonte de nossa biblioteca baixo acoplamento, no qual cada função, objeto ou classe tem uma responsabilidade de modo que não ultrapassam seus limites. Isso torna o código mais legível, possibilitando ao desenvolvedor seu entendimento e caso necessário, ele poderá fazer mudanças que venham agregar em sua utilização. Funcionamento A biblioteca textFieldRangeJS foi desenvolvida para obter dados de campos de texto e realizar ações sobre eles, desde obter a posição do cursor até simular os movimentos do usuário ao pressionar uma tecla. Ao chamar a função textFieldRange, passando o elemento de entrada de texto como argumento, será retornado um objeto contendo diversos métodos e propriedades para obtenção de dados, manipulação e ações no campo de texto. Para evitar a necessidade de sempre chamar o método principal: textFieldRange (elemento) , basta adicionar o objeto a uma variável, desta forma você pode usá-lo sempre que necessário ao longo do código: var myElement = document.getElementById( 'textarea' ); var myElementRange = textFieldRange( element ); Fechamento textFieldRangeJS é simples e direto para resolver os problemas encontrados ao lidar com elementos de entrada de texto HTML, com precisão, bom desempenho e recursos úteis. ",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/infraestrutura/"
	},
	"78":{
		"documentContentType":"article",
		"title":" Método insert() – textFieldRangeJS | FlyNeves ",
		"description":"Insira uma string na posição do caret no campo de texto.",
		"keywords":"",
		"h1":" Método insert() ",
		"h2":" Descrição Syntax Suporte a navegadores ",
		"h3":" Argumentos Valor de retorno ",
		"mainText":" Método insert() Insira uma string na posição do caret no campo de texto. Descrição Este método espera argumentos. Argumentos string Este argumento é obrigatório. Especifica a sequência de caracteres a ser usada pelo método. select Este argumento é opcional. Especifica se a nova sequência de caracteres deve ser selecionada. Valor de retorno O valor retornado é o objeto textFieldRange atualizado. Syntax textFieldRange( element ).insert( 'myString' ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/insert/"
	},
	"79":{
		"documentContentType":"article",
		"title":" Introdução – textFieldRangeJS | FlyNeves ",
		"description":"Unifica as propriedades e métodos de objetos de intervalo de texto: ( Selection e createTextRange() ), implementando recursos fantásticos e tornando-o extremamente simples de usar.",
		"keywords":"",
		"h1":" Introdução ",
		"h2":" Um breve olhar Leia mais ",
		"h3":" Movimentando o caret Obter a posição do caret ",
		"mainText":" Introdução Unifica as propriedades e métodos de objetos de intervalo de texto: ( Selection e createTextRange() ), implementando recursos fantásticos e tornando-o extremamente simples de usar. Um breve olhar Dois de seus incríveis recursos são descritos resumidamente a seguir: Movimentando o caret Mova o caret no campo de texto da mesma forma que quando o usuário pressiona as teclas de seta. Esta tarefa é extremamente simples, obtendo o objeto textFieldRange do elemento, e utilizando o método moveCaret() , com uma linha de comando seria resolvido: textFieldRange( element ).moveCaret( keyCode ); Talvez você tenha ficado um pouco confuso com o código, pois não havia explicação, não se preocupe, é apenas uma degustação, leia mais sobre o objeto retornado de textFieldRange e o método moveCaret na documentação da biblioteca. Obter a posição do caret Ao obter o objeto textFieldRange do elemento, você verá algumas propriedades sobre a posição atual do caret no campo de texto. No código abaixo estaríamos usando a propriedade top . var caretPosition = textFieldRange( element ).top; Leia mais Leia a documentação da biblioteca , é simples e fácil de aprender. ",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/"
	},
	"80":{
		"documentContentType":"article",
		"title":" Propriedade left – textFieldRangeJS | FlyNeves ",
		"description":"O deslocamento atual do caret em relação ao delimitador esquerdo do quadro de exibição do campo de texto.",
		"keywords":"",
		"h1":" Propriedade left ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade left O deslocamento atual do caret em relação ao delimitador esquerdo do quadro de exibição do campo de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Se você definir as propriedades CSS em seu elemento: (padding: x; ou border-width: x;), esse valor não será contado, pois a propriedade se refere apenas ao quadro do elemento onde o texto pode ser adicionado. Syntax var left = textFieldRange( element ).left; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/left/"
	},
	"81":{
		"documentContentType":"article",
		"title":" Propriedade lineHeight – textFieldRangeJS | FlyNeves ",
		"description":"A altura atual em px das linhas contidas no campo de texto.",
		"keywords":"",
		"h1":" Propriedade lineHeight ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade lineHeight A altura atual em px das linhas contidas no campo de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Se você definir a propriedade de line-height CSS em seu elemento, usando uma unidade de medida diferente de px, o valor retornado será a conversão do valor para px. Syntax var lineHeight = textFieldRange( element ).lineHeight; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/lineHeight/"
	},
	"82":{
		"documentContentType":"article",
		"title":" Método lines() – textFieldRangeJS | FlyNeves ",
		"description":"Obtém todas as linhas contidas no campo de texto.",
		"keywords":"",
		"h1":" Método lines() ",
		"h2":" Descrição Syntax Suporte a navegadores ",
		"h3":" Valor de retorno ",
		"mainText":" Método lines() Obtém todas as linhas contidas no campo de texto. Descrição Este método não espera argumentos. Valor de retorno Este método pode retornar com precisão uma matriz contendo as respectivas linhas no campo de texto em suas posições. Syntax var lines = textFieldRange( element ).lines(); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/lines/"
	},
	"83":{
		"documentContentType":"article",
		"title":" Método moveCaret() – textFieldRangeJS | FlyNeves ",
		"description":"Mova o caret no campo de texto.",
		"keywords":"",
		"h1":" Método moveCaret() ",
		"h2":" Descrição Syntax Suporte a navegadores ",
		"h3":" Argumentos Valor de retorno ",
		"mainText":" Método moveCaret() Mova o caret no campo de texto. Descrição Este método espera argumentos. Argumentos keyCode Este argumento é obrigatório. Valores permitidos 33: Posicione o caret em uma linha uma página acima da linha que está posicionado no momento. 34: Posicione o caret em uma linha uma página abaixo da linha atualmente posicionado. 35: Posicione o caret no último caractere da linha que está atualmente posicionado. 36: Posicione o caret no primeiro caractere da linha atualmente posicionado. 37: Posicione o caret antes do primeiro caractere à esquerda de sua posição atual. 38: Posicione o caret uma linha acima de sua posição atual. 39: Posicione o caret após o primeiro caractere à direita de sua posição atual. 40: Posicione o caret uma linha abaixo de sua posição atual. Nos casos em que não há mais linhas para o caret mover, se você passar o keyCode que sua ação se refere ao mover entre as linhas: Não há mais linhas para cima, mas o keyCode passado foi: 33 ou 38 , o caret será posicionado no primeiro caractere da linha, que está posicionado no momento. Não há mais linhas para baixo, mas o keyCode passado foi: 34 ou 40 , o caret será posicionado no último caractere da linha, que está posicionado no momento. Valor de retorno O valor retornado é o objeto textFieldRange atualizado. Syntax textFieldRange( element ).moveCaret( keyCode ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/moveCaret/"
	},
	"84":{
		"documentContentType":"article",
		"title":" Propriedade numberOfLines – textFieldRangeJS | FlyNeves ",
		"description":"O número de linhas contidas no campo de texto.",
		"keywords":"",
		"h1":" Propriedade numberOfLines ",
		"h2":" Detalhe Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade numberOfLines O número de linhas contidas no campo de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Syntax var numberOfLines = textFieldRange( element ).numberOfLines; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/numberOfLines/"
	},
	"85":{
		"documentContentType":"article",
		"title":" Propriedade offsetLeft – textFieldRangeJS | FlyNeves ",
		"description":"O deslocamento atual do caret, incluindo a locomoção da rolagem em relação ao delimitador esquerdo do quadro do campo de texto de exibição.",
		"keywords":"",
		"h1":" Propriedade offsetLeft ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade offsetLeft O deslocamento atual do caret, incluindo a locomoção da rolagem em relação ao delimitador esquerdo do quadro do campo de texto de exibição. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Se você definir as propriedades CSS em seu elemento: (padding: x; ou border-width: x;), esse valor não será contado, pois a propriedade se refere apenas ao quadro do elemento onde o texto pode ser adicionado. Syntax var offsetLeft = textFieldRange( element ).offsetLeft; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/offsetLeft/"
	},
	"86":{
		"documentContentType":"article",
		"title":" Propriedade offsetTop – textFieldRangeJS | FlyNeves ",
		"description":"The current cursor displacement, including locomotion of the scroll relative to the upper limit of the text field of the display frame.",
		"keywords":"",
		"h1":" Propriedade offsetTop ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade offsetTop The current cursor displacement, including locomotion of the scroll relative to the upper limit of the text field of the display frame. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Se você definir as propriedades CSS em seu elemento: (padding: x; ou border-width: x;), esse valor não será contado, pois a propriedade se refere apenas ao quadro do elemento onde o texto pode ser adicionado. Syntax var offsetTop = textFieldRange( element ).offsetTop; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/offsetTop/"
	},
	"87":{
		"documentContentType":"article",
		"title":" Propriedade padding – textFieldRangeJS | FlyNeves ",
		"description":"Os preenchimento do elemento de entrada de texto",
		"keywords":"",
		"h1":" Propriedade padding ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":" Propriedades do objeto: ",
		"mainText":" Propriedade padding Os preenchimento do elemento de entrada de texto Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Se você definir a propriedade de padding CSS em seu elemento usando uma unidade de medida diferente de px, o valor das propriedades do objeto será a conversão do valor em px. Propriedades do objeto: top O preenchimento superior do elemento de entrada de texto. left O preenchimento esquerdo do elemento de entrada de texto. right O preenchimento direito do elemento de entrada de texto. bottom O preenchimento inferior do elemento de entrada de texto. Syntax var padding = textFieldRange( element ).padding; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/padding/"
	},
	"88":{
		"documentContentType":"article",
		"title":" Método refresh() – textFieldRangeJS | FlyNeves ",
		"description":"Atualiza os valores das propriedades do objeto.",
		"keywords":"",
		"h1":" Método refresh() ",
		"h2":" Descrição Syntax Suporte a navegadores ",
		"h3":" Valor de retorno ",
		"mainText":" Método refresh() Atualiza os valores das propriedades do objeto. Descrição Este método não espera argumentos. Valor de retorno O valor retornado é o objeto textFieldRange atualizado. Syntax textFieldRange( element ).refresh(); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/refresh/"
	},
	"89":{
		"documentContentType":"article",
		"title":" Regras de utilização – textFieldRangeJS | FlyNeves ",
		"description":"Conheça e compreenda as regras de uso da biblioteca textFieldRangeJS.",
		"keywords":"",
		"h1":" Regras de uso ",
		"h2":" Suporte para elementos HTML Definindo linhas no campo de texto Caracter \r Desempenho ",
		"h3":"",
		"mainText":" Regras de uso Conheça e compreenda as regras de uso da biblioteca textFieldRangeJS. Suporte para elementos HTML Os recursos da biblioteca textFieldRangeJS estão disponíveis apenas para os elementos: &lt;input&gt; e &lt;textarea&gt; . Definindo linhas no campo de texto As linhas do campo de texto são definidas por quebras de linha ('\n' ou '\r\n') e pelo número de vezes que deve haver um estouro e não ouve, dando origem a uma nova linha. Caracter \r Os métodos da biblioteca relacionados à posição e seleção, ignoram o caractere \r, para que a operação da biblioteca tenha o mesmo comportamento em todos os navegadores. Desempenho Para obter o melhor desempenho da biblioteca, não é recomendado exceder mais de 5000 caracteres ou 200 linhas em seu campo de texto. ",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/regras-de-uso/"
	},
	"90":{
		"documentContentType":"article",
		"title":" Método replaceSelection() – textFieldRangeJS | FlyNeves ",
		"description":"Substitui a sequência de caracteres selecionada no campo de texto.",
		"keywords":"",
		"h1":" Método replaceSelection() ",
		"h2":" Descrição Syntax Suporte a navegadores ",
		"h3":" Argumentos Valor de retorno ",
		"mainText":" Método replaceSelection() Substitui a sequência de caracteres selecionada no campo de texto. Descrição Este método espera argumentos. Argumentos string Este argumento é obrigatório. Especifica a sequência de caracteres a ser usada pelo método. select Este argumento é opcional. Especifica se a nova string deve ser selecionada. Valor de retorno O valor retornado é o objeto textFieldRange atualizado. Syntax textFieldRange( element ).replaceSelection( 'string' ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/replaceSelection/"
	},
	"91":{
		"documentContentType":"article",
		"title":" Método select() – textFieldRangeJS | FlyNeves ",
		"description":"Seleciona uma sequência de caracteres no campo de texto.",
		"keywords":"",
		"h1":" Método select() ",
		"h2":" Descrição Syntax Suporte a navegadores ",
		"h3":" Argumentos Valor de retorno ",
		"mainText":" Método select() Seleciona uma sequência de caracteres no campo de texto. Descrição Este método espera argumentos. Argumentos selectionStart Este argumento é opcional. Especifica a posição do primeiro caractere para iniciar a seleção. selectionEnd Este argumento é opcional. Especifica a posição do último caractere do final da seleção. Se o argumento selectionEnd não for passado, o método colocará o cursor na posição passada para o argumento selectionStart. Se nenhum argumento for passado, o método selecionará todo o texto do campo de texto. Valor de retorno O valor retornado é o objeto textFieldRange atualizado. Syntax textFieldRange( element ).select( selectionStart, selectionEnd ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/select/"
	},
	"92":{
		"documentContentType":"article",
		"title":" Propriedade selection – textFieldRangeJS | FlyNeves ",
		"description":"A sequência de caracteres selecionada no campo de texto.",
		"keywords":"",
		"h1":" Propriedade selection ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade selection A sequência de caracteres selecionada no campo de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Se não houver seleção no campo de texto, o valor será uma sequência de caracteres vazia. Syntax var selection = textFieldRange( element ).selection; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/selection/"
	},
	"93":{
		"documentContentType":"article",
		"title":" Propriedade selectionEnd – textFieldRangeJS | FlyNeves ",
		"description":"A posição do último caractere da seleção atual no campo de texto.",
		"keywords":"",
		"h1":" Propriedade selectionEnd ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade selectionEnd A posição do último caractere da seleção atual no campo de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Se não houver seleção no campo de texto, o valor se referirá à posição do primeiro caractere antes da posição atual do caret no campo de texto. Syntax var selectionEnd = textFieldRange( element ).selectionEnd; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/selectionEnd/"
	},
	"94":{
		"documentContentType":"article",
		"title":" Propriedade selectionStart – textFieldRangeJS | FlyNeves ",
		"description":"A posição do primeiro caractere da seleção atual no campo de texto.",
		"keywords":"",
		"h1":" Propriedade selectionStart ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade selectionStart A posição do primeiro caractere da seleção atual no campo de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Se não houver seleção no campo de texto, o valor se referirá à posição do primeiro caractere antes da posição atual do caret no campo de texto. Syntax var selectionStart = textFieldRange( element ).selectionStart; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/selectionStart/"
	},
	"95":{
		"documentContentType":"article",
		"title":" Método setCaret() – textFieldRangeJS | FlyNeves ",
		"description":"Define uma nova posição para o caret no campo de texto.",
		"keywords":"",
		"h1":" Método setCaret() ",
		"h2":" Descrição Syntax Suporte a navegadores ",
		"h3":" Argumentos Valor de retorno ",
		"mainText":" Método setCaret() Define uma nova posição para o caret no campo de texto. Descrição Este método espera argumentos. Argumentos lineOrPosition Este argumento é obrigatório. Específica a linha ou a nova posição do caret. positionInLine Este argumento é opcional. A nova posição do caret na linha. Se apenas um argumento é passado para este método, será entendido que o valor refere-se à nova posição do caret no campo de texto. Se dois argumentos forem passados para este método, será entendido que o primeiro argumento se refere à linha na qual você deseja colocar o caret, e o segundo à posição na linha. Se o valor do segundo argumento for maior que o número de caracteres na linha, o caret será colocado no final da linha. Valores negativos para o segundo argumento serão entendidos como a subtração do número de caracteres da linha, pelo valor passado. Ou seja, se passar -1 , significa que o caret será posicionado um caractere antes do último caractere da linha. Se você passar para o segundo argumento, o valor -0.1 , o caret será posicionado no final da linha. Valor de retorno O valor retornado é o objeto textFieldRange atualizado. Syntax textFieldRange( element ).setCaret( lineOrPosition , positionInLine ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/setCaret/"
	},
	"96":{
		"documentContentType":"article",
		"title":" Método size() – textFieldRangeJS | FlyNeves ",
		"description":"Simula a entrada de uma sequência de caracteres no campo de texto.",
		"keywords":"",
		"h1":" Método size() ",
		"h2":" Descrição Syntax Suporte a navegadores ",
		"h3":" Argumentos Valor de retorno Propriedades do objeto: ",
		"mainText":" Método size() Simula a entrada de uma sequência de caracteres no campo de texto. Descrição Este método espera argumentos. Argumentos string Este argumento é obrigatório. Especifica a sequência de caracteres a ser usada pelo método. noRemove Este argumento é opcional. O método clonará o elemento do campo de texto para obter os valores das propriedades, ou seja, inserirá elementos no documento e quando não forem mais necessários, os removerá. O uso desse método em uma estrutura repetitiva exige muito do navegador. Este argumento pode ser usado para evitar que o processo fique lento passando true . Exemplo textFieldRange( element ).size( string, true ); Quando não for mais necessário preservar os elementos inseridos pelo método, basta chamá-lo novamente, passando apenas false . Exemplo textFieldRange( element ).size( false ); Valor de retorno O valor retornado é um objeto. Propriedades do objeto: height Retorna a altura em px da sequência de caracteres. width Retorna a largura em px da sequência de caracteres. charHeight Retorna a altura atual em px dos caracteres da sequência de caracteres. lineHeight Retorna a altura em px das linhas contidas no sequência de caracteres. Syntax textFieldRange( element ).size( 'string' ); Suporte a navegadores Este método possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/size/"
	},
	"97":{
		"documentContentType":"article",
		"title":" Propriedade textFieldHeight – textFieldRangeJS | FlyNeves ",
		"description":"A altura do campo de entrada de texto.",
		"keywords":"",
		"h1":" Propriedade textFieldHeight ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade textFieldHeight A altura do campo de entrada de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição O campo de entrada de texto é o quadro do elemento em que o texto pode ser adicionado. Syntax var textFieldHeight = textFieldRange( element ).textFieldHeight; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/textFieldHeight/"
	},
	"98":{
		"documentContentType":"article",
		"title":" Propriedade textFieldWidth – textFieldRangeJS | FlyNeves ",
		"description":"A largura do campo de entrada de texto.",
		"keywords":"",
		"h1":" Propriedade textFieldWidth ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade textFieldWidth A largura do campo de entrada de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição O campo de entrada de texto é o quadro do elemento em que o texto pode ser adicionado. Syntax var textFieldWidth = textFieldRange( element ).textFieldWidth; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/textFieldWidth/"
	},
	"99":{
		"documentContentType":"article",
		"title":" Propriedade top – textFieldRangeJS | FlyNeves ",
		"description":"O deslocamento atual do caret, em relação ao delimitador superior do quadro de exibição do campo de texto.",
		"keywords":"",
		"h1":" Propriedade top ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade top O deslocamento atual do caret, em relação ao delimitador superior do quadro de exibição do campo de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Se você definir as propriedades CSS em seu elemento: (padding: x; ou border-width: x;), esse valor não será contado, pois a propriedade se refere apenas ao quadro do elemento onde o texto pode ser adicionado. Syntax var top = textFieldRange( element ).top; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/top/"
	},
	"100":{
		"documentContentType":"article",
		"title":" Propriedade viewLeft – textFieldRangeJS | FlyNeves ",
		"description":"O deslocamento atual do caret, em relação ao delimitador esquerdo da janela de exibição.",
		"keywords":"",
		"h1":" Propriedade viewLeft ",
		"h2":" Detalhe Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade viewLeft O deslocamento atual do caret, em relação ao delimitador esquerdo da janela de exibição. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Syntax var viewLeft = textFieldRange( element ).viewLeft; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/viewLeft/"
	},
	"101":{
		"documentContentType":"article",
		"title":" Propriedade viewTop – textFieldRangeJS | FlyNeves ",
		"description":"O deslocamento atual do caret, em relação ao delimitador superior da janela de exibição.",
		"keywords":"",
		"h1":" Propriedade viewTop ",
		"h2":" Detalhe Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade viewTop O deslocamento atual do caret, em relação ao delimitador superior da janela de exibição. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Syntax var viewTop = textFieldRange( element ).viewTop; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/viewTop/"
	},
	"102":{
		"documentContentType":"article",
		"title":" Propriedade x – textFieldRangeJS | FlyNeves ",
		"description":"O deslocamento atual do caret, em relação ao delimitador esquerdo do quadro de exibição do campo de texto.",
		"keywords":"",
		"h1":" Propriedade x ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade x O deslocamento atual do caret, em relação ao delimitador esquerdo do quadro de exibição do campo de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Se você definir as propriedades CSS em seu elemento: (padding: x; ou border-width: x;), esse valor não será contado, pois a propriedade se refere apenas ao quadro do elemento onde o texto pode ser adicionado. Syntax var x = textFieldRange( element ).x; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/x/"
	},
	"103":{
		"documentContentType":"article",
		"title":" Propriedade y – textFieldRangeJS | FlyNeves ",
		"description":"O deslocamento atual do caret, em relação ao delimitador superior do quadro de exibição do campo de texto.",
		"keywords":"",
		"h1":" Propriedade y ",
		"h2":" Detalhe Descrição Syntax Suporte a navegadores ",
		"h3":"",
		"mainText":" Propriedade y O deslocamento atual do caret, em relação ao delimitador superior do quadro de exibição do campo de texto. Detalhe Esta é uma propriedade somente leitura, ou seja, seu valor não deve ser alterado. Descrição Se você definir as propriedades CSS em seu elemento: (padding: x; ou border-width: x;), esse valor não será contado, pois a propriedade se refere apenas ao quadro do elemento onde o texto pode ser adicionado. Syntax var y = textFieldRange( element ).y; Suporte a navegadores Esta propriedade possui a mesma tabela de compatibilidade da biblioteca, ou seja, basta olhar a tabela de suporte da biblioteca.",
		"url":"https://www.flyneves.com/pt-BR/projetos/textFieldRangeJS/1.0/documentacao/y/"
	}
}